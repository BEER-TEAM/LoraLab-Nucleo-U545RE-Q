
BIR_LORA_LAB.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000238  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009c2c  08000238  08000238  00010238  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000224  08009e64  08009e64  00019e64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800a088  0800a088  0001a088  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800a090  0800a090  0001a090  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800a094  0800a094  0001a094  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000068  20000000  0800a098  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000007b8  20000068  0800a100  00020068  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20000820  0800a100  00020820  2**0
                  ALLOC
  9 .ARM.attributes 00000036  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 10 .comment      00000043  00000000  00000000  0002009e  2**0
                  CONTENTS, READONLY
 11 .debug_info   00017803  00000000  00000000  000200e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 00002bcc  00000000  00000000  000378e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00001288  00000000  00000000  0003a4b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_rnglists 00000e41  00000000  00000000  0003b738  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  00030957  00000000  00000000  0003c579  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0001733a  00000000  00000000  0006ced0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    00135585  00000000  00000000  0008420a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_frame  00005548  00000000  00000000  001b9790  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 0000004d  00000000  00000000  001becd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000238 <__do_global_dtors_aux>:
 8000238:	b510      	push	{r4, lr}
 800023a:	4c05      	ldr	r4, [pc, #20]	; (8000250 <__do_global_dtors_aux+0x18>)
 800023c:	7823      	ldrb	r3, [r4, #0]
 800023e:	b933      	cbnz	r3, 800024e <__do_global_dtors_aux+0x16>
 8000240:	4b04      	ldr	r3, [pc, #16]	; (8000254 <__do_global_dtors_aux+0x1c>)
 8000242:	b113      	cbz	r3, 800024a <__do_global_dtors_aux+0x12>
 8000244:	4804      	ldr	r0, [pc, #16]	; (8000258 <__do_global_dtors_aux+0x20>)
 8000246:	f3af 8000 	nop.w
 800024a:	2301      	movs	r3, #1
 800024c:	7023      	strb	r3, [r4, #0]
 800024e:	bd10      	pop	{r4, pc}
 8000250:	20000068 	.word	0x20000068
 8000254:	00000000 	.word	0x00000000
 8000258:	08009e4c 	.word	0x08009e4c

0800025c <frame_dummy>:
 800025c:	b508      	push	{r3, lr}
 800025e:	4b03      	ldr	r3, [pc, #12]	; (800026c <frame_dummy+0x10>)
 8000260:	b11b      	cbz	r3, 800026a <frame_dummy+0xe>
 8000262:	4903      	ldr	r1, [pc, #12]	; (8000270 <frame_dummy+0x14>)
 8000264:	4803      	ldr	r0, [pc, #12]	; (8000274 <frame_dummy+0x18>)
 8000266:	f3af 8000 	nop.w
 800026a:	bd08      	pop	{r3, pc}
 800026c:	00000000 	.word	0x00000000
 8000270:	2000006c 	.word	0x2000006c
 8000274:	08009e4c 	.word	0x08009e4c

08000278 <strlen>:
 8000278:	4603      	mov	r3, r0
 800027a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800027e:	2a00      	cmp	r2, #0
 8000280:	d1fb      	bne.n	800027a <strlen+0x2>
 8000282:	1a18      	subs	r0, r3, r0
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr

08000288 <__aeabi_uldivmod>:
 8000288:	b953      	cbnz	r3, 80002a0 <__aeabi_uldivmod+0x18>
 800028a:	b94a      	cbnz	r2, 80002a0 <__aeabi_uldivmod+0x18>
 800028c:	2900      	cmp	r1, #0
 800028e:	bf08      	it	eq
 8000290:	2800      	cmpeq	r0, #0
 8000292:	bf1c      	itt	ne
 8000294:	f04f 31ff 	movne.w	r1, #4294967295
 8000298:	f04f 30ff 	movne.w	r0, #4294967295
 800029c:	f000 b982 	b.w	80005a4 <__aeabi_idiv0>
 80002a0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002a4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a8:	f000 f806 	bl	80002b8 <__udivmoddi4>
 80002ac:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002b4:	b004      	add	sp, #16
 80002b6:	4770      	bx	lr

080002b8 <__udivmoddi4>:
 80002b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80002bc:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80002be:	460d      	mov	r5, r1
 80002c0:	4604      	mov	r4, r0
 80002c2:	460f      	mov	r7, r1
 80002c4:	2b00      	cmp	r3, #0
 80002c6:	d146      	bne.n	8000356 <__udivmoddi4+0x9e>
 80002c8:	428a      	cmp	r2, r1
 80002ca:	4694      	mov	ip, r2
 80002cc:	d95e      	bls.n	800038c <__udivmoddi4+0xd4>
 80002ce:	fab2 f382 	clz	r3, r2
 80002d2:	b143      	cbz	r3, 80002e6 <__udivmoddi4+0x2e>
 80002d4:	fa02 fc03 	lsl.w	ip, r2, r3
 80002d8:	f1c3 0220 	rsb	r2, r3, #32
 80002dc:	409f      	lsls	r7, r3
 80002de:	409c      	lsls	r4, r3
 80002e0:	fa20 f202 	lsr.w	r2, r0, r2
 80002e4:	4317      	orrs	r7, r2
 80002e6:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002ea:	fa1f f58c 	uxth.w	r5, ip
 80002ee:	0c22      	lsrs	r2, r4, #16
 80002f0:	fbb7 f1fe 	udiv	r1, r7, lr
 80002f4:	fb0e 7711 	mls	r7, lr, r1, r7
 80002f8:	fb01 f005 	mul.w	r0, r1, r5
 80002fc:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000300:	4290      	cmp	r0, r2
 8000302:	d908      	bls.n	8000316 <__udivmoddi4+0x5e>
 8000304:	eb1c 0202 	adds.w	r2, ip, r2
 8000308:	f101 37ff 	add.w	r7, r1, #4294967295
 800030c:	d202      	bcs.n	8000314 <__udivmoddi4+0x5c>
 800030e:	4290      	cmp	r0, r2
 8000310:	f200 8134 	bhi.w	800057c <__udivmoddi4+0x2c4>
 8000314:	4639      	mov	r1, r7
 8000316:	1a12      	subs	r2, r2, r0
 8000318:	b2a4      	uxth	r4, r4
 800031a:	fbb2 f0fe 	udiv	r0, r2, lr
 800031e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000322:	fb00 f505 	mul.w	r5, r0, r5
 8000326:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800032a:	42a5      	cmp	r5, r4
 800032c:	d908      	bls.n	8000340 <__udivmoddi4+0x88>
 800032e:	eb1c 0404 	adds.w	r4, ip, r4
 8000332:	f100 32ff 	add.w	r2, r0, #4294967295
 8000336:	d202      	bcs.n	800033e <__udivmoddi4+0x86>
 8000338:	42a5      	cmp	r5, r4
 800033a:	f200 8119 	bhi.w	8000570 <__udivmoddi4+0x2b8>
 800033e:	4610      	mov	r0, r2
 8000340:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000344:	1b64      	subs	r4, r4, r5
 8000346:	2100      	movs	r1, #0
 8000348:	b11e      	cbz	r6, 8000352 <__udivmoddi4+0x9a>
 800034a:	40dc      	lsrs	r4, r3
 800034c:	2300      	movs	r3, #0
 800034e:	e9c6 4300 	strd	r4, r3, [r6]
 8000352:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0xb4>
 800035a:	2e00      	cmp	r6, #0
 800035c:	f000 80fc 	beq.w	8000558 <__udivmoddi4+0x2a0>
 8000360:	2100      	movs	r1, #0
 8000362:	e9c6 0500 	strd	r0, r5, [r6]
 8000366:	4608      	mov	r0, r1
 8000368:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800036c:	fab3 f183 	clz	r1, r3
 8000370:	2900      	cmp	r1, #0
 8000372:	d14c      	bne.n	800040e <__udivmoddi4+0x156>
 8000374:	42ab      	cmp	r3, r5
 8000376:	f0c0 80f2 	bcc.w	800055e <__udivmoddi4+0x2a6>
 800037a:	4282      	cmp	r2, r0
 800037c:	f240 80ef 	bls.w	800055e <__udivmoddi4+0x2a6>
 8000380:	4608      	mov	r0, r1
 8000382:	2e00      	cmp	r6, #0
 8000384:	d0e5      	beq.n	8000352 <__udivmoddi4+0x9a>
 8000386:	e9c6 4700 	strd	r4, r7, [r6]
 800038a:	e7e2      	b.n	8000352 <__udivmoddi4+0x9a>
 800038c:	b902      	cbnz	r2, 8000390 <__udivmoddi4+0xd8>
 800038e:	deff      	udf	#255	; 0xff
 8000390:	fab2 f382 	clz	r3, r2
 8000394:	2b00      	cmp	r3, #0
 8000396:	f040 809f 	bne.w	80004d8 <__udivmoddi4+0x220>
 800039a:	1a8a      	subs	r2, r1, r2
 800039c:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80003a0:	fa1f f78c 	uxth.w	r7, ip
 80003a4:	2101      	movs	r1, #1
 80003a6:	fbb2 f5fe 	udiv	r5, r2, lr
 80003aa:	fb0e 2015 	mls	r0, lr, r5, r2
 80003ae:	0c22      	lsrs	r2, r4, #16
 80003b0:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003b4:	fb07 f005 	mul.w	r0, r7, r5
 80003b8:	4290      	cmp	r0, r2
 80003ba:	d90f      	bls.n	80003dc <__udivmoddi4+0x124>
 80003bc:	eb1c 0202 	adds.w	r2, ip, r2
 80003c0:	f105 38ff 	add.w	r8, r5, #4294967295
 80003c4:	bf2c      	ite	cs
 80003c6:	f04f 0901 	movcs.w	r9, #1
 80003ca:	f04f 0900 	movcc.w	r9, #0
 80003ce:	4290      	cmp	r0, r2
 80003d0:	d903      	bls.n	80003da <__udivmoddi4+0x122>
 80003d2:	f1b9 0f00 	cmp.w	r9, #0
 80003d6:	f000 80ce 	beq.w	8000576 <__udivmoddi4+0x2be>
 80003da:	4645      	mov	r5, r8
 80003dc:	1a12      	subs	r2, r2, r0
 80003de:	b2a4      	uxth	r4, r4
 80003e0:	fbb2 f0fe 	udiv	r0, r2, lr
 80003e4:	fb0e 2210 	mls	r2, lr, r0, r2
 80003e8:	fb00 f707 	mul.w	r7, r0, r7
 80003ec:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003f0:	42a7      	cmp	r7, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x14e>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f100 32ff 	add.w	r2, r0, #4294967295
 80003fc:	d202      	bcs.n	8000404 <__udivmoddi4+0x14c>
 80003fe:	42a7      	cmp	r7, r4
 8000400:	f200 80b3 	bhi.w	800056a <__udivmoddi4+0x2b2>
 8000404:	4610      	mov	r0, r2
 8000406:	1be4      	subs	r4, r4, r7
 8000408:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800040c:	e79c      	b.n	8000348 <__udivmoddi4+0x90>
 800040e:	f1c1 0420 	rsb	r4, r1, #32
 8000412:	408b      	lsls	r3, r1
 8000414:	fa05 fc01 	lsl.w	ip, r5, r1
 8000418:	fa22 f704 	lsr.w	r7, r2, r4
 800041c:	40e5      	lsrs	r5, r4
 800041e:	408a      	lsls	r2, r1
 8000420:	431f      	orrs	r7, r3
 8000422:	fa20 f304 	lsr.w	r3, r0, r4
 8000426:	4088      	lsls	r0, r1
 8000428:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800042c:	ea43 030c 	orr.w	r3, r3, ip
 8000430:	fa1f fc87 	uxth.w	ip, r7
 8000434:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000438:	fbb5 fef8 	udiv	lr, r5, r8
 800043c:	fb08 551e 	mls	r5, r8, lr, r5
 8000440:	ea49 4505 	orr.w	r5, r9, r5, lsl #16
 8000444:	fb0e f90c 	mul.w	r9, lr, ip
 8000448:	45a9      	cmp	r9, r5
 800044a:	d90e      	bls.n	800046a <__udivmoddi4+0x1b2>
 800044c:	197d      	adds	r5, r7, r5
 800044e:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000452:	bf2c      	ite	cs
 8000454:	f04f 0b01 	movcs.w	fp, #1
 8000458:	f04f 0b00 	movcc.w	fp, #0
 800045c:	45a9      	cmp	r9, r5
 800045e:	d903      	bls.n	8000468 <__udivmoddi4+0x1b0>
 8000460:	f1bb 0f00 	cmp.w	fp, #0
 8000464:	f000 808d 	beq.w	8000582 <__udivmoddi4+0x2ca>
 8000468:	46d6      	mov	lr, sl
 800046a:	eba5 0509 	sub.w	r5, r5, r9
 800046e:	fa1f f983 	uxth.w	r9, r3
 8000472:	fbb5 f3f8 	udiv	r3, r5, r8
 8000476:	fb08 5513 	mls	r5, r8, r3, r5
 800047a:	fb03 fc0c 	mul.w	ip, r3, ip
 800047e:	ea49 4505 	orr.w	r5, r9, r5, lsl #16
 8000482:	45ac      	cmp	ip, r5
 8000484:	d906      	bls.n	8000494 <__udivmoddi4+0x1dc>
 8000486:	197d      	adds	r5, r7, r5
 8000488:	f103 38ff 	add.w	r8, r3, #4294967295
 800048c:	d201      	bcs.n	8000492 <__udivmoddi4+0x1da>
 800048e:	45ac      	cmp	ip, r5
 8000490:	d87e      	bhi.n	8000590 <__udivmoddi4+0x2d8>
 8000492:	4643      	mov	r3, r8
 8000494:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
 8000498:	eba5 050c 	sub.w	r5, r5, ip
 800049c:	fba3 9802 	umull	r9, r8, r3, r2
 80004a0:	4545      	cmp	r5, r8
 80004a2:	46ce      	mov	lr, r9
 80004a4:	46c4      	mov	ip, r8
 80004a6:	d302      	bcc.n	80004ae <__udivmoddi4+0x1f6>
 80004a8:	d106      	bne.n	80004b8 <__udivmoddi4+0x200>
 80004aa:	4548      	cmp	r0, r9
 80004ac:	d204      	bcs.n	80004b8 <__udivmoddi4+0x200>
 80004ae:	3b01      	subs	r3, #1
 80004b0:	ebb9 0e02 	subs.w	lr, r9, r2
 80004b4:	eb68 0c07 	sbc.w	ip, r8, r7
 80004b8:	2e00      	cmp	r6, #0
 80004ba:	d06f      	beq.n	800059c <__udivmoddi4+0x2e4>
 80004bc:	ebb0 020e 	subs.w	r2, r0, lr
 80004c0:	eb65 050c 	sbc.w	r5, r5, ip
 80004c4:	40ca      	lsrs	r2, r1
 80004c6:	fa05 f404 	lsl.w	r4, r5, r4
 80004ca:	40cd      	lsrs	r5, r1
 80004cc:	4618      	mov	r0, r3
 80004ce:	4314      	orrs	r4, r2
 80004d0:	2100      	movs	r1, #0
 80004d2:	e9c6 4500 	strd	r4, r5, [r6]
 80004d6:	e73c      	b.n	8000352 <__udivmoddi4+0x9a>
 80004d8:	fa02 fc03 	lsl.w	ip, r2, r3
 80004dc:	f1c3 0220 	rsb	r2, r3, #32
 80004e0:	4099      	lsls	r1, r3
 80004e2:	409c      	lsls	r4, r3
 80004e4:	40d5      	lsrs	r5, r2
 80004e6:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80004ea:	fa20 f202 	lsr.w	r2, r0, r2
 80004ee:	fa1f f78c 	uxth.w	r7, ip
 80004f2:	fbb5 f0fe 	udiv	r0, r5, lr
 80004f6:	430a      	orrs	r2, r1
 80004f8:	fb0e 5510 	mls	r5, lr, r0, r5
 80004fc:	0c11      	lsrs	r1, r2, #16
 80004fe:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000502:	fb00 f507 	mul.w	r5, r0, r7
 8000506:	428d      	cmp	r5, r1
 8000508:	d90e      	bls.n	8000528 <__udivmoddi4+0x270>
 800050a:	eb1c 0101 	adds.w	r1, ip, r1
 800050e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000512:	bf2c      	ite	cs
 8000514:	f04f 0901 	movcs.w	r9, #1
 8000518:	f04f 0900 	movcc.w	r9, #0
 800051c:	428d      	cmp	r5, r1
 800051e:	d902      	bls.n	8000526 <__udivmoddi4+0x26e>
 8000520:	f1b9 0f00 	cmp.w	r9, #0
 8000524:	d031      	beq.n	800058a <__udivmoddi4+0x2d2>
 8000526:	4640      	mov	r0, r8
 8000528:	1b49      	subs	r1, r1, r5
 800052a:	b292      	uxth	r2, r2
 800052c:	fbb1 f5fe 	udiv	r5, r1, lr
 8000530:	fb0e 1115 	mls	r1, lr, r5, r1
 8000534:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000538:	fb05 f107 	mul.w	r1, r5, r7
 800053c:	4291      	cmp	r1, r2
 800053e:	d907      	bls.n	8000550 <__udivmoddi4+0x298>
 8000540:	eb1c 0202 	adds.w	r2, ip, r2
 8000544:	f105 38ff 	add.w	r8, r5, #4294967295
 8000548:	d201      	bcs.n	800054e <__udivmoddi4+0x296>
 800054a:	4291      	cmp	r1, r2
 800054c:	d823      	bhi.n	8000596 <__udivmoddi4+0x2de>
 800054e:	4645      	mov	r5, r8
 8000550:	1a52      	subs	r2, r2, r1
 8000552:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000556:	e726      	b.n	80003a6 <__udivmoddi4+0xee>
 8000558:	4631      	mov	r1, r6
 800055a:	4630      	mov	r0, r6
 800055c:	e6f9      	b.n	8000352 <__udivmoddi4+0x9a>
 800055e:	1a84      	subs	r4, r0, r2
 8000560:	eb65 0203 	sbc.w	r2, r5, r3
 8000564:	2001      	movs	r0, #1
 8000566:	4617      	mov	r7, r2
 8000568:	e70b      	b.n	8000382 <__udivmoddi4+0xca>
 800056a:	4464      	add	r4, ip
 800056c:	3802      	subs	r0, #2
 800056e:	e74a      	b.n	8000406 <__udivmoddi4+0x14e>
 8000570:	4464      	add	r4, ip
 8000572:	3802      	subs	r0, #2
 8000574:	e6e4      	b.n	8000340 <__udivmoddi4+0x88>
 8000576:	3d02      	subs	r5, #2
 8000578:	4462      	add	r2, ip
 800057a:	e72f      	b.n	80003dc <__udivmoddi4+0x124>
 800057c:	3902      	subs	r1, #2
 800057e:	4462      	add	r2, ip
 8000580:	e6c9      	b.n	8000316 <__udivmoddi4+0x5e>
 8000582:	f1ae 0e02 	sub.w	lr, lr, #2
 8000586:	443d      	add	r5, r7
 8000588:	e76f      	b.n	800046a <__udivmoddi4+0x1b2>
 800058a:	3802      	subs	r0, #2
 800058c:	4461      	add	r1, ip
 800058e:	e7cb      	b.n	8000528 <__udivmoddi4+0x270>
 8000590:	3b02      	subs	r3, #2
 8000592:	443d      	add	r5, r7
 8000594:	e77e      	b.n	8000494 <__udivmoddi4+0x1dc>
 8000596:	3d02      	subs	r5, #2
 8000598:	4462      	add	r2, ip
 800059a:	e7d9      	b.n	8000550 <__udivmoddi4+0x298>
 800059c:	4618      	mov	r0, r3
 800059e:	4631      	mov	r1, r6
 80005a0:	e6d7      	b.n	8000352 <__udivmoddi4+0x9a>
 80005a2:	bf00      	nop

080005a4 <__aeabi_idiv0>:
 80005a4:	4770      	bx	lr
 80005a6:	bf00      	nop

080005a8 <__io_putchar>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int __io_putchar(int ch) {
 80005a8:	b580      	push	{r7, lr}
 80005aa:	b082      	sub	sp, #8
 80005ac:	af00      	add	r7, sp, #0
 80005ae:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 80005b0:	1d39      	adds	r1, r7, #4
 80005b2:	f04f 33ff 	mov.w	r3, #4294967295
 80005b6:	2201      	movs	r2, #1
 80005b8:	4803      	ldr	r0, [pc, #12]	; (80005c8 <__io_putchar+0x20>)
 80005ba:	f006 ff7b 	bl	80074b4 <HAL_UART_Transmit>
    return ch;
 80005be:	687b      	ldr	r3, [r7, #4]
}
 80005c0:	4618      	mov	r0, r3
 80005c2:	3708      	adds	r7, #8
 80005c4:	46bd      	mov	sp, r7
 80005c6:	bd80      	pop	{r7, pc}
 80005c8:	20000110 	.word	0x20000110

080005cc <HAL_UART_RxCpltCallback>:
//        HAL_UART_Receive_IT(&huart3, rx_buffer, 1);
//    }
//}

// Callback for UART reception complete
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 80005cc:	b580      	push	{r7, lr}
 80005ce:	b082      	sub	sp, #8
 80005d0:	af00      	add	r7, sp, #0
 80005d2:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART3) {
 80005d4:	687b      	ldr	r3, [r7, #4]
 80005d6:	681b      	ldr	r3, [r3, #0]
 80005d8:	4a1f      	ldr	r2, [pc, #124]	; (8000658 <HAL_UART_RxCpltCallback+0x8c>)
 80005da:	4293      	cmp	r3, r2
 80005dc:	d137      	bne.n	800064e <HAL_UART_RxCpltCallback+0x82>
        // Accumulate received character
        rx_accumulated[rx_index++] = rx_buffer[0];
 80005de:	4b1f      	ldr	r3, [pc, #124]	; (800065c <HAL_UART_RxCpltCallback+0x90>)
 80005e0:	881b      	ldrh	r3, [r3, #0]
 80005e2:	b29b      	uxth	r3, r3
 80005e4:	1c5a      	adds	r2, r3, #1
 80005e6:	b291      	uxth	r1, r2
 80005e8:	4a1c      	ldr	r2, [pc, #112]	; (800065c <HAL_UART_RxCpltCallback+0x90>)
 80005ea:	8011      	strh	r1, [r2, #0]
 80005ec:	461a      	mov	r2, r3
 80005ee:	4b1c      	ldr	r3, [pc, #112]	; (8000660 <HAL_UART_RxCpltCallback+0x94>)
 80005f0:	7819      	ldrb	r1, [r3, #0]
 80005f2:	4b1c      	ldr	r3, [pc, #112]	; (8000664 <HAL_UART_RxCpltCallback+0x98>)
 80005f4:	5499      	strb	r1, [r3, r2]
        HAL_UART_Transmit(&huart1, &rx_buffer[0], 1, HAL_MAX_DELAY);
 80005f6:	f04f 33ff 	mov.w	r3, #4294967295
 80005fa:	2201      	movs	r2, #1
 80005fc:	4918      	ldr	r1, [pc, #96]	; (8000660 <HAL_UART_RxCpltCallback+0x94>)
 80005fe:	481a      	ldr	r0, [pc, #104]	; (8000668 <HAL_UART_RxCpltCallback+0x9c>)
 8000600:	f006 ff58 	bl	80074b4 <HAL_UART_Transmit>

        // Check for line termination
        if (rx_buffer[0] == '\n' || rx_index >= RX_BUFFER_SIZE - 1) {
 8000604:	4b16      	ldr	r3, [pc, #88]	; (8000660 <HAL_UART_RxCpltCallback+0x94>)
 8000606:	781b      	ldrb	r3, [r3, #0]
 8000608:	2b0a      	cmp	r3, #10
 800060a:	d004      	beq.n	8000616 <HAL_UART_RxCpltCallback+0x4a>
 800060c:	4b13      	ldr	r3, [pc, #76]	; (800065c <HAL_UART_RxCpltCallback+0x90>)
 800060e:	881b      	ldrh	r3, [r3, #0]
 8000610:	b29b      	uxth	r3, r3
 8000612:	2bfe      	cmp	r3, #254	; 0xfe
 8000614:	d916      	bls.n	8000644 <HAL_UART_RxCpltCallback+0x78>
            rx_accumulated[rx_index] = '\0'; // Null-terminate the string
 8000616:	4b11      	ldr	r3, [pc, #68]	; (800065c <HAL_UART_RxCpltCallback+0x90>)
 8000618:	881b      	ldrh	r3, [r3, #0]
 800061a:	b29b      	uxth	r3, r3
 800061c:	461a      	mov	r2, r3
 800061e:	4b11      	ldr	r3, [pc, #68]	; (8000664 <HAL_UART_RxCpltCallback+0x98>)
 8000620:	2100      	movs	r1, #0
 8000622:	5499      	strb	r1, [r3, r2]
            rx_index = 0; // Reset the index
 8000624:	4b0d      	ldr	r3, [pc, #52]	; (800065c <HAL_UART_RxCpltCallback+0x90>)
 8000626:	2200      	movs	r2, #0
 8000628:	801a      	strh	r2, [r3, #0]

            // Check for "+JOIN: Done" in the received data
            if (strstr(rx_accumulated, "+JOIN: Network joined") != NULL) {
 800062a:	4910      	ldr	r1, [pc, #64]	; (800066c <HAL_UART_RxCpltCallback+0xa0>)
 800062c:	480d      	ldr	r0, [pc, #52]	; (8000664 <HAL_UART_RxCpltCallback+0x98>)
 800062e:	f009 f94b 	bl	80098c8 <strstr>
 8000632:	4603      	mov	r3, r0
 8000634:	2b00      	cmp	r3, #0
 8000636:	d005      	beq.n	8000644 <HAL_UART_RxCpltCallback+0x78>
                connectedToTTN = true;
 8000638:	4b0d      	ldr	r3, [pc, #52]	; (8000670 <HAL_UART_RxCpltCallback+0xa4>)
 800063a:	2201      	movs	r2, #1
 800063c:	701a      	strb	r2, [r3, #0]
                printf("Connected to TTN!\r\n");
 800063e:	480d      	ldr	r0, [pc, #52]	; (8000674 <HAL_UART_RxCpltCallback+0xa8>)
 8000640:	f009 f85a 	bl	80096f8 <puts>
            }
        }

        // Restart reception for the next character
        HAL_UART_Receive_IT(&huart3, rx_buffer, 1);
 8000644:	2201      	movs	r2, #1
 8000646:	4906      	ldr	r1, [pc, #24]	; (8000660 <HAL_UART_RxCpltCallback+0x94>)
 8000648:	480b      	ldr	r0, [pc, #44]	; (8000678 <HAL_UART_RxCpltCallback+0xac>)
 800064a:	f006 ffc1 	bl	80075d0 <HAL_UART_Receive_IT>
    }
}
 800064e:	bf00      	nop
 8000650:	3708      	adds	r7, #8
 8000652:	46bd      	mov	sp, r7
 8000654:	bd80      	pop	{r7, pc}
 8000656:	bf00      	nop
 8000658:	40004800 	.word	0x40004800
 800065c:	200006c8 	.word	0x200006c8
 8000660:	200005c4 	.word	0x200005c4
 8000664:	200005c8 	.word	0x200005c8
 8000668:	20000110 	.word	0x20000110
 800066c:	08009e64 	.word	0x08009e64
 8000670:	200005c0 	.word	0x200005c0
 8000674:	08009e7c 	.word	0x08009e7c
 8000678:	200001a4 	.word	0x200001a4

0800067c <connectToTTN>:

// LoRa configuration via USART3
void connectToTTN(void) {
 800067c:	b5b0      	push	{r4, r5, r7, lr}
 800067e:	b08a      	sub	sp, #40	; 0x28
 8000680:	af00      	add	r7, sp, #0
    printf("Starting LoRa setup...\r\n");
 8000682:	4826      	ldr	r0, [pc, #152]	; (800071c <connectToTTN+0xa0>)
 8000684:	f009 f838 	bl	80096f8 <puts>

    char *commands[] = {
 8000688:	4b25      	ldr	r3, [pc, #148]	; (8000720 <connectToTTN+0xa4>)
 800068a:	463c      	mov	r4, r7
 800068c:	461d      	mov	r5, r3
 800068e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000690:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000692:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000694:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000696:	682b      	ldr	r3, [r5, #0]
 8000698:	6023      	str	r3, [r4, #0]
        "AT+ID\r\n",
		"AT+POWER?\r\n",
        "AT+JOIN\r\n"
    };

    for (int i = 0; i < sizeof(commands) / sizeof(commands[0]); i++) {
 800069a:	2300      	movs	r3, #0
 800069c:	627b      	str	r3, [r7, #36]	; 0x24
 800069e:	e034      	b.n	800070a <connectToTTN+0x8e>
    	HAL_UART_Transmit(&huart1, (uint8_t *)commands[i], strlen(commands[i]), HAL_MAX_DELAY);
 80006a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006a2:	009b      	lsls	r3, r3, #2
 80006a4:	3328      	adds	r3, #40	; 0x28
 80006a6:	443b      	add	r3, r7
 80006a8:	f853 4c28 	ldr.w	r4, [r3, #-40]
 80006ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006ae:	009b      	lsls	r3, r3, #2
 80006b0:	3328      	adds	r3, #40	; 0x28
 80006b2:	443b      	add	r3, r7
 80006b4:	f853 3c28 	ldr.w	r3, [r3, #-40]
 80006b8:	4618      	mov	r0, r3
 80006ba:	f7ff fddd 	bl	8000278 <strlen>
 80006be:	4603      	mov	r3, r0
 80006c0:	b29a      	uxth	r2, r3
 80006c2:	f04f 33ff 	mov.w	r3, #4294967295
 80006c6:	4621      	mov	r1, r4
 80006c8:	4816      	ldr	r0, [pc, #88]	; (8000724 <connectToTTN+0xa8>)
 80006ca:	f006 fef3 	bl	80074b4 <HAL_UART_Transmit>
        HAL_UART_Transmit(&huart3, (uint8_t *)commands[i], strlen(commands[i]), HAL_MAX_DELAY);
 80006ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006d0:	009b      	lsls	r3, r3, #2
 80006d2:	3328      	adds	r3, #40	; 0x28
 80006d4:	443b      	add	r3, r7
 80006d6:	f853 4c28 	ldr.w	r4, [r3, #-40]
 80006da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006dc:	009b      	lsls	r3, r3, #2
 80006de:	3328      	adds	r3, #40	; 0x28
 80006e0:	443b      	add	r3, r7
 80006e2:	f853 3c28 	ldr.w	r3, [r3, #-40]
 80006e6:	4618      	mov	r0, r3
 80006e8:	f7ff fdc6 	bl	8000278 <strlen>
 80006ec:	4603      	mov	r3, r0
 80006ee:	b29a      	uxth	r2, r3
 80006f0:	f04f 33ff 	mov.w	r3, #4294967295
 80006f4:	4621      	mov	r1, r4
 80006f6:	480c      	ldr	r0, [pc, #48]	; (8000728 <connectToTTN+0xac>)
 80006f8:	f006 fedc 	bl	80074b4 <HAL_UART_Transmit>
        HAL_Delay(1000);
 80006fc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000700:	f000 fe4a 	bl	8001398 <HAL_Delay>
    for (int i = 0; i < sizeof(commands) / sizeof(commands[0]); i++) {
 8000704:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000706:	3301      	adds	r3, #1
 8000708:	627b      	str	r3, [r7, #36]	; 0x24
 800070a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800070c:	2b08      	cmp	r3, #8
 800070e:	d9c7      	bls.n	80006a0 <connectToTTN+0x24>
    }
}
 8000710:	bf00      	nop
 8000712:	bf00      	nop
 8000714:	3728      	adds	r7, #40	; 0x28
 8000716:	46bd      	mov	sp, r7
 8000718:	bdb0      	pop	{r4, r5, r7, pc}
 800071a:	bf00      	nop
 800071c:	08009e90 	.word	0x08009e90
 8000720:	08009f50 	.word	0x08009f50
 8000724:	20000110 	.word	0x20000110
 8000728:	200001a4 	.word	0x200001a4

0800072c <sendMessage>:

void sendMessage(const char* message)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	b082      	sub	sp, #8
 8000730:	af00      	add	r7, sp, #0
 8000732:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t *)message, strlen(message), HAL_MAX_DELAY);
 8000734:	6878      	ldr	r0, [r7, #4]
 8000736:	f7ff fd9f 	bl	8000278 <strlen>
 800073a:	4603      	mov	r3, r0
 800073c:	b29a      	uxth	r2, r3
 800073e:	f04f 33ff 	mov.w	r3, #4294967295
 8000742:	6879      	ldr	r1, [r7, #4]
 8000744:	4808      	ldr	r0, [pc, #32]	; (8000768 <sendMessage+0x3c>)
 8000746:	f006 feb5 	bl	80074b4 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart3, (uint8_t *)message, strlen(message), HAL_MAX_DELAY);
 800074a:	6878      	ldr	r0, [r7, #4]
 800074c:	f7ff fd94 	bl	8000278 <strlen>
 8000750:	4603      	mov	r3, r0
 8000752:	b29a      	uxth	r2, r3
 8000754:	f04f 33ff 	mov.w	r3, #4294967295
 8000758:	6879      	ldr	r1, [r7, #4]
 800075a:	4804      	ldr	r0, [pc, #16]	; (800076c <sendMessage+0x40>)
 800075c:	f006 feaa 	bl	80074b4 <HAL_UART_Transmit>
}
 8000760:	bf00      	nop
 8000762:	3708      	adds	r7, #8
 8000764:	46bd      	mov	sp, r7
 8000766:	bd80      	pop	{r7, pc}
 8000768:	20000110 	.word	0x20000110
 800076c:	200001a4 	.word	0x200001a4

08000770 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000774:	f000 fd8c 	bl	8001290 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000778:	f000 f838 	bl	80007ec <SystemClock_Config>

  /* Configure the System Power */
  SystemPower_Config();
 800077c:	f000 f888 	bl	8000890 <SystemPower_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000780:	f000 f9e2 	bl	8000b48 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000784:	f000 f890 	bl	80008a8 <MX_ADC1_Init>
  MX_ICACHE_Init();
 8000788:	f000 f8fe 	bl	8000988 <MX_ICACHE_Init>
  MX_USART1_UART_Init();
 800078c:	f000 f916 	bl	80009bc <MX_USART1_UART_Init>
  MX_USB_DRD_FS_HCD_Init();
 8000790:	f000 f9ac 	bl	8000aec <MX_USB_DRD_FS_HCD_Init>
  MX_MEMORYMAP_Init();
 8000794:	f000 f90b 	bl	80009ae <MX_MEMORYMAP_Init>
  MX_USART3_UART_Init();
 8000798:	f000 f95c 	bl	8000a54 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */

  // Start USART3 in interrupt mode
  HAL_UART_Receive_IT(&huart3, rx_buffer, 1);
 800079c:	2201      	movs	r2, #1
 800079e:	490f      	ldr	r1, [pc, #60]	; (80007dc <main+0x6c>)
 80007a0:	480f      	ldr	r0, [pc, #60]	; (80007e0 <main+0x70>)
 80007a2:	f006 ff15 	bl	80075d0 <HAL_UART_Receive_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  while (!connectedToTTN)
 80007a6:	e005      	b.n	80007b4 <main+0x44>
	  {
		  connectToTTN();
 80007a8:	f7ff ff68 	bl	800067c <connectToTTN>
		  HAL_Delay(10000);
 80007ac:	f242 7010 	movw	r0, #10000	; 0x2710
 80007b0:	f000 fdf2 	bl	8001398 <HAL_Delay>
	  while (!connectedToTTN)
 80007b4:	4b0b      	ldr	r3, [pc, #44]	; (80007e4 <main+0x74>)
 80007b6:	781b      	ldrb	r3, [r3, #0]
 80007b8:	f083 0301 	eor.w	r3, r3, #1
 80007bc:	b2db      	uxtb	r3, r3
 80007be:	2b00      	cmp	r3, #0
 80007c0:	d1f2      	bne.n	80007a8 <main+0x38>
	  }

	  HAL_Delay(1000);
 80007c2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80007c6:	f000 fde7 	bl	8001398 <HAL_Delay>

	  sendMessage("AT+MSG=Hello_TTN\r\n");
 80007ca:	4807      	ldr	r0, [pc, #28]	; (80007e8 <main+0x78>)
 80007cc:	f7ff ffae 	bl	800072c <sendMessage>


	  HAL_Delay(10000);
 80007d0:	f242 7010 	movw	r0, #10000	; 0x2710
 80007d4:	f000 fde0 	bl	8001398 <HAL_Delay>
	  while (!connectedToTTN)
 80007d8:	e7ec      	b.n	80007b4 <main+0x44>
 80007da:	bf00      	nop
 80007dc:	200005c4 	.word	0x200005c4
 80007e0:	200001a4 	.word	0x200001a4
 80007e4:	200005c0 	.word	0x200005c0
 80007e8:	08009f74 	.word	0x08009f74

080007ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	b09e      	sub	sp, #120	; 0x78
 80007f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007f2:	f107 0318 	add.w	r3, r7, #24
 80007f6:	2260      	movs	r2, #96	; 0x60
 80007f8:	2100      	movs	r1, #0
 80007fa:	4618      	mov	r0, r3
 80007fc:	f009 f85c 	bl	80098b8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000800:	463b      	mov	r3, r7
 8000802:	2200      	movs	r2, #0
 8000804:	601a      	str	r2, [r3, #0]
 8000806:	605a      	str	r2, [r3, #4]
 8000808:	609a      	str	r2, [r3, #8]
 800080a:	60da      	str	r2, [r3, #12]
 800080c:	611a      	str	r2, [r3, #16]
 800080e:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE3) != HAL_OK)
 8000810:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8000814:	f002 fe98 	bl	8003548 <HAL_PWREx_ControlVoltageScaling>
 8000818:	4603      	mov	r3, r0
 800081a:	2b00      	cmp	r3, #0
 800081c:	d001      	beq.n	8000822 <SystemClock_Config+0x36>
  {
    Error_Handler();
 800081e:	f000 f9f7 	bl	8000c10 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI
 8000822:	2332      	movs	r3, #50	; 0x32
 8000824:	61bb      	str	r3, [r7, #24]
                              |RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000826:	f44f 7380 	mov.w	r3, #256	; 0x100
 800082a:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 800082c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000830:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000832:	2310      	movs	r3, #16
 8000834:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000836:	2301      	movs	r3, #1
 8000838:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 800083a:	2310      	movs	r3, #16
 800083c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_4;
 800083e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000842:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000844:	2300      	movs	r3, #0
 8000846:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000848:	f107 0318 	add.w	r3, r7, #24
 800084c:	4618      	mov	r0, r3
 800084e:	f002 ff77 	bl	8003740 <HAL_RCC_OscConfig>
 8000852:	4603      	mov	r3, r0
 8000854:	2b00      	cmp	r3, #0
 8000856:	d001      	beq.n	800085c <SystemClock_Config+0x70>
  {
    Error_Handler();
 8000858:	f000 f9da 	bl	8000c10 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800085c:	231f      	movs	r3, #31
 800085e:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000860:	2300      	movs	r3, #0
 8000862:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000864:	2300      	movs	r3, #0
 8000866:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000868:	2300      	movs	r3, #0
 800086a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800086c:	2300      	movs	r3, #0
 800086e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 8000870:	2300      	movs	r3, #0
 8000872:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000874:	463b      	mov	r3, r7
 8000876:	2100      	movs	r1, #0
 8000878:	4618      	mov	r0, r3
 800087a:	f003 fe3d 	bl	80044f8 <HAL_RCC_ClockConfig>
 800087e:	4603      	mov	r3, r0
 8000880:	2b00      	cmp	r3, #0
 8000882:	d001      	beq.n	8000888 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000884:	f000 f9c4 	bl	8000c10 <Error_Handler>
  }
}
 8000888:	bf00      	nop
 800088a:	3778      	adds	r7, #120	; 0x78
 800088c:	46bd      	mov	sp, r7
 800088e:	bd80      	pop	{r7, pc}

08000890 <SystemPower_Config>:
/**
  * @brief Power Configuration
  * @retval None
  */
static void SystemPower_Config(void)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	af00      	add	r7, sp, #0

  /*
   * Switch to SMPS regulator instead of LDO
   */
  if (HAL_PWREx_ConfigSupply(PWR_SMPS_SUPPLY) != HAL_OK)
 8000894:	2002      	movs	r0, #2
 8000896:	f002 fee3 	bl	8003660 <HAL_PWREx_ConfigSupply>
 800089a:	4603      	mov	r3, r0
 800089c:	2b00      	cmp	r3, #0
 800089e:	d001      	beq.n	80008a4 <SystemPower_Config+0x14>
  {
    Error_Handler();
 80008a0:	f000 f9b6 	bl	8000c10 <Error_Handler>
  }
/* USER CODE BEGIN PWR */
/* USER CODE END PWR */
}
 80008a4:	bf00      	nop
 80008a6:	bd80      	pop	{r7, pc}

080008a8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	b088      	sub	sp, #32
 80008ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80008ae:	463b      	mov	r3, r7
 80008b0:	2220      	movs	r2, #32
 80008b2:	2100      	movs	r1, #0
 80008b4:	4618      	mov	r0, r3
 80008b6:	f008 ffff 	bl	80098b8 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80008ba:	4b30      	ldr	r3, [pc, #192]	; (800097c <MX_ADC1_Init+0xd4>)
 80008bc:	4a30      	ldr	r2, [pc, #192]	; (8000980 <MX_ADC1_Init+0xd8>)
 80008be:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80008c0:	4b2e      	ldr	r3, [pc, #184]	; (800097c <MX_ADC1_Init+0xd4>)
 80008c2:	2200      	movs	r2, #0
 80008c4:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_14B;
 80008c6:	4b2d      	ldr	r3, [pc, #180]	; (800097c <MX_ADC1_Init+0xd4>)
 80008c8:	2200      	movs	r2, #0
 80008ca:	609a      	str	r2, [r3, #8]
  hadc1.Init.GainCompensation = 0;
 80008cc:	4b2b      	ldr	r3, [pc, #172]	; (800097c <MX_ADC1_Init+0xd4>)
 80008ce:	2200      	movs	r2, #0
 80008d0:	60da      	str	r2, [r3, #12]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80008d2:	4b2a      	ldr	r3, [pc, #168]	; (800097c <MX_ADC1_Init+0xd4>)
 80008d4:	2200      	movs	r2, #0
 80008d6:	615a      	str	r2, [r3, #20]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80008d8:	4b28      	ldr	r3, [pc, #160]	; (800097c <MX_ADC1_Init+0xd4>)
 80008da:	2200      	movs	r2, #0
 80008dc:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80008de:	4b27      	ldr	r3, [pc, #156]	; (800097c <MX_ADC1_Init+0xd4>)
 80008e0:	2204      	movs	r2, #4
 80008e2:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80008e4:	4b25      	ldr	r3, [pc, #148]	; (800097c <MX_ADC1_Init+0xd4>)
 80008e6:	2200      	movs	r2, #0
 80008e8:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80008ea:	4b24      	ldr	r3, [pc, #144]	; (800097c <MX_ADC1_Init+0xd4>)
 80008ec:	2200      	movs	r2, #0
 80008ee:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.NbrOfConversion = 1;
 80008f2:	4b22      	ldr	r3, [pc, #136]	; (800097c <MX_ADC1_Init+0xd4>)
 80008f4:	2201      	movs	r2, #1
 80008f6:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80008f8:	4b20      	ldr	r3, [pc, #128]	; (800097c <MX_ADC1_Init+0xd4>)
 80008fa:	2200      	movs	r2, #0
 80008fc:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000900:	4b1e      	ldr	r3, [pc, #120]	; (800097c <MX_ADC1_Init+0xd4>)
 8000902:	2200      	movs	r2, #0
 8000904:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000906:	4b1d      	ldr	r3, [pc, #116]	; (800097c <MX_ADC1_Init+0xd4>)
 8000908:	2200      	movs	r2, #0
 800090a:	639a      	str	r2, [r3, #56]	; 0x38
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800090c:	4b1b      	ldr	r3, [pc, #108]	; (800097c <MX_ADC1_Init+0xd4>)
 800090e:	2200      	movs	r2, #0
 8000910:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8000914:	4b19      	ldr	r3, [pc, #100]	; (800097c <MX_ADC1_Init+0xd4>)
 8000916:	2200      	movs	r2, #0
 8000918:	669a      	str	r2, [r3, #104]	; 0x68
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800091a:	4b18      	ldr	r3, [pc, #96]	; (800097c <MX_ADC1_Init+0xd4>)
 800091c:	2200      	movs	r2, #0
 800091e:	645a      	str	r2, [r3, #68]	; 0x44
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000920:	4b16      	ldr	r3, [pc, #88]	; (800097c <MX_ADC1_Init+0xd4>)
 8000922:	2200      	movs	r2, #0
 8000924:	651a      	str	r2, [r3, #80]	; 0x50
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000926:	4b15      	ldr	r3, [pc, #84]	; (800097c <MX_ADC1_Init+0xd4>)
 8000928:	2200      	movs	r2, #0
 800092a:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 800092c:	4b13      	ldr	r3, [pc, #76]	; (800097c <MX_ADC1_Init+0xd4>)
 800092e:	2200      	movs	r2, #0
 8000930:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000934:	4811      	ldr	r0, [pc, #68]	; (800097c <MX_ADC1_Init+0xd4>)
 8000936:	f001 f83b 	bl	80019b0 <HAL_ADC_Init>
 800093a:	4603      	mov	r3, r0
 800093c:	2b00      	cmp	r3, #0
 800093e:	d001      	beq.n	8000944 <MX_ADC1_Init+0x9c>
  {
    Error_Handler();
 8000940:	f000 f966 	bl	8000c10 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000944:	4b0f      	ldr	r3, [pc, #60]	; (8000984 <MX_ADC1_Init+0xdc>)
 8000946:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000948:	2306      	movs	r3, #6
 800094a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_5CYCLE;
 800094c:	2300      	movs	r3, #0
 800094e:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000950:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000954:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000956:	2304      	movs	r3, #4
 8000958:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800095a:	2300      	movs	r3, #0
 800095c:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800095e:	463b      	mov	r3, r7
 8000960:	4619      	mov	r1, r3
 8000962:	4806      	ldr	r0, [pc, #24]	; (800097c <MX_ADC1_Init+0xd4>)
 8000964:	f001 faee 	bl	8001f44 <HAL_ADC_ConfigChannel>
 8000968:	4603      	mov	r3, r0
 800096a:	2b00      	cmp	r3, #0
 800096c:	d001      	beq.n	8000972 <MX_ADC1_Init+0xca>
  {
    Error_Handler();
 800096e:	f000 f94f 	bl	8000c10 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000972:	bf00      	nop
 8000974:	3720      	adds	r7, #32
 8000976:	46bd      	mov	sp, r7
 8000978:	bd80      	pop	{r7, pc}
 800097a:	bf00      	nop
 800097c:	20000084 	.word	0x20000084
 8000980:	42028000 	.word	0x42028000
 8000984:	0c000008 	.word	0x0c000008

08000988 <MX_ICACHE_Init>:
  * @brief ICACHE Initialization Function
  * @param None
  * @retval None
  */
static void MX_ICACHE_Init(void)
{
 8000988:	b580      	push	{r7, lr}
 800098a:	af00      	add	r7, sp, #0

  /* USER CODE END ICACHE_Init 1 */

  /** Enable instruction cache in 1-way (direct mapped cache)
  */
  if (HAL_ICACHE_ConfigAssociativityMode(ICACHE_1WAY) != HAL_OK)
 800098c:	2000      	movs	r0, #0
 800098e:	f002 fdab 	bl	80034e8 <HAL_ICACHE_ConfigAssociativityMode>
 8000992:	4603      	mov	r3, r0
 8000994:	2b00      	cmp	r3, #0
 8000996:	d001      	beq.n	800099c <MX_ICACHE_Init+0x14>
  {
    Error_Handler();
 8000998:	f000 f93a 	bl	8000c10 <Error_Handler>
  }
  if (HAL_ICACHE_Enable() != HAL_OK)
 800099c:	f002 fdc4 	bl	8003528 <HAL_ICACHE_Enable>
 80009a0:	4603      	mov	r3, r0
 80009a2:	2b00      	cmp	r3, #0
 80009a4:	d001      	beq.n	80009aa <MX_ICACHE_Init+0x22>
  {
    Error_Handler();
 80009a6:	f000 f933 	bl	8000c10 <Error_Handler>
  }
  /* USER CODE BEGIN ICACHE_Init 2 */

  /* USER CODE END ICACHE_Init 2 */

}
 80009aa:	bf00      	nop
 80009ac:	bd80      	pop	{r7, pc}

080009ae <MX_MEMORYMAP_Init>:
  * @brief MEMORYMAP Initialization Function
  * @param None
  * @retval None
  */
static void MX_MEMORYMAP_Init(void)
{
 80009ae:	b480      	push	{r7}
 80009b0:	af00      	add	r7, sp, #0
  /* USER CODE END MEMORYMAP_Init 1 */
  /* USER CODE BEGIN MEMORYMAP_Init 2 */

  /* USER CODE END MEMORYMAP_Init 2 */

}
 80009b2:	bf00      	nop
 80009b4:	46bd      	mov	sp, r7
 80009b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ba:	4770      	bx	lr

080009bc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80009c0:	4b22      	ldr	r3, [pc, #136]	; (8000a4c <MX_USART1_UART_Init+0x90>)
 80009c2:	4a23      	ldr	r2, [pc, #140]	; (8000a50 <MX_USART1_UART_Init+0x94>)
 80009c4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80009c6:	4b21      	ldr	r3, [pc, #132]	; (8000a4c <MX_USART1_UART_Init+0x90>)
 80009c8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80009cc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80009ce:	4b1f      	ldr	r3, [pc, #124]	; (8000a4c <MX_USART1_UART_Init+0x90>)
 80009d0:	2200      	movs	r2, #0
 80009d2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80009d4:	4b1d      	ldr	r3, [pc, #116]	; (8000a4c <MX_USART1_UART_Init+0x90>)
 80009d6:	2200      	movs	r2, #0
 80009d8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80009da:	4b1c      	ldr	r3, [pc, #112]	; (8000a4c <MX_USART1_UART_Init+0x90>)
 80009dc:	2200      	movs	r2, #0
 80009de:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80009e0:	4b1a      	ldr	r3, [pc, #104]	; (8000a4c <MX_USART1_UART_Init+0x90>)
 80009e2:	220c      	movs	r2, #12
 80009e4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009e6:	4b19      	ldr	r3, [pc, #100]	; (8000a4c <MX_USART1_UART_Init+0x90>)
 80009e8:	2200      	movs	r2, #0
 80009ea:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80009ec:	4b17      	ldr	r3, [pc, #92]	; (8000a4c <MX_USART1_UART_Init+0x90>)
 80009ee:	2200      	movs	r2, #0
 80009f0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80009f2:	4b16      	ldr	r3, [pc, #88]	; (8000a4c <MX_USART1_UART_Init+0x90>)
 80009f4:	2200      	movs	r2, #0
 80009f6:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80009f8:	4b14      	ldr	r3, [pc, #80]	; (8000a4c <MX_USART1_UART_Init+0x90>)
 80009fa:	2200      	movs	r2, #0
 80009fc:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80009fe:	4b13      	ldr	r3, [pc, #76]	; (8000a4c <MX_USART1_UART_Init+0x90>)
 8000a00:	2200      	movs	r2, #0
 8000a02:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000a04:	4811      	ldr	r0, [pc, #68]	; (8000a4c <MX_USART1_UART_Init+0x90>)
 8000a06:	f006 fd05 	bl	8007414 <HAL_UART_Init>
 8000a0a:	4603      	mov	r3, r0
 8000a0c:	2b00      	cmp	r3, #0
 8000a0e:	d001      	beq.n	8000a14 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000a10:	f000 f8fe 	bl	8000c10 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a14:	2100      	movs	r1, #0
 8000a16:	480d      	ldr	r0, [pc, #52]	; (8000a4c <MX_USART1_UART_Init+0x90>)
 8000a18:	f008 fbf3 	bl	8009202 <HAL_UARTEx_SetTxFifoThreshold>
 8000a1c:	4603      	mov	r3, r0
 8000a1e:	2b00      	cmp	r3, #0
 8000a20:	d001      	beq.n	8000a26 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000a22:	f000 f8f5 	bl	8000c10 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a26:	2100      	movs	r1, #0
 8000a28:	4808      	ldr	r0, [pc, #32]	; (8000a4c <MX_USART1_UART_Init+0x90>)
 8000a2a:	f008 fc28 	bl	800927e <HAL_UARTEx_SetRxFifoThreshold>
 8000a2e:	4603      	mov	r3, r0
 8000a30:	2b00      	cmp	r3, #0
 8000a32:	d001      	beq.n	8000a38 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000a34:	f000 f8ec 	bl	8000c10 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000a38:	4804      	ldr	r0, [pc, #16]	; (8000a4c <MX_USART1_UART_Init+0x90>)
 8000a3a:	f008 fba9 	bl	8009190 <HAL_UARTEx_DisableFifoMode>
 8000a3e:	4603      	mov	r3, r0
 8000a40:	2b00      	cmp	r3, #0
 8000a42:	d001      	beq.n	8000a48 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000a44:	f000 f8e4 	bl	8000c10 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000a48:	bf00      	nop
 8000a4a:	bd80      	pop	{r7, pc}
 8000a4c:	20000110 	.word	0x20000110
 8000a50:	40013800 	.word	0x40013800

08000a54 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000a58:	4b22      	ldr	r3, [pc, #136]	; (8000ae4 <MX_USART3_UART_Init+0x90>)
 8000a5a:	4a23      	ldr	r2, [pc, #140]	; (8000ae8 <MX_USART3_UART_Init+0x94>)
 8000a5c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8000a5e:	4b21      	ldr	r3, [pc, #132]	; (8000ae4 <MX_USART3_UART_Init+0x90>)
 8000a60:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000a64:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000a66:	4b1f      	ldr	r3, [pc, #124]	; (8000ae4 <MX_USART3_UART_Init+0x90>)
 8000a68:	2200      	movs	r2, #0
 8000a6a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000a6c:	4b1d      	ldr	r3, [pc, #116]	; (8000ae4 <MX_USART3_UART_Init+0x90>)
 8000a6e:	2200      	movs	r2, #0
 8000a70:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000a72:	4b1c      	ldr	r3, [pc, #112]	; (8000ae4 <MX_USART3_UART_Init+0x90>)
 8000a74:	2200      	movs	r2, #0
 8000a76:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000a78:	4b1a      	ldr	r3, [pc, #104]	; (8000ae4 <MX_USART3_UART_Init+0x90>)
 8000a7a:	220c      	movs	r2, #12
 8000a7c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a7e:	4b19      	ldr	r3, [pc, #100]	; (8000ae4 <MX_USART3_UART_Init+0x90>)
 8000a80:	2200      	movs	r2, #0
 8000a82:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a84:	4b17      	ldr	r3, [pc, #92]	; (8000ae4 <MX_USART3_UART_Init+0x90>)
 8000a86:	2200      	movs	r2, #0
 8000a88:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a8a:	4b16      	ldr	r3, [pc, #88]	; (8000ae4 <MX_USART3_UART_Init+0x90>)
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000a90:	4b14      	ldr	r3, [pc, #80]	; (8000ae4 <MX_USART3_UART_Init+0x90>)
 8000a92:	2200      	movs	r2, #0
 8000a94:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a96:	4b13      	ldr	r3, [pc, #76]	; (8000ae4 <MX_USART3_UART_Init+0x90>)
 8000a98:	2200      	movs	r2, #0
 8000a9a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000a9c:	4811      	ldr	r0, [pc, #68]	; (8000ae4 <MX_USART3_UART_Init+0x90>)
 8000a9e:	f006 fcb9 	bl	8007414 <HAL_UART_Init>
 8000aa2:	4603      	mov	r3, r0
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	d001      	beq.n	8000aac <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000aa8:	f000 f8b2 	bl	8000c10 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000aac:	2100      	movs	r1, #0
 8000aae:	480d      	ldr	r0, [pc, #52]	; (8000ae4 <MX_USART3_UART_Init+0x90>)
 8000ab0:	f008 fba7 	bl	8009202 <HAL_UARTEx_SetTxFifoThreshold>
 8000ab4:	4603      	mov	r3, r0
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	d001      	beq.n	8000abe <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000aba:	f000 f8a9 	bl	8000c10 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000abe:	2100      	movs	r1, #0
 8000ac0:	4808      	ldr	r0, [pc, #32]	; (8000ae4 <MX_USART3_UART_Init+0x90>)
 8000ac2:	f008 fbdc 	bl	800927e <HAL_UARTEx_SetRxFifoThreshold>
 8000ac6:	4603      	mov	r3, r0
 8000ac8:	2b00      	cmp	r3, #0
 8000aca:	d001      	beq.n	8000ad0 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000acc:	f000 f8a0 	bl	8000c10 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000ad0:	4804      	ldr	r0, [pc, #16]	; (8000ae4 <MX_USART3_UART_Init+0x90>)
 8000ad2:	f008 fb5d 	bl	8009190 <HAL_UARTEx_DisableFifoMode>
 8000ad6:	4603      	mov	r3, r0
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	d001      	beq.n	8000ae0 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000adc:	f000 f898 	bl	8000c10 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000ae0:	bf00      	nop
 8000ae2:	bd80      	pop	{r7, pc}
 8000ae4:	200001a4 	.word	0x200001a4
 8000ae8:	40004800 	.word	0x40004800

08000aec <MX_USB_DRD_FS_HCD_Init>:
  * @brief USB_DRD_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_DRD_FS_HCD_Init(void)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	af00      	add	r7, sp, #0
  /* USER CODE END USB_DRD_FS_Init 0 */

  /* USER CODE BEGIN USB_DRD_FS_Init 1 */

  /* USER CODE END USB_DRD_FS_Init 1 */
  hhcd_USB_DRD_FS.Instance = USB_DRD_FS;
 8000af0:	4b13      	ldr	r3, [pc, #76]	; (8000b40 <MX_USB_DRD_FS_HCD_Init+0x54>)
 8000af2:	4a14      	ldr	r2, [pc, #80]	; (8000b44 <MX_USB_DRD_FS_HCD_Init+0x58>)
 8000af4:	601a      	str	r2, [r3, #0]
  hhcd_USB_DRD_FS.Init.dev_endpoints = 8;
 8000af6:	4b12      	ldr	r3, [pc, #72]	; (8000b40 <MX_USB_DRD_FS_HCD_Init+0x54>)
 8000af8:	2208      	movs	r2, #8
 8000afa:	605a      	str	r2, [r3, #4]
  hhcd_USB_DRD_FS.Init.Host_channels = 8;
 8000afc:	4b10      	ldr	r3, [pc, #64]	; (8000b40 <MX_USB_DRD_FS_HCD_Init+0x54>)
 8000afe:	2208      	movs	r2, #8
 8000b00:	609a      	str	r2, [r3, #8]
  hhcd_USB_DRD_FS.Init.speed = HCD_SPEED_FULL;
 8000b02:	4b0f      	ldr	r3, [pc, #60]	; (8000b40 <MX_USB_DRD_FS_HCD_Init+0x54>)
 8000b04:	2201      	movs	r2, #1
 8000b06:	611a      	str	r2, [r3, #16]
  hhcd_USB_DRD_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8000b08:	4b0d      	ldr	r3, [pc, #52]	; (8000b40 <MX_USB_DRD_FS_HCD_Init+0x54>)
 8000b0a:	2202      	movs	r2, #2
 8000b0c:	619a      	str	r2, [r3, #24]
  hhcd_USB_DRD_FS.Init.Sof_enable = DISABLE;
 8000b0e:	4b0c      	ldr	r3, [pc, #48]	; (8000b40 <MX_USB_DRD_FS_HCD_Init+0x54>)
 8000b10:	2200      	movs	r2, #0
 8000b12:	61da      	str	r2, [r3, #28]
  hhcd_USB_DRD_FS.Init.low_power_enable = DISABLE;
 8000b14:	4b0a      	ldr	r3, [pc, #40]	; (8000b40 <MX_USB_DRD_FS_HCD_Init+0x54>)
 8000b16:	2200      	movs	r2, #0
 8000b18:	621a      	str	r2, [r3, #32]
  hhcd_USB_DRD_FS.Init.vbus_sensing_enable = DISABLE;
 8000b1a:	4b09      	ldr	r3, [pc, #36]	; (8000b40 <MX_USB_DRD_FS_HCD_Init+0x54>)
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	62da      	str	r2, [r3, #44]	; 0x2c
  hhcd_USB_DRD_FS.Init.bulk_doublebuffer_enable = DISABLE;
 8000b20:	4b07      	ldr	r3, [pc, #28]	; (8000b40 <MX_USB_DRD_FS_HCD_Init+0x54>)
 8000b22:	2200      	movs	r2, #0
 8000b24:	631a      	str	r2, [r3, #48]	; 0x30
  hhcd_USB_DRD_FS.Init.iso_singlebuffer_enable = DISABLE;
 8000b26:	4b06      	ldr	r3, [pc, #24]	; (8000b40 <MX_USB_DRD_FS_HCD_Init+0x54>)
 8000b28:	2200      	movs	r2, #0
 8000b2a:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_HCD_Init(&hhcd_USB_DRD_FS) != HAL_OK)
 8000b2c:	4804      	ldr	r0, [pc, #16]	; (8000b40 <MX_USB_DRD_FS_HCD_Init+0x54>)
 8000b2e:	f002 fc3d 	bl	80033ac <HAL_HCD_Init>
 8000b32:	4603      	mov	r3, r0
 8000b34:	2b00      	cmp	r3, #0
 8000b36:	d001      	beq.n	8000b3c <MX_USB_DRD_FS_HCD_Init+0x50>
  {
    Error_Handler();
 8000b38:	f000 f86a 	bl	8000c10 <Error_Handler>
  }
  /* USER CODE BEGIN USB_DRD_FS_Init 2 */

  /* USER CODE END USB_DRD_FS_Init 2 */

}
 8000b3c:	bf00      	nop
 8000b3e:	bd80      	pop	{r7, pc}
 8000b40:	20000238 	.word	0x20000238
 8000b44:	40016000 	.word	0x40016000

08000b48 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b088      	sub	sp, #32
 8000b4c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b4e:	f107 030c 	add.w	r3, r7, #12
 8000b52:	2200      	movs	r2, #0
 8000b54:	601a      	str	r2, [r3, #0]
 8000b56:	605a      	str	r2, [r3, #4]
 8000b58:	609a      	str	r2, [r3, #8]
 8000b5a:	60da      	str	r2, [r3, #12]
 8000b5c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b5e:	4b28      	ldr	r3, [pc, #160]	; (8000c00 <MX_GPIO_Init+0xb8>)
 8000b60:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000b64:	4a26      	ldr	r2, [pc, #152]	; (8000c00 <MX_GPIO_Init+0xb8>)
 8000b66:	f043 0304 	orr.w	r3, r3, #4
 8000b6a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000b6e:	4b24      	ldr	r3, [pc, #144]	; (8000c00 <MX_GPIO_Init+0xb8>)
 8000b70:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000b74:	f003 0304 	and.w	r3, r3, #4
 8000b78:	60bb      	str	r3, [r7, #8]
 8000b7a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b7c:	4b20      	ldr	r3, [pc, #128]	; (8000c00 <MX_GPIO_Init+0xb8>)
 8000b7e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000b82:	4a1f      	ldr	r2, [pc, #124]	; (8000c00 <MX_GPIO_Init+0xb8>)
 8000b84:	f043 0301 	orr.w	r3, r3, #1
 8000b88:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000b8c:	4b1c      	ldr	r3, [pc, #112]	; (8000c00 <MX_GPIO_Init+0xb8>)
 8000b8e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000b92:	f003 0301 	and.w	r3, r3, #1
 8000b96:	607b      	str	r3, [r7, #4]
 8000b98:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b9a:	4b19      	ldr	r3, [pc, #100]	; (8000c00 <MX_GPIO_Init+0xb8>)
 8000b9c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000ba0:	4a17      	ldr	r2, [pc, #92]	; (8000c00 <MX_GPIO_Init+0xb8>)
 8000ba2:	f043 0302 	orr.w	r3, r3, #2
 8000ba6:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000baa:	4b15      	ldr	r3, [pc, #84]	; (8000c00 <MX_GPIO_Init+0xb8>)
 8000bac:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000bb0:	f003 0302 	and.w	r3, r3, #2
 8000bb4:	603b      	str	r3, [r7, #0]
 8000bb6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 8000bb8:	2200      	movs	r2, #0
 8000bba:	2120      	movs	r1, #32
 8000bbc:	4811      	ldr	r0, [pc, #68]	; (8000c04 <MX_GPIO_Init+0xbc>)
 8000bbe:	f002 fbdd 	bl	800337c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_BUTTON_Pin */
  GPIO_InitStruct.Pin = USER_BUTTON_Pin;
 8000bc2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000bc6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000bc8:	4b0f      	ldr	r3, [pc, #60]	; (8000c08 <MX_GPIO_Init+0xc0>)
 8000bca:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bcc:	2300      	movs	r3, #0
 8000bce:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(USER_BUTTON_GPIO_Port, &GPIO_InitStruct);
 8000bd0:	f107 030c 	add.w	r3, r7, #12
 8000bd4:	4619      	mov	r1, r3
 8000bd6:	480d      	ldr	r0, [pc, #52]	; (8000c0c <MX_GPIO_Init+0xc4>)
 8000bd8:	f002 f9f8 	bl	8002fcc <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_GREEN_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin;
 8000bdc:	2320      	movs	r3, #32
 8000bde:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000be0:	2301      	movs	r3, #1
 8000be2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000be4:	2301      	movs	r3, #1
 8000be6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000be8:	2302      	movs	r3, #2
 8000bea:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 8000bec:	f107 030c 	add.w	r3, r7, #12
 8000bf0:	4619      	mov	r1, r3
 8000bf2:	4804      	ldr	r0, [pc, #16]	; (8000c04 <MX_GPIO_Init+0xbc>)
 8000bf4:	f002 f9ea 	bl	8002fcc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000bf8:	bf00      	nop
 8000bfa:	3720      	adds	r7, #32
 8000bfc:	46bd      	mov	sp, r7
 8000bfe:	bd80      	pop	{r7, pc}
 8000c00:	46020c00 	.word	0x46020c00
 8000c04:	42020000 	.word	0x42020000
 8000c08:	10210000 	.word	0x10210000
 8000c0c:	42020800 	.word	0x42020800

08000c10 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c10:	b480      	push	{r7}
 8000c12:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c14:	b672      	cpsid	i
}
 8000c16:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c18:	e7fe      	b.n	8000c18 <Error_Handler+0x8>
	...

08000c1c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	b082      	sub	sp, #8
 8000c20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000c22:	4b0a      	ldr	r3, [pc, #40]	; (8000c4c <HAL_MspInit+0x30>)
 8000c24:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000c28:	4a08      	ldr	r2, [pc, #32]	; (8000c4c <HAL_MspInit+0x30>)
 8000c2a:	f043 0304 	orr.w	r3, r3, #4
 8000c2e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8000c32:	4b06      	ldr	r3, [pc, #24]	; (8000c4c <HAL_MspInit+0x30>)
 8000c34:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000c38:	f003 0304 	and.w	r3, r3, #4
 8000c3c:	607b      	str	r3, [r7, #4]
 8000c3e:	687b      	ldr	r3, [r7, #4]
  HAL_PWREx_EnableVddA();
 8000c40:	f002 fd6e 	bl	8003720 <HAL_PWREx_EnableVddA>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c44:	bf00      	nop
 8000c46:	3708      	adds	r7, #8
 8000c48:	46bd      	mov	sp, r7
 8000c4a:	bd80      	pop	{r7, pc}
 8000c4c:	46020c00 	.word	0x46020c00

08000c50 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b0ba      	sub	sp, #232	; 0xe8
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c58:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	601a      	str	r2, [r3, #0]
 8000c60:	605a      	str	r2, [r3, #4]
 8000c62:	609a      	str	r2, [r3, #8]
 8000c64:	60da      	str	r2, [r3, #12]
 8000c66:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000c68:	f107 0310 	add.w	r3, r7, #16
 8000c6c:	22c0      	movs	r2, #192	; 0xc0
 8000c6e:	2100      	movs	r1, #0
 8000c70:	4618      	mov	r0, r3
 8000c72:	f008 fe21 	bl	80098b8 <memset>
  if(hadc->Instance==ADC1)
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	681b      	ldr	r3, [r3, #0]
 8000c7a:	4a24      	ldr	r2, [pc, #144]	; (8000d0c <HAL_ADC_MspInit+0xbc>)
 8000c7c:	4293      	cmp	r3, r2
 8000c7e:	d140      	bne.n	8000d02 <HAL_ADC_MspInit+0xb2>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADCDAC;
 8000c80:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000c84:	f04f 0300 	mov.w	r3, #0
 8000c88:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.AdcDacClockSelection = RCC_ADCDACCLKSOURCE_HSI;
 8000c8c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000c90:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c94:	f107 0310 	add.w	r3, r7, #16
 8000c98:	4618      	mov	r0, r3
 8000c9a:	f003 fffd 	bl	8004c98 <HAL_RCCEx_PeriphCLKConfig>
 8000c9e:	4603      	mov	r3, r0
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	d001      	beq.n	8000ca8 <HAL_ADC_MspInit+0x58>
    {
      Error_Handler();
 8000ca4:	f7ff ffb4 	bl	8000c10 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8000ca8:	4b19      	ldr	r3, [pc, #100]	; (8000d10 <HAL_ADC_MspInit+0xc0>)
 8000caa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000cae:	4a18      	ldr	r2, [pc, #96]	; (8000d10 <HAL_ADC_MspInit+0xc0>)
 8000cb0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000cb4:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000cb8:	4b15      	ldr	r3, [pc, #84]	; (8000d10 <HAL_ADC_MspInit+0xc0>)
 8000cba:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000cbe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000cc2:	60fb      	str	r3, [r7, #12]
 8000cc4:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cc6:	4b12      	ldr	r3, [pc, #72]	; (8000d10 <HAL_ADC_MspInit+0xc0>)
 8000cc8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000ccc:	4a10      	ldr	r2, [pc, #64]	; (8000d10 <HAL_ADC_MspInit+0xc0>)
 8000cce:	f043 0304 	orr.w	r3, r3, #4
 8000cd2:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000cd6:	4b0e      	ldr	r3, [pc, #56]	; (8000d10 <HAL_ADC_MspInit+0xc0>)
 8000cd8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000cdc:	f003 0304 	and.w	r3, r3, #4
 8000ce0:	60bb      	str	r3, [r7, #8]
 8000ce2:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PC2     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000ce4:	2304      	movs	r3, #4
 8000ce6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000cea:	2303      	movs	r3, #3
 8000cec:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000cf6:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000cfa:	4619      	mov	r1, r3
 8000cfc:	4805      	ldr	r0, [pc, #20]	; (8000d14 <HAL_ADC_MspInit+0xc4>)
 8000cfe:	f002 f965 	bl	8002fcc <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000d02:	bf00      	nop
 8000d04:	37e8      	adds	r7, #232	; 0xe8
 8000d06:	46bd      	mov	sp, r7
 8000d08:	bd80      	pop	{r7, pc}
 8000d0a:	bf00      	nop
 8000d0c:	42028000 	.word	0x42028000
 8000d10:	46020c00 	.word	0x46020c00
 8000d14:	42020800 	.word	0x42020800

08000d18 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b0be      	sub	sp, #248	; 0xf8
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d20:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8000d24:	2200      	movs	r2, #0
 8000d26:	601a      	str	r2, [r3, #0]
 8000d28:	605a      	str	r2, [r3, #4]
 8000d2a:	609a      	str	r2, [r3, #8]
 8000d2c:	60da      	str	r2, [r3, #12]
 8000d2e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000d30:	f107 0320 	add.w	r3, r7, #32
 8000d34:	22c0      	movs	r2, #192	; 0xc0
 8000d36:	2100      	movs	r1, #0
 8000d38:	4618      	mov	r0, r3
 8000d3a:	f008 fdbd 	bl	80098b8 <memset>
  if(huart->Instance==USART1)
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	4a66      	ldr	r2, [pc, #408]	; (8000edc <HAL_UART_MspInit+0x1c4>)
 8000d44:	4293      	cmp	r3, r2
 8000d46:	d14e      	bne.n	8000de6 <HAL_UART_MspInit+0xce>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000d48:	f04f 0201 	mov.w	r2, #1
 8000d4c:	f04f 0300 	mov.w	r3, #0
 8000d50:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000d54:	2300      	movs	r3, #0
 8000d56:	673b      	str	r3, [r7, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d58:	f107 0320 	add.w	r3, r7, #32
 8000d5c:	4618      	mov	r0, r3
 8000d5e:	f003 ff9b 	bl	8004c98 <HAL_RCCEx_PeriphCLKConfig>
 8000d62:	4603      	mov	r3, r0
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	d001      	beq.n	8000d6c <HAL_UART_MspInit+0x54>
    {
      Error_Handler();
 8000d68:	f7ff ff52 	bl	8000c10 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000d6c:	4b5c      	ldr	r3, [pc, #368]	; (8000ee0 <HAL_UART_MspInit+0x1c8>)
 8000d6e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8000d72:	4a5b      	ldr	r2, [pc, #364]	; (8000ee0 <HAL_UART_MspInit+0x1c8>)
 8000d74:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d78:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
 8000d7c:	4b58      	ldr	r3, [pc, #352]	; (8000ee0 <HAL_UART_MspInit+0x1c8>)
 8000d7e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8000d82:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d86:	61fb      	str	r3, [r7, #28]
 8000d88:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d8a:	4b55      	ldr	r3, [pc, #340]	; (8000ee0 <HAL_UART_MspInit+0x1c8>)
 8000d8c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000d90:	4a53      	ldr	r2, [pc, #332]	; (8000ee0 <HAL_UART_MspInit+0x1c8>)
 8000d92:	f043 0301 	orr.w	r3, r3, #1
 8000d96:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000d9a:	4b51      	ldr	r3, [pc, #324]	; (8000ee0 <HAL_UART_MspInit+0x1c8>)
 8000d9c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000da0:	f003 0301 	and.w	r3, r3, #1
 8000da4:	61bb      	str	r3, [r7, #24]
 8000da6:	69bb      	ldr	r3, [r7, #24]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000da8:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000dac:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000db0:	2302      	movs	r3, #2
 8000db2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000db6:	2300      	movs	r3, #0
 8000db8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000dc2:	2307      	movs	r3, #7
 8000dc4:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dc8:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8000dcc:	4619      	mov	r1, r3
 8000dce:	4845      	ldr	r0, [pc, #276]	; (8000ee4 <HAL_UART_MspInit+0x1cc>)
 8000dd0:	f002 f8fc 	bl	8002fcc <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	2100      	movs	r1, #0
 8000dd8:	203d      	movs	r0, #61	; 0x3d
 8000dda:	f002 f81e 	bl	8002e1a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000dde:	203d      	movs	r0, #61	; 0x3d
 8000de0:	f002 f835 	bl	8002e4e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000de4:	e076      	b.n	8000ed4 <HAL_UART_MspInit+0x1bc>
  else if(huart->Instance==USART3)
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	4a3f      	ldr	r2, [pc, #252]	; (8000ee8 <HAL_UART_MspInit+0x1d0>)
 8000dec:	4293      	cmp	r3, r2
 8000dee:	d171      	bne.n	8000ed4 <HAL_UART_MspInit+0x1bc>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000df0:	f04f 0204 	mov.w	r2, #4
 8000df4:	f04f 0300 	mov.w	r3, #0
 8000df8:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	677b      	str	r3, [r7, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e00:	f107 0320 	add.w	r3, r7, #32
 8000e04:	4618      	mov	r0, r3
 8000e06:	f003 ff47 	bl	8004c98 <HAL_RCCEx_PeriphCLKConfig>
 8000e0a:	4603      	mov	r3, r0
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	d001      	beq.n	8000e14 <HAL_UART_MspInit+0xfc>
      Error_Handler();
 8000e10:	f7ff fefe 	bl	8000c10 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8000e14:	4b32      	ldr	r3, [pc, #200]	; (8000ee0 <HAL_UART_MspInit+0x1c8>)
 8000e16:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8000e1a:	4a31      	ldr	r2, [pc, #196]	; (8000ee0 <HAL_UART_MspInit+0x1c8>)
 8000e1c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000e20:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8000e24:	4b2e      	ldr	r3, [pc, #184]	; (8000ee0 <HAL_UART_MspInit+0x1c8>)
 8000e26:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8000e2a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000e2e:	617b      	str	r3, [r7, #20]
 8000e30:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e32:	4b2b      	ldr	r3, [pc, #172]	; (8000ee0 <HAL_UART_MspInit+0x1c8>)
 8000e34:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000e38:	4a29      	ldr	r2, [pc, #164]	; (8000ee0 <HAL_UART_MspInit+0x1c8>)
 8000e3a:	f043 0301 	orr.w	r3, r3, #1
 8000e3e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000e42:	4b27      	ldr	r3, [pc, #156]	; (8000ee0 <HAL_UART_MspInit+0x1c8>)
 8000e44:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000e48:	f003 0301 	and.w	r3, r3, #1
 8000e4c:	613b      	str	r3, [r7, #16]
 8000e4e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e50:	4b23      	ldr	r3, [pc, #140]	; (8000ee0 <HAL_UART_MspInit+0x1c8>)
 8000e52:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000e56:	4a22      	ldr	r2, [pc, #136]	; (8000ee0 <HAL_UART_MspInit+0x1c8>)
 8000e58:	f043 0304 	orr.w	r3, r3, #4
 8000e5c:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000e60:	4b1f      	ldr	r3, [pc, #124]	; (8000ee0 <HAL_UART_MspInit+0x1c8>)
 8000e62:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000e66:	f003 0304 	and.w	r3, r3, #4
 8000e6a:	60fb      	str	r3, [r7, #12]
 8000e6c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000e6e:	2380      	movs	r3, #128	; 0x80
 8000e70:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e74:	2302      	movs	r3, #2
 8000e76:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e80:	2300      	movs	r3, #0
 8000e82:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000e86:	2307      	movs	r3, #7
 8000e88:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e8c:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8000e90:	4619      	mov	r1, r3
 8000e92:	4814      	ldr	r0, [pc, #80]	; (8000ee4 <HAL_UART_MspInit+0x1cc>)
 8000e94:	f002 f89a 	bl	8002fcc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000e98:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000e9c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ea0:	2302      	movs	r3, #2
 8000ea2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eac:	2300      	movs	r3, #0
 8000eae:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000eb2:	2307      	movs	r3, #7
 8000eb4:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000eb8:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8000ebc:	4619      	mov	r1, r3
 8000ebe:	480b      	ldr	r0, [pc, #44]	; (8000eec <HAL_UART_MspInit+0x1d4>)
 8000ec0:	f002 f884 	bl	8002fcc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	2100      	movs	r1, #0
 8000ec8:	203f      	movs	r0, #63	; 0x3f
 8000eca:	f001 ffa6 	bl	8002e1a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8000ece:	203f      	movs	r0, #63	; 0x3f
 8000ed0:	f001 ffbd 	bl	8002e4e <HAL_NVIC_EnableIRQ>
}
 8000ed4:	bf00      	nop
 8000ed6:	37f8      	adds	r7, #248	; 0xf8
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	bd80      	pop	{r7, pc}
 8000edc:	40013800 	.word	0x40013800
 8000ee0:	46020c00 	.word	0x46020c00
 8000ee4:	42020000 	.word	0x42020000
 8000ee8:	40004800 	.word	0x40004800
 8000eec:	42020800 	.word	0x42020800

08000ef0 <HAL_HCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hhcd: HCD handle pointer
* @retval None
*/
void HAL_HCD_MspInit(HCD_HandleTypeDef* hhcd)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b0bc      	sub	sp, #240	; 0xf0
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ef8:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000efc:	2200      	movs	r2, #0
 8000efe:	601a      	str	r2, [r3, #0]
 8000f00:	605a      	str	r2, [r3, #4]
 8000f02:	609a      	str	r2, [r3, #8]
 8000f04:	60da      	str	r2, [r3, #12]
 8000f06:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000f08:	f107 0318 	add.w	r3, r7, #24
 8000f0c:	22c0      	movs	r2, #192	; 0xc0
 8000f0e:	2100      	movs	r1, #0
 8000f10:	4618      	mov	r0, r3
 8000f12:	f008 fcd1 	bl	80098b8 <memset>
  if(hhcd->Instance==USB_DRD_FS)
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	4a38      	ldr	r2, [pc, #224]	; (8000ffc <HAL_HCD_MspInit+0x10c>)
 8000f1c:	4293      	cmp	r3, r2
 8000f1e:	d169      	bne.n	8000ff4 <HAL_HCD_MspInit+0x104>

  /* USER CODE END USB_DRD_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8000f20:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8000f24:	f04f 0300 	mov.w	r3, #0
 8000f28:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInit.IclkClockSelection = RCC_CLK48CLKSOURCE_HSI48;
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000f32:	f107 0318 	add.w	r3, r7, #24
 8000f36:	4618      	mov	r0, r3
 8000f38:	f003 feae 	bl	8004c98 <HAL_RCCEx_PeriphCLKConfig>
 8000f3c:	4603      	mov	r3, r0
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d001      	beq.n	8000f46 <HAL_HCD_MspInit+0x56>
    {
      Error_Handler();
 8000f42:	f7ff fe65 	bl	8000c10 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f46:	4b2e      	ldr	r3, [pc, #184]	; (8001000 <HAL_HCD_MspInit+0x110>)
 8000f48:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000f4c:	4a2c      	ldr	r2, [pc, #176]	; (8001000 <HAL_HCD_MspInit+0x110>)
 8000f4e:	f043 0301 	orr.w	r3, r3, #1
 8000f52:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000f56:	4b2a      	ldr	r3, [pc, #168]	; (8001000 <HAL_HCD_MspInit+0x110>)
 8000f58:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000f5c:	f003 0301 	and.w	r3, r3, #1
 8000f60:	617b      	str	r3, [r7, #20]
 8000f62:	697b      	ldr	r3, [r7, #20]
    /**USB_DRD_FS GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000f64:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000f68:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f6c:	2302      	movs	r3, #2
 8000f6e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f72:	2300      	movs	r3, #0
 8000f74:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f78:	2300      	movs	r3, #0
 8000f7a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 8000f7e:	230a      	movs	r3, #10
 8000f80:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f84:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000f88:	4619      	mov	r1, r3
 8000f8a:	481e      	ldr	r0, [pc, #120]	; (8001004 <HAL_HCD_MspInit+0x114>)
 8000f8c:	f002 f81e 	bl	8002fcc <HAL_GPIO_Init>

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000f90:	4b1b      	ldr	r3, [pc, #108]	; (8001000 <HAL_HCD_MspInit+0x110>)
 8000f92:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000f96:	f003 0304 	and.w	r3, r3, #4
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d119      	bne.n	8000fd2 <HAL_HCD_MspInit+0xe2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000f9e:	4b18      	ldr	r3, [pc, #96]	; (8001000 <HAL_HCD_MspInit+0x110>)
 8000fa0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000fa4:	4a16      	ldr	r2, [pc, #88]	; (8001000 <HAL_HCD_MspInit+0x110>)
 8000fa6:	f043 0304 	orr.w	r3, r3, #4
 8000faa:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8000fae:	4b14      	ldr	r3, [pc, #80]	; (8001000 <HAL_HCD_MspInit+0x110>)
 8000fb0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000fb4:	f003 0304 	and.w	r3, r3, #4
 8000fb8:	613b      	str	r3, [r7, #16]
 8000fba:	693b      	ldr	r3, [r7, #16]
      HAL_PWREx_EnableVddUSB();
 8000fbc:	f002 fba0 	bl	8003700 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 8000fc0:	4b0f      	ldr	r3, [pc, #60]	; (8001000 <HAL_HCD_MspInit+0x110>)
 8000fc2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000fc6:	4a0e      	ldr	r2, [pc, #56]	; (8001000 <HAL_HCD_MspInit+0x110>)
 8000fc8:	f023 0304 	bic.w	r3, r3, #4
 8000fcc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8000fd0:	e001      	b.n	8000fd6 <HAL_HCD_MspInit+0xe6>
    }
    else
    {
      HAL_PWREx_EnableVddUSB();
 8000fd2:	f002 fb95 	bl	8003700 <HAL_PWREx_EnableVddUSB>
    }
    /* Peripheral clock enable */
    __HAL_RCC_USB_FS_CLK_ENABLE();
 8000fd6:	4b0a      	ldr	r3, [pc, #40]	; (8001000 <HAL_HCD_MspInit+0x110>)
 8000fd8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8000fdc:	4a08      	ldr	r2, [pc, #32]	; (8001000 <HAL_HCD_MspInit+0x110>)
 8000fde:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000fe2:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
 8000fe6:	4b06      	ldr	r3, [pc, #24]	; (8001000 <HAL_HCD_MspInit+0x110>)
 8000fe8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8000fec:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000ff0:	60fb      	str	r3, [r7, #12]
 8000ff2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_DRD_FS_MspInit 1 */

  /* USER CODE END USB_DRD_FS_MspInit 1 */
  }

}
 8000ff4:	bf00      	nop
 8000ff6:	37f0      	adds	r7, #240	; 0xf0
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	bd80      	pop	{r7, pc}
 8000ffc:	40016000 	.word	0x40016000
 8001000:	46020c00 	.word	0x46020c00
 8001004:	42020000 	.word	0x42020000

08001008 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001008:	b480      	push	{r7}
 800100a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800100c:	e7fe      	b.n	800100c <NMI_Handler+0x4>

0800100e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800100e:	b480      	push	{r7}
 8001010:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001012:	e7fe      	b.n	8001012 <HardFault_Handler+0x4>

08001014 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001014:	b480      	push	{r7}
 8001016:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001018:	e7fe      	b.n	8001018 <MemManage_Handler+0x4>

0800101a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800101a:	b480      	push	{r7}
 800101c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800101e:	e7fe      	b.n	800101e <BusFault_Handler+0x4>

08001020 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001020:	b480      	push	{r7}
 8001022:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001024:	e7fe      	b.n	8001024 <UsageFault_Handler+0x4>

08001026 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001026:	b480      	push	{r7}
 8001028:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800102a:	bf00      	nop
 800102c:	46bd      	mov	sp, r7
 800102e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001032:	4770      	bx	lr

08001034 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001034:	b480      	push	{r7}
 8001036:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001038:	bf00      	nop
 800103a:	46bd      	mov	sp, r7
 800103c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001040:	4770      	bx	lr

08001042 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001042:	b480      	push	{r7}
 8001044:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001046:	bf00      	nop
 8001048:	46bd      	mov	sp, r7
 800104a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104e:	4770      	bx	lr

08001050 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001054:	f000 f980 	bl	8001358 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001058:	bf00      	nop
 800105a:	bd80      	pop	{r7, pc}

0800105c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001060:	4802      	ldr	r0, [pc, #8]	; (800106c <USART1_IRQHandler+0x10>)
 8001062:	f006 fb07 	bl	8007674 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001066:	bf00      	nop
 8001068:	bd80      	pop	{r7, pc}
 800106a:	bf00      	nop
 800106c:	20000110 	.word	0x20000110

08001070 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001074:	4802      	ldr	r0, [pc, #8]	; (8001080 <USART3_IRQHandler+0x10>)
 8001076:	f006 fafd 	bl	8007674 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800107a:	bf00      	nop
 800107c:	bd80      	pop	{r7, pc}
 800107e:	bf00      	nop
 8001080:	200001a4 	.word	0x200001a4

08001084 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	b086      	sub	sp, #24
 8001088:	af00      	add	r7, sp, #0
 800108a:	60f8      	str	r0, [r7, #12]
 800108c:	60b9      	str	r1, [r7, #8]
 800108e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001090:	2300      	movs	r3, #0
 8001092:	617b      	str	r3, [r7, #20]
 8001094:	e00a      	b.n	80010ac <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001096:	f3af 8000 	nop.w
 800109a:	4601      	mov	r1, r0
 800109c:	68bb      	ldr	r3, [r7, #8]
 800109e:	1c5a      	adds	r2, r3, #1
 80010a0:	60ba      	str	r2, [r7, #8]
 80010a2:	b2ca      	uxtb	r2, r1
 80010a4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010a6:	697b      	ldr	r3, [r7, #20]
 80010a8:	3301      	adds	r3, #1
 80010aa:	617b      	str	r3, [r7, #20]
 80010ac:	697a      	ldr	r2, [r7, #20]
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	429a      	cmp	r2, r3
 80010b2:	dbf0      	blt.n	8001096 <_read+0x12>
  }

  return len;
 80010b4:	687b      	ldr	r3, [r7, #4]
}
 80010b6:	4618      	mov	r0, r3
 80010b8:	3718      	adds	r7, #24
 80010ba:	46bd      	mov	sp, r7
 80010bc:	bd80      	pop	{r7, pc}

080010be <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80010be:	b580      	push	{r7, lr}
 80010c0:	b086      	sub	sp, #24
 80010c2:	af00      	add	r7, sp, #0
 80010c4:	60f8      	str	r0, [r7, #12]
 80010c6:	60b9      	str	r1, [r7, #8]
 80010c8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010ca:	2300      	movs	r3, #0
 80010cc:	617b      	str	r3, [r7, #20]
 80010ce:	e009      	b.n	80010e4 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80010d0:	68bb      	ldr	r3, [r7, #8]
 80010d2:	1c5a      	adds	r2, r3, #1
 80010d4:	60ba      	str	r2, [r7, #8]
 80010d6:	781b      	ldrb	r3, [r3, #0]
 80010d8:	4618      	mov	r0, r3
 80010da:	f7ff fa65 	bl	80005a8 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010de:	697b      	ldr	r3, [r7, #20]
 80010e0:	3301      	adds	r3, #1
 80010e2:	617b      	str	r3, [r7, #20]
 80010e4:	697a      	ldr	r2, [r7, #20]
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	429a      	cmp	r2, r3
 80010ea:	dbf1      	blt.n	80010d0 <_write+0x12>
  }
  return len;
 80010ec:	687b      	ldr	r3, [r7, #4]
}
 80010ee:	4618      	mov	r0, r3
 80010f0:	3718      	adds	r7, #24
 80010f2:	46bd      	mov	sp, r7
 80010f4:	bd80      	pop	{r7, pc}

080010f6 <_close>:

int _close(int file)
{
 80010f6:	b480      	push	{r7}
 80010f8:	b083      	sub	sp, #12
 80010fa:	af00      	add	r7, sp, #0
 80010fc:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80010fe:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001102:	4618      	mov	r0, r3
 8001104:	370c      	adds	r7, #12
 8001106:	46bd      	mov	sp, r7
 8001108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110c:	4770      	bx	lr

0800110e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800110e:	b480      	push	{r7}
 8001110:	b083      	sub	sp, #12
 8001112:	af00      	add	r7, sp, #0
 8001114:	6078      	str	r0, [r7, #4]
 8001116:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001118:	683b      	ldr	r3, [r7, #0]
 800111a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800111e:	605a      	str	r2, [r3, #4]
  return 0;
 8001120:	2300      	movs	r3, #0
}
 8001122:	4618      	mov	r0, r3
 8001124:	370c      	adds	r7, #12
 8001126:	46bd      	mov	sp, r7
 8001128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112c:	4770      	bx	lr

0800112e <_isatty>:

int _isatty(int file)
{
 800112e:	b480      	push	{r7}
 8001130:	b083      	sub	sp, #12
 8001132:	af00      	add	r7, sp, #0
 8001134:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001136:	2301      	movs	r3, #1
}
 8001138:	4618      	mov	r0, r3
 800113a:	370c      	adds	r7, #12
 800113c:	46bd      	mov	sp, r7
 800113e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001142:	4770      	bx	lr

08001144 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001144:	b480      	push	{r7}
 8001146:	b085      	sub	sp, #20
 8001148:	af00      	add	r7, sp, #0
 800114a:	60f8      	str	r0, [r7, #12]
 800114c:	60b9      	str	r1, [r7, #8]
 800114e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001150:	2300      	movs	r3, #0
}
 8001152:	4618      	mov	r0, r3
 8001154:	3714      	adds	r7, #20
 8001156:	46bd      	mov	sp, r7
 8001158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115c:	4770      	bx	lr
	...

08001160 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	b086      	sub	sp, #24
 8001164:	af00      	add	r7, sp, #0
 8001166:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001168:	4a14      	ldr	r2, [pc, #80]	; (80011bc <_sbrk+0x5c>)
 800116a:	4b15      	ldr	r3, [pc, #84]	; (80011c0 <_sbrk+0x60>)
 800116c:	1ad3      	subs	r3, r2, r3
 800116e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001170:	697b      	ldr	r3, [r7, #20]
 8001172:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001174:	4b13      	ldr	r3, [pc, #76]	; (80011c4 <_sbrk+0x64>)
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	2b00      	cmp	r3, #0
 800117a:	d102      	bne.n	8001182 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800117c:	4b11      	ldr	r3, [pc, #68]	; (80011c4 <_sbrk+0x64>)
 800117e:	4a12      	ldr	r2, [pc, #72]	; (80011c8 <_sbrk+0x68>)
 8001180:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001182:	4b10      	ldr	r3, [pc, #64]	; (80011c4 <_sbrk+0x64>)
 8001184:	681a      	ldr	r2, [r3, #0]
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	4413      	add	r3, r2
 800118a:	693a      	ldr	r2, [r7, #16]
 800118c:	429a      	cmp	r2, r3
 800118e:	d207      	bcs.n	80011a0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001190:	f008 fbf6 	bl	8009980 <__errno>
 8001194:	4603      	mov	r3, r0
 8001196:	220c      	movs	r2, #12
 8001198:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800119a:	f04f 33ff 	mov.w	r3, #4294967295
 800119e:	e009      	b.n	80011b4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80011a0:	4b08      	ldr	r3, [pc, #32]	; (80011c4 <_sbrk+0x64>)
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80011a6:	4b07      	ldr	r3, [pc, #28]	; (80011c4 <_sbrk+0x64>)
 80011a8:	681a      	ldr	r2, [r3, #0]
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	4413      	add	r3, r2
 80011ae:	4a05      	ldr	r2, [pc, #20]	; (80011c4 <_sbrk+0x64>)
 80011b0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80011b2:	68fb      	ldr	r3, [r7, #12]
}
 80011b4:	4618      	mov	r0, r3
 80011b6:	3718      	adds	r7, #24
 80011b8:	46bd      	mov	sp, r7
 80011ba:	bd80      	pop	{r7, pc}
 80011bc:	20040000 	.word	0x20040000
 80011c0:	00000400 	.word	0x00000400
 80011c4:	200006cc 	.word	0x200006cc
 80011c8:	20000820 	.word	0x20000820

080011cc <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80011cc:	b480      	push	{r7}
 80011ce:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80011d0:	4b18      	ldr	r3, [pc, #96]	; (8001234 <SystemInit+0x68>)
 80011d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80011d6:	4a17      	ldr	r2, [pc, #92]	; (8001234 <SystemInit+0x68>)
 80011d8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80011dc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR = RCC_CR_MSISON;
 80011e0:	4b15      	ldr	r3, [pc, #84]	; (8001238 <SystemInit+0x6c>)
 80011e2:	2201      	movs	r2, #1
 80011e4:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 80011e6:	4b14      	ldr	r3, [pc, #80]	; (8001238 <SystemInit+0x6c>)
 80011e8:	2200      	movs	r2, #0
 80011ea:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 80011ec:	4b12      	ldr	r3, [pc, #72]	; (8001238 <SystemInit+0x6c>)
 80011ee:	2200      	movs	r2, #0
 80011f0:	621a      	str	r2, [r3, #32]
  RCC->CFGR3 = 0U;
 80011f2:	4b11      	ldr	r3, [pc, #68]	; (8001238 <SystemInit+0x6c>)
 80011f4:	2200      	movs	r2, #0
 80011f6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Reset HSEON, CSSON , HSION, PLLxON bits */
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_CSSON | RCC_CR_PLL1ON | RCC_CR_PLL2ON | RCC_CR_PLL3ON);
 80011f8:	4b0f      	ldr	r3, [pc, #60]	; (8001238 <SystemInit+0x6c>)
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	4a0e      	ldr	r2, [pc, #56]	; (8001238 <SystemInit+0x6c>)
 80011fe:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8001202:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8001206:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLL1CFGR = 0U;
 8001208:	4b0b      	ldr	r3, [pc, #44]	; (8001238 <SystemInit+0x6c>)
 800120a:	2200      	movs	r2, #0
 800120c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 800120e:	4b0a      	ldr	r3, [pc, #40]	; (8001238 <SystemInit+0x6c>)
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	4a09      	ldr	r2, [pc, #36]	; (8001238 <SystemInit+0x6c>)
 8001214:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001218:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 800121a:	4b07      	ldr	r3, [pc, #28]	; (8001238 <SystemInit+0x6c>)
 800121c:	2200      	movs	r2, #0
 800121e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001220:	4b04      	ldr	r3, [pc, #16]	; (8001234 <SystemInit+0x68>)
 8001222:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001226:	609a      	str	r2, [r3, #8]
  #endif
}
 8001228:	bf00      	nop
 800122a:	46bd      	mov	sp, r7
 800122c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001230:	4770      	bx	lr
 8001232:	bf00      	nop
 8001234:	e000ed00 	.word	0xe000ed00
 8001238:	46020c00 	.word	0x46020c00

0800123c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800123c:	480d      	ldr	r0, [pc, #52]	; (8001274 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800123e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001240:	f7ff ffc4 	bl	80011cc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001244:	480c      	ldr	r0, [pc, #48]	; (8001278 <LoopForever+0x6>)
  ldr r1, =_edata
 8001246:	490d      	ldr	r1, [pc, #52]	; (800127c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001248:	4a0d      	ldr	r2, [pc, #52]	; (8001280 <LoopForever+0xe>)
  movs r3, #0
 800124a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800124c:	e002      	b.n	8001254 <LoopCopyDataInit>

0800124e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800124e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001250:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001252:	3304      	adds	r3, #4

08001254 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001254:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001256:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001258:	d3f9      	bcc.n	800124e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800125a:	4a0a      	ldr	r2, [pc, #40]	; (8001284 <LoopForever+0x12>)
  ldr r4, =_ebss
 800125c:	4c0a      	ldr	r4, [pc, #40]	; (8001288 <LoopForever+0x16>)
  movs r3, #0
 800125e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001260:	e001      	b.n	8001266 <LoopFillZerobss>

08001262 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001262:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001264:	3204      	adds	r2, #4

08001266 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001266:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001268:	d3fb      	bcc.n	8001262 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800126a:	f008 fb8f 	bl	800998c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800126e:	f7ff fa7f 	bl	8000770 <main>

08001272 <LoopForever>:

LoopForever:
    b LoopForever
 8001272:	e7fe      	b.n	8001272 <LoopForever>
  ldr   r0, =_estack
 8001274:	20040000 	.word	0x20040000
  ldr r0, =_sdata
 8001278:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800127c:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8001280:	0800a098 	.word	0x0800a098
  ldr r2, =_sbss
 8001284:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8001288:	20000820 	.word	0x20000820

0800128c <ADC1_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800128c:	e7fe      	b.n	800128c <ADC1_IRQHandler>
	...

08001290 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001294:	4b11      	ldr	r3, [pc, #68]	; (80012dc <HAL_Init+0x4c>)
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	4a10      	ldr	r2, [pc, #64]	; (80012dc <HAL_Init+0x4c>)
 800129a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800129e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80012a0:	2003      	movs	r0, #3
 80012a2:	f001 fdaf 	bl	8002e04 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 80012a6:	f003 fb19 	bl	80048dc <HAL_RCC_GetSysClockFreq>
 80012aa:	4602      	mov	r2, r0
 80012ac:	4b0c      	ldr	r3, [pc, #48]	; (80012e0 <HAL_Init+0x50>)
 80012ae:	6a1b      	ldr	r3, [r3, #32]
 80012b0:	f003 030f 	and.w	r3, r3, #15
 80012b4:	490b      	ldr	r1, [pc, #44]	; (80012e4 <HAL_Init+0x54>)
 80012b6:	5ccb      	ldrb	r3, [r1, r3]
 80012b8:	fa22 f303 	lsr.w	r3, r2, r3
 80012bc:	4a0a      	ldr	r2, [pc, #40]	; (80012e8 <HAL_Init+0x58>)
 80012be:	6013      	str	r3, [r2, #0]

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80012c0:	200f      	movs	r0, #15
 80012c2:	f000 f813 	bl	80012ec <HAL_InitTick>
 80012c6:	4603      	mov	r3, r0
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d001      	beq.n	80012d0 <HAL_Init+0x40>
  {
    return HAL_ERROR;
 80012cc:	2301      	movs	r3, #1
 80012ce:	e002      	b.n	80012d6 <HAL_Init+0x46>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80012d0:	f7ff fca4 	bl	8000c1c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80012d4:	2300      	movs	r3, #0
}
 80012d6:	4618      	mov	r0, r3
 80012d8:	bd80      	pop	{r7, pc}
 80012da:	bf00      	nop
 80012dc:	40022000 	.word	0x40022000
 80012e0:	46020c00 	.word	0x46020c00
 80012e4:	08009f88 	.word	0x08009f88
 80012e8:	20000000 	.word	0x20000000

080012ec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b082      	sub	sp, #8
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
 80012f4:	4b15      	ldr	r3, [pc, #84]	; (800134c <HAL_InitTick+0x60>)
 80012f6:	781b      	ldrb	r3, [r3, #0]
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d101      	bne.n	8001300 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80012fc:	2301      	movs	r3, #1
 80012fe:	e021      	b.n	8001344 <HAL_InitTick+0x58>
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001300:	4b13      	ldr	r3, [pc, #76]	; (8001350 <HAL_InitTick+0x64>)
 8001302:	681a      	ldr	r2, [r3, #0]
 8001304:	4b11      	ldr	r3, [pc, #68]	; (800134c <HAL_InitTick+0x60>)
 8001306:	781b      	ldrb	r3, [r3, #0]
 8001308:	4619      	mov	r1, r3
 800130a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800130e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001312:	fbb2 f3f3 	udiv	r3, r2, r3
 8001316:	4618      	mov	r0, r3
 8001318:	f001 fda7 	bl	8002e6a <HAL_SYSTICK_Config>
 800131c:	4603      	mov	r3, r0
 800131e:	2b00      	cmp	r3, #0
 8001320:	d001      	beq.n	8001326 <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
 8001322:	2301      	movs	r3, #1
 8001324:	e00e      	b.n	8001344 <HAL_InitTick+0x58>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	2b0f      	cmp	r3, #15
 800132a:	d80a      	bhi.n	8001342 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800132c:	2200      	movs	r2, #0
 800132e:	6879      	ldr	r1, [r7, #4]
 8001330:	f04f 30ff 	mov.w	r0, #4294967295
 8001334:	f001 fd71 	bl	8002e1a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001338:	4a06      	ldr	r2, [pc, #24]	; (8001354 <HAL_InitTick+0x68>)
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800133e:	2300      	movs	r3, #0
 8001340:	e000      	b.n	8001344 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001342:	2301      	movs	r3, #1
}
 8001344:	4618      	mov	r0, r3
 8001346:	3708      	adds	r7, #8
 8001348:	46bd      	mov	sp, r7
 800134a:	bd80      	pop	{r7, pc}
 800134c:	20000008 	.word	0x20000008
 8001350:	20000000 	.word	0x20000000
 8001354:	20000004 	.word	0x20000004

08001358 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001358:	b480      	push	{r7}
 800135a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800135c:	4b06      	ldr	r3, [pc, #24]	; (8001378 <HAL_IncTick+0x20>)
 800135e:	781b      	ldrb	r3, [r3, #0]
 8001360:	461a      	mov	r2, r3
 8001362:	4b06      	ldr	r3, [pc, #24]	; (800137c <HAL_IncTick+0x24>)
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	4413      	add	r3, r2
 8001368:	4a04      	ldr	r2, [pc, #16]	; (800137c <HAL_IncTick+0x24>)
 800136a:	6013      	str	r3, [r2, #0]
}
 800136c:	bf00      	nop
 800136e:	46bd      	mov	sp, r7
 8001370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001374:	4770      	bx	lr
 8001376:	bf00      	nop
 8001378:	20000008 	.word	0x20000008
 800137c:	200006d0 	.word	0x200006d0

08001380 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001380:	b480      	push	{r7}
 8001382:	af00      	add	r7, sp, #0
  return uwTick;
 8001384:	4b03      	ldr	r3, [pc, #12]	; (8001394 <HAL_GetTick+0x14>)
 8001386:	681b      	ldr	r3, [r3, #0]
}
 8001388:	4618      	mov	r0, r3
 800138a:	46bd      	mov	sp, r7
 800138c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001390:	4770      	bx	lr
 8001392:	bf00      	nop
 8001394:	200006d0 	.word	0x200006d0

08001398 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	b084      	sub	sp, #16
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80013a0:	f7ff ffee 	bl	8001380 <HAL_GetTick>
 80013a4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80013aa:	68fb      	ldr	r3, [r7, #12]
 80013ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80013b0:	d005      	beq.n	80013be <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80013b2:	4b0a      	ldr	r3, [pc, #40]	; (80013dc <HAL_Delay+0x44>)
 80013b4:	781b      	ldrb	r3, [r3, #0]
 80013b6:	461a      	mov	r2, r3
 80013b8:	68fb      	ldr	r3, [r7, #12]
 80013ba:	4413      	add	r3, r2
 80013bc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80013be:	bf00      	nop
 80013c0:	f7ff ffde 	bl	8001380 <HAL_GetTick>
 80013c4:	4602      	mov	r2, r0
 80013c6:	68bb      	ldr	r3, [r7, #8]
 80013c8:	1ad3      	subs	r3, r2, r3
 80013ca:	68fa      	ldr	r2, [r7, #12]
 80013cc:	429a      	cmp	r2, r3
 80013ce:	d8f7      	bhi.n	80013c0 <HAL_Delay+0x28>
  {
  }
}
 80013d0:	bf00      	nop
 80013d2:	bf00      	nop
 80013d4:	3710      	adds	r7, #16
 80013d6:	46bd      	mov	sp, r7
 80013d8:	bd80      	pop	{r7, pc}
 80013da:	bf00      	nop
 80013dc:	20000008 	.word	0x20000008

080013e0 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80013e0:	b480      	push	{r7}
 80013e2:	af00      	add	r7, sp, #0
  return ((DBGMCU->IDCODE & DBGMCU_IDCODE_REV_ID) >> 16);
 80013e4:	4b04      	ldr	r3, [pc, #16]	; (80013f8 <HAL_GetREVID+0x18>)
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	0c1b      	lsrs	r3, r3, #16
 80013ea:	b29b      	uxth	r3, r3
}
 80013ec:	4618      	mov	r0, r3
 80013ee:	46bd      	mov	sp, r7
 80013f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f4:	4770      	bx	lr
 80013f6:	bf00      	nop
 80013f8:	e0044000 	.word	0xe0044000

080013fc <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80013fc:	b480      	push	{r7}
 80013fe:	b083      	sub	sp, #12
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]
 8001404:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_PRESC, CommonClock);
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	f423 1270 	bic.w	r2, r3, #3932160	; 0x3c0000
 800140e:	683b      	ldr	r3, [r7, #0]
 8001410:	431a      	orrs	r2, r3
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	601a      	str	r2, [r3, #0]
}
 8001416:	bf00      	nop
 8001418:	370c      	adds	r7, #12
 800141a:	46bd      	mov	sp, r7
 800141c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001420:	4770      	bx	lr

08001422 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001422:	b480      	push	{r7}
 8001424:	b083      	sub	sp, #12
 8001426:	af00      	add	r7, sp, #0
 8001428:	6078      	str	r0, [r7, #4]
 800142a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSEEN | ADC_CCR_VBATEN, PathInternal);
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001434:	683b      	ldr	r3, [r7, #0]
 8001436:	431a      	orrs	r2, r3
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	601a      	str	r2, [r3, #0]
}
 800143c:	bf00      	nop
 800143e:	370c      	adds	r7, #12
 8001440:	46bd      	mov	sp, r7
 8001442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001446:	4770      	bx	lr

08001448 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001448:	b480      	push	{r7}
 800144a:	b083      	sub	sp, #12
 800144c:	af00      	add	r7, sp, #0
 800144e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSEEN | ADC_CCR_VBATEN));
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001458:	4618      	mov	r0, r3
 800145a:	370c      	adds	r7, #12
 800145c:	46bd      	mov	sp, r7
 800145e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001462:	4770      	bx	lr

08001464 <LL_ADC_SetResolution>:
  *         (1): Specific to ADC instance: ADC1, ADC2
  *         (2): Specific to ADC instance: ADC4
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetResolution(ADC_TypeDef *ADCx, uint32_t Resolution)
{
 8001464:	b480      	push	{r7}
 8001466:	b085      	sub	sp, #20
 8001468:	af00      	add	r7, sp, #0
 800146a:	6078      	str	r0, [r7, #4]
 800146c:	6039      	str	r1, [r7, #0]
  uint32_t tmp_resolution = Resolution;
 800146e:	683b      	ldr	r3, [r7, #0]
 8001470:	60fb      	str	r3, [r7, #12]
  if (ADCx == ADC4)
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	4a0a      	ldr	r2, [pc, #40]	; (80014a0 <LL_ADC_SetResolution+0x3c>)
 8001476:	4293      	cmp	r3, r2
 8001478:	d104      	bne.n	8001484 <LL_ADC_SetResolution+0x20>
  {
    tmp_resolution = ((tmp_resolution - ADC_RESOLUTION_ADC4_PROCESSING) & ADC_CFGR1_RES);
 800147a:	68fb      	ldr	r3, [r7, #12]
 800147c:	3b01      	subs	r3, #1
 800147e:	f003 030c 	and.w	r3, r3, #12
 8001482:	60fb      	str	r3, [r7, #12]
  }

  MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_RES, tmp_resolution);
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	68db      	ldr	r3, [r3, #12]
 8001488:	f023 020c 	bic.w	r2, r3, #12
 800148c:	68fb      	ldr	r3, [r7, #12]
 800148e:	431a      	orrs	r2, r3
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	60da      	str	r2, [r3, #12]
}
 8001494:	bf00      	nop
 8001496:	3714      	adds	r7, #20
 8001498:	46bd      	mov	sp, r7
 800149a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149e:	4770      	bx	lr
 80014a0:	46021000 	.word	0x46021000

080014a4 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x1FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80014a4:	b480      	push	{r7}
 80014a6:	b087      	sub	sp, #28
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	60f8      	str	r0, [r7, #12]
 80014ac:	60b9      	str	r1, [r7, #8]
 80014ae:	607a      	str	r2, [r7, #4]
 80014b0:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80014b2:	68fb      	ldr	r3, [r7, #12]
 80014b4:	3360      	adds	r3, #96	; 0x60
 80014b6:	461a      	mov	r2, r3
 80014b8:	68bb      	ldr	r3, [r7, #8]
 80014ba:	009b      	lsls	r3, r3, #2
 80014bc:	4413      	add	r3, r2
 80014be:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80014c0:	697b      	ldr	r3, [r7, #20]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	f003 62e0 	and.w	r2, r3, #117440512	; 0x7000000
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	005b      	lsls	r3, r3, #1
 80014cc:	f003 4178 	and.w	r1, r3, #4160749568	; 0xf8000000
 80014d0:	683b      	ldr	r3, [r7, #0]
 80014d2:	430b      	orrs	r3, r1
 80014d4:	431a      	orrs	r2, r3
 80014d6:	697b      	ldr	r3, [r7, #20]
 80014d8:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) << 1UL) | OffsetLevel);
}
 80014da:	bf00      	nop
 80014dc:	371c      	adds	r7, #28
 80014de:	46bd      	mov	sp, r7
 80014e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e4:	4770      	bx	lr

080014e6 <LL_ADC_GetOffsetChannel>:
  *         (1, 2) For ADC channel read back from ADC register,
  *                comparison with internal channel parameter to be done
  *                using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80014e6:	b480      	push	{r7}
 80014e8:	b085      	sub	sp, #20
 80014ea:	af00      	add	r7, sp, #0
 80014ec:	6078      	str	r0, [r7, #4]
 80014ee:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	3360      	adds	r3, #96	; 0x60
 80014f4:	461a      	mov	r2, r3
 80014f6:	683b      	ldr	r3, [r7, #0]
 80014f8:	009b      	lsls	r3, r3, #2
 80014fa:	4413      	add	r3, r2
 80014fc:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80014fe:	68fb      	ldr	r3, [r7, #12]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	f003 4378 	and.w	r3, r3, #4160749568	; 0xf8000000
}
 8001506:	4618      	mov	r0, r3
 8001508:	3714      	adds	r7, #20
 800150a:	46bd      	mov	sp, r7
 800150c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001510:	4770      	bx	lr

08001512 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8001512:	b480      	push	{r7}
 8001514:	b087      	sub	sp, #28
 8001516:	af00      	add	r7, sp, #0
 8001518:	60f8      	str	r0, [r7, #12]
 800151a:	60b9      	str	r1, [r7, #8]
 800151c:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800151e:	68fb      	ldr	r3, [r7, #12]
 8001520:	3360      	adds	r3, #96	; 0x60
 8001522:	461a      	mov	r2, r3
 8001524:	68bb      	ldr	r3, [r7, #8]
 8001526:	009b      	lsls	r3, r3, #2
 8001528:	4413      	add	r3, r2
 800152a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg, ADC_OFR1_OFFSETPOS, OffsetSign);
 800152c:	697b      	ldr	r3, [r7, #20]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	431a      	orrs	r2, r3
 8001538:	697b      	ldr	r3, [r7, #20]
 800153a:	601a      	str	r2, [r3, #0]
}
 800153c:	bf00      	nop
 800153e:	371c      	adds	r7, #28
 8001540:	46bd      	mov	sp, r7
 8001542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001546:	4770      	bx	lr

08001548 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety,
                                                      uint32_t OffsetSignedSaturation)
{
 8001548:	b480      	push	{r7}
 800154a:	b087      	sub	sp, #28
 800154c:	af00      	add	r7, sp, #0
 800154e:	60f8      	str	r0, [r7, #12]
 8001550:	60b9      	str	r1, [r7, #8]
 8001552:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	3360      	adds	r3, #96	; 0x60
 8001558:	461a      	mov	r2, r3
 800155a:	68bb      	ldr	r3, [r7, #8]
 800155c:	009b      	lsls	r3, r3, #2
 800155e:	4413      	add	r3, r2
 8001560:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg, ADC_OFR1_SSAT, OffsetSignedSaturation);
 8001562:	697b      	ldr	r3, [r7, #20]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	431a      	orrs	r2, r3
 800156e:	697b      	ldr	r3, [r7, #20]
 8001570:	601a      	str	r2, [r3, #0]
}
 8001572:	bf00      	nop
 8001574:	371c      	adds	r7, #28
 8001576:	46bd      	mov	sp, r7
 8001578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157c:	4770      	bx	lr

0800157e <LL_ADC_SetOffsetUnsignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_UNSIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetUnsignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety,
                                                        uint32_t OffsetUnsignedSaturation)
{
 800157e:	b480      	push	{r7}
 8001580:	b087      	sub	sp, #28
 8001582:	af00      	add	r7, sp, #0
 8001584:	60f8      	str	r0, [r7, #12]
 8001586:	60b9      	str	r1, [r7, #8]
 8001588:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800158a:	68fb      	ldr	r3, [r7, #12]
 800158c:	3360      	adds	r3, #96	; 0x60
 800158e:	461a      	mov	r2, r3
 8001590:	68bb      	ldr	r3, [r7, #8]
 8001592:	009b      	lsls	r3, r3, #2
 8001594:	4413      	add	r3, r2
 8001596:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg, ADC_OFR1_USAT, OffsetUnsignedSaturation);
 8001598:	697b      	ldr	r3, [r7, #20]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	431a      	orrs	r2, r3
 80015a4:	697b      	ldr	r3, [r7, #20]
 80015a6:	601a      	str	r2, [r3, #0]
}
 80015a8:	bf00      	nop
 80015aa:	371c      	adds	r7, #28
 80015ac:	46bd      	mov	sp, r7
 80015ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b2:	4770      	bx	lr

080015b4 <LL_ADC_SetGainCompensation>:
  *         0           Gain compensation will be disabled and value set to 0
  *         1 -> 16393  Gain compensation will be enabled with specified value
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetGainCompensation(ADC_TypeDef *ADCx, uint32_t GainCompensation)
{
 80015b4:	b480      	push	{r7}
 80015b6:	b083      	sub	sp, #12
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	6078      	str	r0, [r7, #4]
 80015bc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->GCOMP, ADC_GCOMP_GCOMPCOEFF, GainCompensation);
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015c2:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80015c6:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80015ca:	683a      	ldr	r2, [r7, #0]
 80015cc:	431a      	orrs	r2, r3
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	671a      	str	r2, [r3, #112]	; 0x70
  MODIFY_REG(ADCx->GCOMP, ADC_GCOMP_GCOMP, ((GainCompensation == 0UL) ? 0UL : 1UL) << ADC_GCOMP_GCOMP_Pos);
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015d6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80015da:	683a      	ldr	r2, [r7, #0]
 80015dc:	2a00      	cmp	r2, #0
 80015de:	d002      	beq.n	80015e6 <LL_ADC_SetGainCompensation+0x32>
 80015e0:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80015e4:	e000      	b.n	80015e8 <LL_ADC_SetGainCompensation+0x34>
 80015e6:	2200      	movs	r2, #0
 80015e8:	431a      	orrs	r2, r3
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	671a      	str	r2, [r3, #112]	; 0x70
}
 80015ee:	bf00      	nop
 80015f0:	370c      	adds	r7, #12
 80015f2:	46bd      	mov	sp, r7
 80015f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f8:	4770      	bx	lr

080015fa <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC4_SAMPLINGTIME_814CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 80015fa:	b480      	push	{r7}
 80015fc:	b085      	sub	sp, #20
 80015fe:	af00      	add	r7, sp, #0
 8001600:	60f8      	str	r0, [r7, #12]
 8001602:	60b9      	str	r1, [r7, #8]
 8001604:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR1,
 8001606:	68fb      	ldr	r3, [r7, #12]
 8001608:	695a      	ldr	r2, [r3, #20]
 800160a:	68bb      	ldr	r3, [r7, #8]
 800160c:	f003 0304 	and.w	r3, r3, #4
 8001610:	2107      	movs	r1, #7
 8001612:	fa01 f303 	lsl.w	r3, r1, r3
 8001616:	43db      	mvns	r3, r3
 8001618:	401a      	ands	r2, r3
 800161a:	68bb      	ldr	r3, [r7, #8]
 800161c:	f003 0304 	and.w	r3, r3, #4
 8001620:	6879      	ldr	r1, [r7, #4]
 8001622:	fa01 f303 	lsl.w	r3, r1, r3
 8001626:	431a      	orrs	r2, r3
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	615a      	str	r2, [r3, #20]
             ADC4_SMPR_SMP1 << (SamplingTimeY & ADC4_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC4_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 800162c:	bf00      	nop
 800162e:	3714      	adds	r7, #20
 8001630:	46bd      	mov	sp, r7
 8001632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001636:	4770      	bx	lr

08001638 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32U5, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001638:	b480      	push	{r7}
 800163a:	b089      	sub	sp, #36	; 0x24
 800163c:	af00      	add	r7, sp, #0
 800163e:	60f8      	str	r0, [r7, #12]
 8001640:	60b9      	str	r1, [r7, #8]
 8001642:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  if (ADCx != ADC4) /* ADC1 or ADC2 */
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	4a2b      	ldr	r2, [pc, #172]	; (80016f4 <LL_ADC_REG_SetSequencerRanks+0xbc>)
 8001648:	4293      	cmp	r3, r2
 800164a:	d020      	beq.n	800168e <LL_ADC_REG_SetSequencerRanks+0x56>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK)     \
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	3330      	adds	r3, #48	; 0x30
 8001650:	461a      	mov	r2, r3
 8001652:	68bb      	ldr	r3, [r7, #8]
 8001654:	0a1b      	lsrs	r3, r3, #8
 8001656:	009b      	lsls	r3, r3, #2
 8001658:	f003 030c 	and.w	r3, r3, #12
 800165c:	4413      	add	r3, r2
 800165e:	61fb      	str	r3, [r7, #28]
                                                            >> ADC_SQRX_REGOFFSET_POS));

    MODIFY_REG(*preg,
 8001660:	69fb      	ldr	r3, [r7, #28]
 8001662:	681a      	ldr	r2, [r3, #0]
 8001664:	68bb      	ldr	r3, [r7, #8]
 8001666:	f003 031f 	and.w	r3, r3, #31
 800166a:	211f      	movs	r1, #31
 800166c:	fa01 f303 	lsl.w	r3, r1, r3
 8001670:	43db      	mvns	r3, r3
 8001672:	401a      	ands	r2, r3
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	0e9b      	lsrs	r3, r3, #26
 8001678:	f003 011f 	and.w	r1, r3, #31
 800167c:	68bb      	ldr	r3, [r7, #8]
 800167e:	f003 031f 	and.w	r3, r3, #31
 8001682:	fa01 f303 	lsl.w	r3, r1, r3
 8001686:	431a      	orrs	r2, r3
 8001688:	69fb      	ldr	r3, [r7, #28]
 800168a:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(ADCx->CHSELR,
               ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
               (__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) << (Rank & ADC_REG_RANK_ID_SQRX_MASK)));
  }
}
 800168c:	e02b      	b.n	80016e6 <LL_ADC_REG_SetSequencerRanks+0xae>
    MODIFY_REG(ADCx->CHSELR,
 800168e:	68fb      	ldr	r3, [r7, #12]
 8001690:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001692:	68bb      	ldr	r3, [r7, #8]
 8001694:	f003 031f 	and.w	r3, r3, #31
 8001698:	210f      	movs	r1, #15
 800169a:	fa01 f303 	lsl.w	r3, r1, r3
 800169e:	43db      	mvns	r3, r3
 80016a0:	401a      	ands	r2, r3
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d104      	bne.n	80016b6 <LL_ADC_REG_SetSequencerRanks+0x7e>
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	0e9b      	lsrs	r3, r3, #26
 80016b0:	f003 031f 	and.w	r3, r3, #31
 80016b4:	e010      	b.n	80016d8 <LL_ADC_REG_SetSequencerRanks+0xa0>
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016ba:	697b      	ldr	r3, [r7, #20]
 80016bc:	fa93 f3a3 	rbit	r3, r3
 80016c0:	613b      	str	r3, [r7, #16]
  return result;
 80016c2:	693b      	ldr	r3, [r7, #16]
 80016c4:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80016c6:	69bb      	ldr	r3, [r7, #24]
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d101      	bne.n	80016d0 <LL_ADC_REG_SetSequencerRanks+0x98>
    return 32U;
 80016cc:	2320      	movs	r3, #32
 80016ce:	e003      	b.n	80016d8 <LL_ADC_REG_SetSequencerRanks+0xa0>
  return __builtin_clz(value);
 80016d0:	69bb      	ldr	r3, [r7, #24]
 80016d2:	fab3 f383 	clz	r3, r3
 80016d6:	b2db      	uxtb	r3, r3
 80016d8:	68b9      	ldr	r1, [r7, #8]
 80016da:	f001 011f 	and.w	r1, r1, #31
 80016de:	408b      	lsls	r3, r1
 80016e0:	431a      	orrs	r2, r3
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	629a      	str	r2, [r3, #40]	; 0x28
}
 80016e6:	bf00      	nop
 80016e8:	3724      	adds	r7, #36	; 0x24
 80016ea:	46bd      	mov	sp, r7
 80016ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f0:	4770      	bx	lr
 80016f2:	bf00      	nop
 80016f4:	46021000 	.word	0x46021000

080016f8 <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 80016f8:	b480      	push	{r7}
 80016fa:	b087      	sub	sp, #28
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	6078      	str	r0, [r7, #4]
 8001700:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (1UL << ((__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) & ADC_CHSELR_CHSEL) & 0x1FUL)));
 8001702:	683b      	ldr	r3, [r7, #0]
 8001704:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8001708:	2b00      	cmp	r3, #0
 800170a:	d107      	bne.n	800171c <LL_ADC_REG_SetSequencerChAdd+0x24>
 800170c:	683b      	ldr	r3, [r7, #0]
 800170e:	0e9b      	lsrs	r3, r3, #26
 8001710:	f003 031f 	and.w	r3, r3, #31
 8001714:	2201      	movs	r2, #1
 8001716:	fa02 f303 	lsl.w	r3, r2, r3
 800171a:	e015      	b.n	8001748 <LL_ADC_REG_SetSequencerChAdd+0x50>
 800171c:	683b      	ldr	r3, [r7, #0]
 800171e:	613b      	str	r3, [r7, #16]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001720:	693b      	ldr	r3, [r7, #16]
 8001722:	fa93 f3a3 	rbit	r3, r3
 8001726:	60fb      	str	r3, [r7, #12]
  return result;
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 800172c:	697b      	ldr	r3, [r7, #20]
 800172e:	2b00      	cmp	r3, #0
 8001730:	d101      	bne.n	8001736 <LL_ADC_REG_SetSequencerChAdd+0x3e>
    return 32U;
 8001732:	2320      	movs	r3, #32
 8001734:	e003      	b.n	800173e <LL_ADC_REG_SetSequencerChAdd+0x46>
  return __builtin_clz(value);
 8001736:	697b      	ldr	r3, [r7, #20]
 8001738:	fab3 f383 	clz	r3, r3
 800173c:	b2db      	uxtb	r3, r3
 800173e:	f003 031f 	and.w	r3, r3, #31
 8001742:	2201      	movs	r2, #1
 8001744:	fa02 f303 	lsl.w	r3, r2, r3
 8001748:	687a      	ldr	r2, [r7, #4]
 800174a:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800174c:	431a      	orrs	r2, r3
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001752:	bf00      	nop
 8001754:	371c      	adds	r7, #28
 8001756:	46bd      	mov	sp, r7
 8001758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175c:	4770      	bx	lr

0800175e <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 800175e:	b480      	push	{r7}
 8001760:	b083      	sub	sp, #12
 8001762:	af00      	add	r7, sp, #0
 8001764:	6078      	str	r0, [r7, #4]
 8001766:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (1UL << ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)));
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800176c:	683b      	ldr	r3, [r7, #0]
 800176e:	0e9b      	lsrs	r3, r3, #26
 8001770:	f003 031f 	and.w	r3, r3, #31
 8001774:	2101      	movs	r1, #1
 8001776:	fa01 f303 	lsl.w	r3, r1, r3
 800177a:	43db      	mvns	r3, r3
 800177c:	401a      	ands	r2, r3
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001782:	bf00      	nop
 8001784:	370c      	adds	r7, #12
 8001786:	46bd      	mov	sp, r7
 8001788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178c:	4770      	bx	lr
	...

08001790 <LL_ADC_SetChannelSamplingTime>:
  *         (1) On STM32U5, parameter available only on ADC instance: ADC1, ADC2.
  *         (2) On STM32U5, parameter available only on ADC instance: ADC4.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001790:	b480      	push	{r7}
 8001792:	b08b      	sub	sp, #44	; 0x2c
 8001794:	af00      	add	r7, sp, #0
 8001796:	60f8      	str	r0, [r7, #12]
 8001798:	60b9      	str	r1, [r7, #8]
 800179a:	607a      	str	r2, [r7, #4]
  if (ADCx != ADC4) /* ADC1 or ADC2 */
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	4a2d      	ldr	r2, [pc, #180]	; (8001854 <LL_ADC_SetChannelSamplingTime+0xc4>)
 80017a0:	4293      	cmp	r3, r2
 80017a2:	d042      	beq.n	800182a <LL_ADC_SetChannelSamplingTime+0x9a>
  {
    /* Set bits with content of parameter "SamplingTime" with bits position     */
    /* in register and register position depending on parameter "Channel".      */
    /* Parameter "Channel" is used with masks because containing                */
    /* other bits reserved for other purpose.                                   */
    uint32_t shift_value = ((__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) - (10UL * ((Channel                             \
 80017a4:	68bb      	ldr	r3, [r7, #8]
 80017a6:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d104      	bne.n	80017b8 <LL_ADC_SetChannelSamplingTime+0x28>
 80017ae:	68bb      	ldr	r3, [r7, #8]
 80017b0:	0e9b      	lsrs	r3, r3, #26
 80017b2:	f003 021f 	and.w	r2, r3, #31
 80017b6:	e011      	b.n	80017dc <LL_ADC_SetChannelSamplingTime+0x4c>
 80017b8:	68bb      	ldr	r3, [r7, #8]
 80017ba:	61bb      	str	r3, [r7, #24]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017bc:	69bb      	ldr	r3, [r7, #24]
 80017be:	fa93 f3a3 	rbit	r3, r3
 80017c2:	617b      	str	r3, [r7, #20]
  return result;
 80017c4:	697b      	ldr	r3, [r7, #20]
 80017c6:	61fb      	str	r3, [r7, #28]
  if (value == 0U)
 80017c8:	69fb      	ldr	r3, [r7, #28]
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d101      	bne.n	80017d2 <LL_ADC_SetChannelSamplingTime+0x42>
    return 32U;
 80017ce:	2320      	movs	r3, #32
 80017d0:	e003      	b.n	80017da <LL_ADC_SetChannelSamplingTime+0x4a>
  return __builtin_clz(value);
 80017d2:	69fb      	ldr	r3, [r7, #28]
 80017d4:	fab3 f383 	clz	r3, r3
 80017d8:	b2db      	uxtb	r3, r3
 80017da:	461a      	mov	r2, r3
                                                                                 & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) \
                                                                                >> ADC_SMPRX_REGOFFSET_POS))) * 3UL);
 80017dc:	68bb      	ldr	r3, [r7, #8]
 80017de:	0e5b      	lsrs	r3, r3, #25
 80017e0:	f003 0101 	and.w	r1, r3, #1
    uint32_t shift_value = ((__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) - (10UL * ((Channel                             \
 80017e4:	460b      	mov	r3, r1
 80017e6:	009b      	lsls	r3, r3, #2
 80017e8:	440b      	add	r3, r1
 80017ea:	005b      	lsls	r3, r3, #1
 80017ec:	1ad2      	subs	r2, r2, r3
 80017ee:	4613      	mov	r3, r2
 80017f0:	005b      	lsls	r3, r3, #1
 80017f2:	4413      	add	r3, r2
 80017f4:	627b      	str	r3, [r7, #36]	; 0x24
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK)            \
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	3314      	adds	r3, #20
 80017fa:	461a      	mov	r2, r3
 80017fc:	68bb      	ldr	r3, [r7, #8]
 80017fe:	0e5b      	lsrs	r3, r3, #25
 8001800:	009b      	lsls	r3, r3, #2
 8001802:	f003 0304 	and.w	r3, r3, #4
 8001806:	4413      	add	r3, r2
 8001808:	623b      	str	r3, [r7, #32]
                                                             >> ADC_SMPRX_REGOFFSET_POS));

    MODIFY_REG(*preg, ADC_SMPR1_SMP0 << shift_value, SamplingTime   << shift_value);
 800180a:	6a3b      	ldr	r3, [r7, #32]
 800180c:	681a      	ldr	r2, [r3, #0]
 800180e:	2107      	movs	r1, #7
 8001810:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001812:	fa01 f303 	lsl.w	r3, r1, r3
 8001816:	43db      	mvns	r3, r3
 8001818:	401a      	ands	r2, r3
 800181a:	6879      	ldr	r1, [r7, #4]
 800181c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800181e:	fa01 f303 	lsl.w	r3, r1, r3
 8001822:	431a      	orrs	r2, r3
 8001824:	6a3b      	ldr	r3, [r7, #32]
 8001826:	601a      	str	r2, [r3, #0]
               ((Channel & ADC_CHANNEL_ID_BITFIELD_MASK) << ADC4_SMPR_SMPSEL0_BITOFFSET_POS),
               ((Channel & ADC_CHANNEL_ID_BITFIELD_MASK) << ADC4_SMPR_SMPSEL0_BITOFFSET_POS)
               & (SamplingTime & ADC4_SAMPLING_TIME_CH_MASK)
              );
  }
}
 8001828:	e00e      	b.n	8001848 <LL_ADC_SetChannelSamplingTime+0xb8>
    MODIFY_REG(ADCx->SMPR1,
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	695a      	ldr	r2, [r3, #20]
 800182e:	68bb      	ldr	r3, [r7, #8]
 8001830:	021b      	lsls	r3, r3, #8
 8001832:	43db      	mvns	r3, r3
 8001834:	401a      	ands	r2, r3
 8001836:	68bb      	ldr	r3, [r7, #8]
 8001838:	0219      	lsls	r1, r3, #8
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	400b      	ands	r3, r1
 800183e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001842:	431a      	orrs	r2, r3
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	615a      	str	r2, [r3, #20]
}
 8001848:	bf00      	nop
 800184a:	372c      	adds	r7, #44	; 0x2c
 800184c:	46bd      	mov	sp, r7
 800184e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001852:	4770      	bx	lr
 8001854:	46021000 	.word	0x46021000

08001858 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001858:	b480      	push	{r7}
 800185a:	b085      	sub	sp, #20
 800185c:	af00      	add	r7, sp, #0
 800185e:	60f8      	str	r0, [r7, #12]
 8001860:	60b9      	str	r1, [r7, #8]
 8001862:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 800186a:	68bb      	ldr	r3, [r7, #8]
 800186c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8001870:	43db      	mvns	r3, r3
 8001872:	401a      	ands	r2, r3
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	f003 0318 	and.w	r3, r3, #24
 800187a:	4908      	ldr	r1, [pc, #32]	; (800189c <LL_ADC_SetChannelSingleDiff+0x44>)
 800187c:	40d9      	lsrs	r1, r3
 800187e:	68bb      	ldr	r3, [r7, #8]
 8001880:	400b      	ands	r3, r1
 8001882:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8001886:	431a      	orrs	r2, r3
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff                              \
                                                                              & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800188e:	bf00      	nop
 8001890:	3714      	adds	r7, #20
 8001892:	46bd      	mov	sp, r7
 8001894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001898:	4770      	bx	lr
 800189a:	bf00      	nop
 800189c:	000fffff 	.word	0x000fffff

080018a0 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80018a0:	b480      	push	{r7}
 80018a2:	b083      	sub	sp, #12
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	689b      	ldr	r3, [r3, #8]
 80018ac:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 80018b0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80018b4:	687a      	ldr	r2, [r7, #4]
 80018b6:	6093      	str	r3, [r2, #8]
}
 80018b8:	bf00      	nop
 80018ba:	370c      	adds	r7, #12
 80018bc:	46bd      	mov	sp, r7
 80018be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c2:	4770      	bx	lr

080018c4 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 80018c4:	b480      	push	{r7}
 80018c6:	b083      	sub	sp, #12
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	689b      	ldr	r3, [r3, #8]
 80018d0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80018d4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80018d8:	d101      	bne.n	80018de <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80018da:	2301      	movs	r3, #1
 80018dc:	e000      	b.n	80018e0 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80018de:	2300      	movs	r3, #0
}
 80018e0:	4618      	mov	r0, r3
 80018e2:	370c      	adds	r7, #12
 80018e4:	46bd      	mov	sp, r7
 80018e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ea:	4770      	bx	lr

080018ec <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80018ec:	b480      	push	{r7}
 80018ee:	b083      	sub	sp, #12
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR, ADC_CR_BITS_PROPERTY_RS, ADC_CR_ADVREGEN);
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	689b      	ldr	r3, [r3, #8]
 80018f8:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80018fc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001900:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	609a      	str	r2, [r3, #8]
}
 8001908:	bf00      	nop
 800190a:	370c      	adds	r7, #12
 800190c:	46bd      	mov	sp, r7
 800190e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001912:	4770      	bx	lr

08001914 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001914:	b480      	push	{r7}
 8001916:	b083      	sub	sp, #12
 8001918:	af00      	add	r7, sp, #0
 800191a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	689b      	ldr	r3, [r3, #8]
 8001920:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001924:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001928:	d101      	bne.n	800192e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800192a:	2301      	movs	r3, #1
 800192c:	e000      	b.n	8001930 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800192e:	2300      	movs	r3, #0
}
 8001930:	4618      	mov	r0, r3
 8001932:	370c      	adds	r7, #12
 8001934:	46bd      	mov	sp, r7
 8001936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193a:	4770      	bx	lr

0800193c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 800193c:	b480      	push	{r7}
 800193e:	b083      	sub	sp, #12
 8001940:	af00      	add	r7, sp, #0
 8001942:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	689b      	ldr	r3, [r3, #8]
 8001948:	f003 0301 	and.w	r3, r3, #1
 800194c:	2b01      	cmp	r3, #1
 800194e:	d101      	bne.n	8001954 <LL_ADC_IsEnabled+0x18>
 8001950:	2301      	movs	r3, #1
 8001952:	e000      	b.n	8001956 <LL_ADC_IsEnabled+0x1a>
 8001954:	2300      	movs	r3, #0
}
 8001956:	4618      	mov	r0, r3
 8001958:	370c      	adds	r7, #12
 800195a:	46bd      	mov	sp, r7
 800195c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001960:	4770      	bx	lr

08001962 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001962:	b480      	push	{r7}
 8001964:	b083      	sub	sp, #12
 8001966:	af00      	add	r7, sp, #0
 8001968:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	689b      	ldr	r3, [r3, #8]
 800196e:	f003 0304 	and.w	r3, r3, #4
 8001972:	2b04      	cmp	r3, #4
 8001974:	d101      	bne.n	800197a <LL_ADC_REG_IsConversionOngoing+0x18>
 8001976:	2301      	movs	r3, #1
 8001978:	e000      	b.n	800197c <LL_ADC_REG_IsConversionOngoing+0x1a>
 800197a:	2300      	movs	r3, #0
}
 800197c:	4618      	mov	r0, r3
 800197e:	370c      	adds	r7, #12
 8001980:	46bd      	mov	sp, r7
 8001982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001986:	4770      	bx	lr

08001988 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001988:	b480      	push	{r7}
 800198a:	b083      	sub	sp, #12
 800198c:	af00      	add	r7, sp, #0
 800198e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	689b      	ldr	r3, [r3, #8]
 8001994:	f003 0308 	and.w	r3, r3, #8
 8001998:	2b08      	cmp	r3, #8
 800199a:	d101      	bne.n	80019a0 <LL_ADC_INJ_IsConversionOngoing+0x18>
 800199c:	2301      	movs	r3, #1
 800199e:	e000      	b.n	80019a2 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80019a0:	2300      	movs	r3, #0
}
 80019a2:	4618      	mov	r0, r3
 80019a4:	370c      	adds	r7, #12
 80019a6:	46bd      	mov	sp, r7
 80019a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ac:	4770      	bx	lr
	...

080019b0 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	b08a      	sub	sp, #40	; 0x28
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80019b8:	2300      	movs	r3, #0
 80019ba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t tmpCFGR1 = 0UL;
 80019be:	2300      	movs	r3, #0
 80019c0:	623b      	str	r3, [r7, #32]
  uint32_t tmpCFGR2 = 0UL;
 80019c2:	2300      	movs	r3, #0
 80019c4:	61fb      	str	r3, [r7, #28]
  __IO uint32_t wait_loop_index;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d101      	bne.n	80019d0 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 80019cc:	2301      	movs	r3, #1
 80019ce:	e2b3      	b.n	8001f38 <HAL_ADC_Init+0x588>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	691b      	ldr	r3, [r3, #16]
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d003      	beq.n	80019e0 <HAL_ADC_Init+0x30>
  {
    assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DiscontinuousConvMode));
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	4a8b      	ldr	r2, [pc, #556]	; (8001c0c <HAL_ADC_Init+0x25c>)
 80019de:	4293      	cmp	r3, r2
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d109      	bne.n	80019fc <HAL_ADC_Init+0x4c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80019e8:	6878      	ldr	r0, [r7, #4]
 80019ea:	f7ff f931 	bl	8000c50 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	2200      	movs	r2, #0
 80019f2:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	2200      	movs	r2, #0
 80019f8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	4618      	mov	r0, r3
 8001a02:	f7ff ff5f 	bl	80018c4 <LL_ADC_IsDeepPowerDownEnabled>
 8001a06:	4603      	mov	r3, r0
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d004      	beq.n	8001a16 <HAL_ADC_Init+0x66>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	4618      	mov	r0, r3
 8001a12:	f7ff ff45 	bl	80018a0 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	f7ff ff7a 	bl	8001914 <LL_ADC_IsInternalRegulatorEnabled>
 8001a20:	4603      	mov	r3, r0
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d115      	bne.n	8001a52 <HAL_ADC_Init+0xa2>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	4618      	mov	r0, r3
 8001a2c:	f7ff ff5e 	bl	80018ec <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001a30:	4b77      	ldr	r3, [pc, #476]	; (8001c10 <HAL_ADC_Init+0x260>)
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	099b      	lsrs	r3, r3, #6
 8001a36:	4a77      	ldr	r2, [pc, #476]	; (8001c14 <HAL_ADC_Init+0x264>)
 8001a38:	fba2 2303 	umull	r2, r3, r2, r3
 8001a3c:	099b      	lsrs	r3, r3, #6
 8001a3e:	3301      	adds	r3, #1
 8001a40:	005b      	lsls	r3, r3, #1
 8001a42:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001a44:	e002      	b.n	8001a4c <HAL_ADC_Init+0x9c>
    {
      wait_loop_index--;
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	3b01      	subs	r3, #1
 8001a4a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d1f9      	bne.n	8001a46 <HAL_ADC_Init+0x96>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	4618      	mov	r0, r3
 8001a58:	f7ff ff5c 	bl	8001914 <LL_ADC_IsInternalRegulatorEnabled>
 8001a5c:	4603      	mov	r3, r0
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d10e      	bne.n	8001a80 <HAL_ADC_Init+0xd0>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001a66:	f043 0210 	orr.w	r2, r3, #16
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	679a      	str	r2, [r3, #120]	; 0x78

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001a72:	f043 0201 	orr.w	r2, r3, #1
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	67da      	str	r2, [r3, #124]	; 0x7c

    tmp_hal_status = HAL_ERROR;
 8001a7a:	2301      	movs	r3, #1
 8001a7c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	4618      	mov	r0, r3
 8001a86:	f7ff ff6c 	bl	8001962 <LL_ADC_REG_IsConversionOngoing>
 8001a8a:	61b8      	str	r0, [r7, #24]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001a90:	f003 0310 	and.w	r3, r3, #16
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	f040 8244 	bne.w	8001f22 <HAL_ADC_Init+0x572>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001a9a:	69bb      	ldr	r3, [r7, #24]
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	f040 8240 	bne.w	8001f22 <HAL_ADC_Init+0x572>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001aa6:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001aaa:	f043 0202 	orr.w	r2, r3, #2
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	679a      	str	r2, [r3, #120]	; 0x78
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	f7ff ff40 	bl	800193c <LL_ADC_IsEnabled>
 8001abc:	4603      	mov	r3, r0
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d140      	bne.n	8001b44 <HAL_ADC_Init+0x194>
    {
      if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	4a51      	ldr	r2, [pc, #324]	; (8001c0c <HAL_ADC_Init+0x25c>)
 8001ac8:	4293      	cmp	r3, r2
 8001aca:	d028      	beq.n	8001b1e <HAL_ADC_Init+0x16e>
      {
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	4a51      	ldr	r2, [pc, #324]	; (8001c18 <HAL_ADC_Init+0x268>)
 8001ad2:	4293      	cmp	r3, r2
 8001ad4:	d109      	bne.n	8001aea <HAL_ADC_Init+0x13a>
 8001ad6:	4850      	ldr	r0, [pc, #320]	; (8001c18 <HAL_ADC_Init+0x268>)
 8001ad8:	f7ff ff30 	bl	800193c <LL_ADC_IsEnabled>
 8001adc:	4603      	mov	r3, r0
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	bf0c      	ite	eq
 8001ae2:	2301      	moveq	r3, #1
 8001ae4:	2300      	movne	r3, #0
 8001ae6:	b2db      	uxtb	r3, r3
 8001ae8:	e008      	b.n	8001afc <HAL_ADC_Init+0x14c>
 8001aea:	4848      	ldr	r0, [pc, #288]	; (8001c0c <HAL_ADC_Init+0x25c>)
 8001aec:	f7ff ff26 	bl	800193c <LL_ADC_IsEnabled>
 8001af0:	4603      	mov	r3, r0
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	bf0c      	ite	eq
 8001af6:	2301      	moveq	r3, #1
 8001af8:	2300      	movne	r3, #0
 8001afa:	b2db      	uxtb	r3, r3
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d021      	beq.n	8001b44 <HAL_ADC_Init+0x194>
          /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
          /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
          /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
          /*     (set into HAL_ADC_ConfigChannel() or                             */
          /*     HAL_ADCEx_InjectedConfigChannel() )                              */
          LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	4a44      	ldr	r2, [pc, #272]	; (8001c18 <HAL_ADC_Init+0x268>)
 8001b06:	4293      	cmp	r3, r2
 8001b08:	d101      	bne.n	8001b0e <HAL_ADC_Init+0x15e>
 8001b0a:	4a44      	ldr	r2, [pc, #272]	; (8001c1c <HAL_ADC_Init+0x26c>)
 8001b0c:	e000      	b.n	8001b10 <HAL_ADC_Init+0x160>
 8001b0e:	4a44      	ldr	r2, [pc, #272]	; (8001c20 <HAL_ADC_Init+0x270>)
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	685b      	ldr	r3, [r3, #4]
 8001b14:	4619      	mov	r1, r3
 8001b16:	4610      	mov	r0, r2
 8001b18:	f7ff fc70 	bl	80013fc <LL_ADC_SetCommonClock>
 8001b1c:	e012      	b.n	8001b44 <HAL_ADC_Init+0x194>
        /* parameters):                                                         */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() )                              */

        /* Configuration of ADC resolution                                      */
        LL_ADC_SetResolution(hadc->Instance, hadc->Init.Resolution);
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681a      	ldr	r2, [r3, #0]
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	689b      	ldr	r3, [r3, #8]
 8001b26:	4619      	mov	r1, r3
 8001b28:	4610      	mov	r0, r2
 8001b2a:	f7ff fc9b 	bl	8001464 <LL_ADC_SetResolution>

        /* Configuration of ADC clock mode: clock source AHB or HSI with        */
        /* selectable prescaler.                                                */
        MODIFY_REG(ADC4_COMMON->CCR,
 8001b2e:	4b3c      	ldr	r3, [pc, #240]	; (8001c20 <HAL_ADC_Init+0x270>)
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	f423 1270 	bic.w	r2, r3, #3932160	; 0x3c0000
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	685b      	ldr	r3, [r3, #4]
 8001b3a:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8001b3e:	4938      	ldr	r1, [pc, #224]	; (8001c20 <HAL_ADC_Init+0x270>)
 8001b40:	4313      	orrs	r3, r2
 8001b42:	600b      	str	r3, [r1, #0]
                   ADC_CCR_PRESC,
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	4a30      	ldr	r2, [pc, #192]	; (8001c0c <HAL_ADC_Init+0x25c>)
 8001b4a:	4293      	cmp	r3, r2
 8001b4c:	d010      	beq.n	8001b70 <HAL_ADC_Init+0x1c0>
      /*  - overrun                                  Init.Overrun               */
      /*  - discontinuous mode                       Init.DiscontinuousConvMode */
      /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */

      tmpCFGR1  = (/*ADC_CFGR_AUTODELAY((uint32_t)hadc->Init.LowPowerAutoWait)             |*/
                    ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001b54:	035a      	lsls	r2, r3, #13
                    hadc->Init.Overrun                                                    |
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                    ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8001b5a:	431a      	orrs	r2, r3
                    hadc->Init.Resolution                                                 |
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	689b      	ldr	r3, [r3, #8]
                    hadc->Init.Overrun                                                    |
 8001b60:	431a      	orrs	r2, r3
                    ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8001b68:	041b      	lsls	r3, r3, #16
      tmpCFGR1  = (/*ADC_CFGR_AUTODELAY((uint32_t)hadc->Init.LowPowerAutoWait)             |*/
 8001b6a:	4313      	orrs	r3, r2
 8001b6c:	623b      	str	r3, [r7, #32]
 8001b6e:	e030      	b.n	8001bd2 <HAL_ADC_Init+0x222>
      /*  - external trigger polarity                                           */
      /*  - data alignment                                                      */
      /*  - resolution                                                          */
      /*  - scan direction                                                      */
      /*  - DMA continuous request                                              */
      tmpCFGR1 |= (ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	7f1b      	ldrb	r3, [r3, #28]
 8001b74:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001b7c:	035b      	lsls	r3, r3, #13
      tmpCFGR1 |= (ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001b7e:	4313      	orrs	r3, r2
                   ADC_CFGR_OVERRUN(hadc->Init.Overrun)                            |
 8001b80:	687a      	ldr	r2, [r7, #4]
 8001b82:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001b84:	2a00      	cmp	r2, #0
 8001b86:	d002      	beq.n	8001b8e <HAL_ADC_Init+0x1de>
 8001b88:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001b8c:	e000      	b.n	8001b90 <HAL_ADC_Init+0x1e0>
 8001b8e:	2200      	movs	r2, #0
                   ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8001b90:	431a      	orrs	r2, r3
                   hadc->Init.DataAlign                                            |
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	695b      	ldr	r3, [r3, #20]
                   ADC_CFGR_OVERRUN(hadc->Init.Overrun)                            |
 8001b96:	431a      	orrs	r2, r3
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                      |
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	691b      	ldr	r3, [r3, #16]
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	da04      	bge.n	8001baa <HAL_ADC_Init+0x1fa>
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	691b      	ldr	r3, [r3, #16]
 8001ba4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001ba8:	e001      	b.n	8001bae <HAL_ADC_Init+0x1fe>
 8001baa:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
                   hadc->Init.DataAlign                                            |
 8001bae:	431a      	orrs	r2, r3
                   ADC_CFGR_DMACONTREQ(hadc, (uint32_t)hadc->Init.DMAContinuousRequests));
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	4918      	ldr	r1, [pc, #96]	; (8001c18 <HAL_ADC_Init+0x268>)
 8001bb6:	428b      	cmp	r3, r1
 8001bb8:	d103      	bne.n	8001bc2 <HAL_ADC_Init+0x212>
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001bc0:	e003      	b.n	8001bca <HAL_ADC_Init+0x21a>
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001bc8:	005b      	lsls	r3, r3, #1
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                      |
 8001bca:	4313      	orrs	r3, r2
      tmpCFGR1 |= (ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001bcc:	6a3a      	ldr	r2, [r7, #32]
 8001bce:	4313      	orrs	r3, r2
 8001bd0:	623b      	str	r3, [r7, #32]
    }

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8001bd8:	2b01      	cmp	r3, #1
 8001bda:	d12f      	bne.n	8001c3c <HAL_ADC_Init+0x28c>
    {
      if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	4a0a      	ldr	r2, [pc, #40]	; (8001c0c <HAL_ADC_Init+0x25c>)
 8001be2:	4293      	cmp	r3, r2
 8001be4:	d007      	beq.n	8001bf6 <HAL_ADC_Init+0x246>
      {
        tmpCFGR1 |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bea:	3b01      	subs	r3, #1
 8001bec:	045b      	lsls	r3, r3, #17
 8001bee:	6a3a      	ldr	r2, [r7, #32]
 8001bf0:	4313      	orrs	r3, r2
 8001bf2:	623b      	str	r3, [r7, #32]
 8001bf4:	e022      	b.n	8001c3c <HAL_ADC_Init+0x28c>
      }
      else
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d111      	bne.n	8001c24 <HAL_ADC_Init+0x274>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8001c00:	6a3b      	ldr	r3, [r7, #32]
 8001c02:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c06:	623b      	str	r3, [r7, #32]
 8001c08:	e018      	b.n	8001c3c <HAL_ADC_Init+0x28c>
 8001c0a:	bf00      	nop
 8001c0c:	46021000 	.word	0x46021000
 8001c10:	20000000 	.word	0x20000000
 8001c14:	053e2d63 	.word	0x053e2d63
 8001c18:	42028000 	.word	0x42028000
 8001c1c:	42028308 	.word	0x42028308
 8001c20:	46021308 	.word	0x46021308
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001c28:	f043 0220 	orr.w	r2, r3, #32
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	679a      	str	r2, [r3, #120]	; 0x78

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001c34:	f043 0201 	orr.w	r2, r3, #1
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	67da      	str	r2, [r3, #124]	; 0x7c
        }
      }
    }

    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	4a92      	ldr	r2, [pc, #584]	; (8001e8c <HAL_ADC_Init+0x4dc>)
 8001c42:	4293      	cmp	r3, r2
 8001c44:	d018      	beq.n	8001c78 <HAL_ADC_Init+0x2c8>
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d009      	beq.n	8001c62 <HAL_ADC_Init+0x2b2>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) | hadc->Init.ExternalTrigConvEdge);
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c52:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c5a:	4313      	orrs	r3, r2
 8001c5c:	6a3a      	ldr	r2, [r7, #32]
 8001c5e:	4313      	orrs	r3, r2
 8001c60:	623b      	str	r3, [r7, #32]
      }
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR1, ADC_CFGR_FIELDS_1, tmpCFGR1);
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	68da      	ldr	r2, [r3, #12]
 8001c68:	4b89      	ldr	r3, [pc, #548]	; (8001e90 <HAL_ADC_Init+0x4e0>)
 8001c6a:	4013      	ands	r3, r2
 8001c6c:	687a      	ldr	r2, [r7, #4]
 8001c6e:	6812      	ldr	r2, [r2, #0]
 8001c70:	6a39      	ldr	r1, [r7, #32]
 8001c72:	430b      	orrs	r3, r1
 8001c74:	60d3      	str	r3, [r2, #12]
 8001c76:	e031      	b.n	8001cdc <HAL_ADC_Init+0x32c>
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d009      	beq.n	8001c94 <HAL_ADC_Init+0x2e4>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC4_CFGR1_EXTSEL) | hadc->Init.ExternalTrigConvEdge);
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c84:	f403 72e0 	and.w	r2, r3, #448	; 0x1c0
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c8c:	4313      	orrs	r3, r2
 8001c8e:	6a3a      	ldr	r2, [r7, #32]
 8001c90:	4313      	orrs	r3, r2
 8001c92:	623b      	str	r3, [r7, #32]
      }
      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	68da      	ldr	r2, [r3, #12]
 8001c9a:	4b7e      	ldr	r3, [pc, #504]	; (8001e94 <HAL_ADC_Init+0x4e4>)
 8001c9c:	4013      	ands	r3, r2
 8001c9e:	687a      	ldr	r2, [r7, #4]
 8001ca0:	6812      	ldr	r2, [r2, #0]
 8001ca2:	6a39      	ldr	r1, [r7, #32]
 8001ca4:	430b      	orrs	r3, r1
 8001ca6:	60d3      	str	r3, [r2, #12]
                 ADC4_CFGR1_ALIGN     |
                 ADC4_CFGR1_SCANDIR   |
                 ADC4_CFGR1_DMACFG,
                 tmpCFGR1);

      if (hadc->Init.LowPowerAutoPowerOff != ADC_LOW_POWER_NONE)
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	6a1b      	ldr	r3, [r3, #32]
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d008      	beq.n	8001cc2 <HAL_ADC_Init+0x312>
      {
        SET_BIT(hadc->Instance->PWRR, hadc->Init.LowPowerAutoPowerOff);
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	6a1a      	ldr	r2, [r3, #32]
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	430a      	orrs	r2, r1
 8001cc0:	645a      	str	r2, [r3, #68]	; 0x44
      }

      if (hadc->Init.VrefProtection != ADC_VREF_PPROT_NONE)
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d008      	beq.n	8001cdc <HAL_ADC_Init+0x32c>
      {
        SET_BIT(hadc->Instance->PWRR, hadc->Init.VrefProtection);
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	430a      	orrs	r2, r1
 8001cda:	645a      	str	r2, [r3, #68]	; 0x44
      }

    }

    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	4a6a      	ldr	r2, [pc, #424]	; (8001e8c <HAL_ADC_Init+0x4dc>)
 8001ce2:	4293      	cmp	r3, r2
 8001ce4:	f000 8093 	beq.w	8001e0e <HAL_ADC_Init+0x45e>
      /* Parameters that can be updated when ADC is disabled or enabled without */
      /* conversion on going on regular and injected groups:                    */
      /*  - Conversion data management      Init.ConversionDataManagement       */
      /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
      /*  - Oversampling parameters         Init.Oversampling                   */
      tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	4618      	mov	r0, r3
 8001cee:	f7ff fe38 	bl	8001962 <LL_ADC_REG_IsConversionOngoing>
 8001cf2:	6178      	str	r0, [r7, #20]
      tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	4618      	mov	r0, r3
 8001cfa:	f7ff fe45 	bl	8001988 <LL_ADC_INJ_IsConversionOngoing>
 8001cfe:	6138      	str	r0, [r7, #16]
      if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001d00:	697b      	ldr	r3, [r7, #20]
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d161      	bne.n	8001dca <HAL_ADC_Init+0x41a>
          && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001d06:	693b      	ldr	r3, [r7, #16]
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d15e      	bne.n	8001dca <HAL_ADC_Init+0x41a>
         )
      {
        tmpCFGR1 = (ADC_CFGR_AUTODELAY((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	7f1b      	ldrb	r3, [r3, #28]
 8001d10:	039a      	lsls	r2, r3, #14
                    ADC_CFGR_DMACONTREQ(hadc, (uint32_t)hadc->Init.ConversionDataManagement));
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	4960      	ldr	r1, [pc, #384]	; (8001e98 <HAL_ADC_Init+0x4e8>)
 8001d18:	428b      	cmp	r3, r1
 8001d1a:	d102      	bne.n	8001d22 <HAL_ADC_Init+0x372>
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d20:	e002      	b.n	8001d28 <HAL_ADC_Init+0x378>
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d26:	005b      	lsls	r3, r3, #1
        tmpCFGR1 = (ADC_CFGR_AUTODELAY((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001d28:	4313      	orrs	r3, r2
 8001d2a:	623b      	str	r3, [r7, #32]

        MODIFY_REG(hadc->Instance->CFGR1, ADC_CFGR1_AUTDLY | ADC_CFGR1_DMNGT, tmpCFGR1);
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	68db      	ldr	r3, [r3, #12]
 8001d32:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001d36:	f023 0303 	bic.w	r3, r3, #3
 8001d3a:	687a      	ldr	r2, [r7, #4]
 8001d3c:	6812      	ldr	r2, [r2, #0]
 8001d3e:	6a39      	ldr	r1, [r7, #32]
 8001d40:	430b      	orrs	r3, r1
 8001d42:	60d3      	str	r3, [r2, #12]
        if (hadc->Init.GainCompensation != 0UL)
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	68db      	ldr	r3, [r3, #12]
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d007      	beq.n	8001d5c <HAL_ADC_Init+0x3ac>
        {
          LL_ADC_SetGainCompensation(hadc->Instance, hadc->Init.GainCompensation);
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681a      	ldr	r2, [r3, #0]
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	68db      	ldr	r3, [r3, #12]
 8001d54:	4619      	mov	r1, r3
 8001d56:	4610      	mov	r0, r2
 8001d58:	f7ff fc2c 	bl	80015b4 <LL_ADC_SetGainCompensation>
        }

        if (hadc->Init.OversamplingMode == ENABLE)
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8001d62:	2b01      	cmp	r3, #1
 8001d64:	d11e      	bne.n	8001da4 <HAL_ADC_Init+0x3f4>
          assert_param(IS_ADC_OVERSAMPLING_RATIO(hadc->Init.Oversampling.Ratio));
          assert_param(IS_ADC12_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
          assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
          assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

          if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d6a:	2b00      	cmp	r3, #0
          /*  - Right bit shift                                                  */
          /*  - Left bit shift                                                   */
          /*  - Triggered mode                                                   */
          /*  - Oversampling mode (continued/resumed)                            */
          /*  - trigger frequency mode                                           */
          MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	691a      	ldr	r2, [r3, #16]
 8001d72:	4b4a      	ldr	r3, [pc, #296]	; (8001e9c <HAL_ADC_Init+0x4ec>)
 8001d74:	4013      	ands	r3, r2
 8001d76:	687a      	ldr	r2, [r7, #4]
 8001d78:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8001d7a:	0411      	lsls	r1, r2, #16
 8001d7c:	687a      	ldr	r2, [r7, #4]
 8001d7e:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001d80:	4311      	orrs	r1, r2
 8001d82:	687a      	ldr	r2, [r7, #4]
 8001d84:	6e12      	ldr	r2, [r2, #96]	; 0x60
 8001d86:	4311      	orrs	r1, r2
 8001d88:	687a      	ldr	r2, [r7, #4]
 8001d8a:	6e52      	ldr	r2, [r2, #100]	; 0x64
 8001d8c:	4311      	orrs	r1, r2
 8001d8e:	687a      	ldr	r2, [r7, #4]
 8001d90:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8001d92:	0892      	lsrs	r2, r2, #2
 8001d94:	430a      	orrs	r2, r1
 8001d96:	431a      	orrs	r2, r3
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	f042 0201 	orr.w	r2, r2, #1
 8001da0:	611a      	str	r2, [r3, #16]
 8001da2:	e007      	b.n	8001db4 <HAL_ADC_Init+0x404>
                     (hadc->Init.TriggerFrequencyMode >> 2UL));
        }
        else
        {
          /* Disable ADC oversampling scope on ADC group regular */
          CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	691a      	ldr	r2, [r3, #16]
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	f022 0201 	bic.w	r2, r2, #1
 8001db2:	611a      	str	r2, [r3, #16]
        }

        /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	691b      	ldr	r3, [r3, #16]
 8001dba:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	430a      	orrs	r2, r1
 8001dc8:	611a      	str	r2, [r3, #16]
      /*   Parameter "NbrOfConversion" is discarded.                            */
      /*   Note: Scan mode is not present by hardware on this device, but       */
      /*   emulated by software for alignment over all STM32 devices.           */
      /* - if scan mode is enabled, regular channels sequence length is set to  */
      /*   parameter "NbrOfConversion".                                         */
      if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	691b      	ldr	r3, [r3, #16]
 8001dce:	2b01      	cmp	r3, #1
 8001dd0:	d10c      	bne.n	8001dec <HAL_ADC_Init+0x43c>
      {
        /* Set number of ranks in regular group sequencer */
        MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dd8:	f023 010f 	bic.w	r1, r3, #15
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001de0:	1e5a      	subs	r2, r3, #1
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	430a      	orrs	r2, r1
 8001de8:	631a      	str	r2, [r3, #48]	; 0x30
 8001dea:	e007      	b.n	8001dfc <HAL_ADC_Init+0x44c>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	f022 020f 	bic.w	r2, r2, #15
 8001dfa:	631a      	str	r2, [r3, #48]	; 0x30
      }

      /* Initialize the ADC state */
      /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001e00:	f023 0303 	bic.w	r3, r3, #3
 8001e04:	f043 0201 	orr.w	r2, r3, #1
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	679a      	str	r2, [r3, #120]	; 0x78
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8001e0c:	e092      	b.n	8001f34 <HAL_ADC_Init+0x584>

    }
    else
    {
      if (hadc->Init.OversamplingMode == ENABLE)
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8001e14:	2b01      	cmp	r3, #1
 8001e16:	d111      	bne.n	8001e3c <HAL_ADC_Init+0x48c>
        /*  - oversampling enable                                                 */
        /*  - oversampling ratio                                                  */
        /*  - oversampling shift                                                  */
        /*  - oversampling discontinuous mode (triggered mode)                    */
        /*  - trigger frequency mode                                              */
        tmpCFGR2 |= (hadc->Init.Oversampling.Ratio         |
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
                     hadc->Init.Oversampling.RightBitShift |
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
        tmpCFGR2 |= (hadc->Init.Oversampling.Ratio         |
 8001e20:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.TriggeredMode |
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	6e1b      	ldr	r3, [r3, #96]	; 0x60
                     hadc->Init.Oversampling.RightBitShift |
 8001e26:	431a      	orrs	r2, r3
                     hadc->Init.TriggerFrequencyMode
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
                     hadc->Init.Oversampling.TriggeredMode |
 8001e2c:	4313      	orrs	r3, r2
        tmpCFGR2 |= (hadc->Init.Oversampling.Ratio         |
 8001e2e:	69fa      	ldr	r2, [r7, #28]
 8001e30:	4313      	orrs	r3, r2
 8001e32:	61fb      	str	r3, [r7, #28]
                    );

        SET_BIT(tmpCFGR2, ADC_CFGR2_ROVSE);
 8001e34:	69fb      	ldr	r3, [r7, #28]
 8001e36:	f043 0301 	orr.w	r3, r3, #1
 8001e3a:	61fb      	str	r3, [r7, #28]
      }
      MODIFY_REG(hadc->Instance->CFGR2,
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	691a      	ldr	r2, [r3, #16]
 8001e42:	4b17      	ldr	r3, [pc, #92]	; (8001ea0 <HAL_ADC_Init+0x4f0>)
 8001e44:	4013      	ands	r3, r2
 8001e46:	687a      	ldr	r2, [r7, #4]
 8001e48:	6812      	ldr	r2, [r2, #0]
 8001e4a:	69f9      	ldr	r1, [r7, #28]
 8001e4c:	430b      	orrs	r3, r1
 8001e4e:	6113      	str	r3, [r2, #16]
                 ADC_CFGR2_LFTRIG | ADC_CFGR2_ROVSE | ADC4_CFGR2_OVSR | ADC_CFGR2_OVSS | ADC_CFGR2_TROVS,
                 tmpCFGR2);


      /* Channel sampling time configuration */
      LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1,                   \
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	6818      	ldr	r0, [r3, #0]
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001e58:	461a      	mov	r2, r3
 8001e5a:	2100      	movs	r1, #0
 8001e5c:	f7ff fbcd 	bl	80015fa <LL_ADC_SetSamplingTimeCommonChannels>
                                           hadc->Init.SamplingTimeCommon1);
      LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2,                   \
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	6818      	ldr	r0, [r3, #0]
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e68:	461a      	mov	r2, r3
 8001e6a:	f06f 01fb 	mvn.w	r1, #251	; 0xfb
 8001e6e:	f7ff fbc4 	bl	80015fa <LL_ADC_SetSamplingTimeCommonChannels>
      /*   emulated by software for alignment over all STM32 devices.           */
      /* - if scan mode is enabled, regular channels sequence length is set to  */
      /*   parameter "NbrOfConversion".                                         */
      /*   Channels must be configured into each rank using function            */
      /*   "HAL_ADC_ConfigChannel()".                                           */
      if (hadc->Init.ScanConvMode == ADC4_SCAN_DISABLE)
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	691b      	ldr	r3, [r3, #16]
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d114      	bne.n	8001ea4 <HAL_ADC_Init+0x4f4>
      {
        /* Set sequencer scan length by clearing ranks above rank 1             */
        /* and do not modify rank 1 value.                                      */
        SET_BIT(hadc->Instance->CHSELR, ADC_CHSELR_SQ2_TO_SQ8);
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	f062 020f 	orn	r2, r2, #15
 8001e88:	629a      	str	r2, [r3, #40]	; 0x28
 8001e8a:	e024      	b.n	8001ed6 <HAL_ADC_Init+0x526>
 8001e8c:	46021000 	.word	0x46021000
 8001e90:	fff0c013 	.word	0xfff0c013
 8001e94:	ffde800d 	.word	0xffde800d
 8001e98:	42028000 	.word	0x42028000
 8001e9c:	fc00f81e 	.word	0xfc00f81e
 8001ea0:	f7fffc02 	.word	0xf7fffc02

      }
      else if (hadc->Init.ScanConvMode == ADC4_SCAN_ENABLE)
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	691b      	ldr	r3, [r3, #16]
 8001ea8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001eac:	d113      	bne.n	8001ed6 <HAL_ADC_Init+0x526>
        /*          therefore after the first call of "HAL_ADC_Init()",        */
        /*          each rank corresponding to parameter "NbrOfConversion"    */
        /*          must be set using "HAL_ADC_ConfigChannel()".              */
        /*  - Set sequencer scan length by clearing ranks above maximum rank  */
        /*    and do not modify other ranks value.                            */
        MODIFY_REG(hadc->Instance->CHSELR,
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001eb8:	3b01      	subs	r3, #1
 8001eba:	009b      	lsls	r3, r3, #2
 8001ebc:	f003 031c 	and.w	r3, r3, #28
 8001ec0:	f06f 020f 	mvn.w	r2, #15
 8001ec4:	fa02 f103 	lsl.w	r1, r2, r3
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	430a      	orrs	r2, r1
 8001ed4:	629a      	str	r2, [r3, #40]	; 0x28
      /* Check back that ADC registers have effectively been configured to      */
      /* ensure of no potential problem of ADC core IP clocking.                */
      /* Check through register CFGR1 (excluding analog watchdog configuration: */
      /* set into separate dedicated function, and bits of ADC resolution set   */
      /* out of temporary variable 'tmpCFGR1').                                 */
      if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	68da      	ldr	r2, [r3, #12]
 8001edc:	4b18      	ldr	r3, [pc, #96]	; (8001f40 <HAL_ADC_Init+0x590>)
 8001ede:	4013      	ands	r3, r2
 8001ee0:	6a3a      	ldr	r2, [r7, #32]
 8001ee2:	429a      	cmp	r2, r3
 8001ee4:	d10b      	bne.n	8001efe <HAL_ADC_Init+0x54e>
          == tmpCFGR1)
      {
        /* Set ADC error code to none */
        ADC_CLEAR_ERRORCODE(hadc);
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	2200      	movs	r2, #0
 8001eea:	67da      	str	r2, [r3, #124]	; 0x7c

        /* Set the ADC state */
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001ef0:	f023 0303 	bic.w	r3, r3, #3
 8001ef4:	f043 0201 	orr.w	r2, r3, #1
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	679a      	str	r2, [r3, #120]	; 0x78
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8001efc:	e01a      	b.n	8001f34 <HAL_ADC_Init+0x584>
      }
      else
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_ERROR_INTERNAL);
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001f02:	f023 0312 	bic.w	r3, r3, #18
 8001f06:	f043 0210 	orr.w	r2, r3, #16
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	679a      	str	r2, [r3, #120]	; 0x78

        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001f12:	f043 0201 	orr.w	r2, r3, #1
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	67da      	str	r2, [r3, #124]	; 0x7c

        tmp_hal_status = HAL_ERROR;
 8001f1a:	2301      	movs	r3, #1
 8001f1c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8001f20:	e008      	b.n	8001f34 <HAL_ADC_Init+0x584>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001f26:	f043 0210 	orr.w	r2, r3, #16
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	679a      	str	r2, [r3, #120]	; 0x78

    tmp_hal_status = HAL_ERROR;
 8001f2e:	2301      	movs	r3, #1
 8001f30:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  return tmp_hal_status;
 8001f34:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8001f38:	4618      	mov	r0, r3
 8001f3a:	3728      	adds	r7, #40	; 0x28
 8001f3c:	46bd      	mov	sp, r7
 8001f3e:	bd80      	pop	{r7, pc}
 8001f40:	833ffff3 	.word	0x833ffff3

08001f44 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *pConfig)
{
 8001f44:	b580      	push	{r7, lr}
 8001f46:	b0bc      	sub	sp, #240	; 0xf0
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	6078      	str	r0, [r7, #4]
 8001f4c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001f4e:	2300      	movs	r3, #0
 8001f50:	f887 30ef 	strb.w	r3, [r7, #239]	; 0xef
  uint32_t tmp_offset_shifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8001f54:	2300      	movs	r3, #0
 8001f56:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_channel;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  if (hadc->Instance != ADC4)  /* ADC1 or ADC2 */
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	4aa8      	ldr	r2, [pc, #672]	; (8002200 <HAL_ADC_ConfigChannel+0x2bc>)
 8001f5e:	4293      	cmp	r3, r2
 8001f60:	d103      	bne.n	8001f6a <HAL_ADC_ConfigChannel+0x26>
  }
  else
  {
    assert_param(IS_ADC4_SAMPLE_TIME_COMMON(pConfig->SamplingTime));

    if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)          ||
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	691b      	ldr	r3, [r3, #16]
 8001f66:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000

      assert_param(IS_ADC4_REGULAR_RANK(pConfig->Rank));
    }
  }

  __HAL_LOCK(hadc);
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8001f70:	2b01      	cmp	r3, #1
 8001f72:	d102      	bne.n	8001f7a <HAL_ADC_ConfigChannel+0x36>
 8001f74:	2302      	movs	r3, #2
 8001f76:	f000 be6d 	b.w	8002c54 <HAL_ADC_ConfigChannel+0xd10>
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	2201      	movs	r2, #1
 8001f7e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	4618      	mov	r0, r3
 8001f88:	f7ff fceb 	bl	8001962 <LL_ADC_REG_IsConversionOngoing>
 8001f8c:	4603      	mov	r3, r0
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	f040 864d 	bne.w	8002c2e <HAL_ADC_ConfigChannel+0xcea>
  {
    if (hadc->Instance != ADC4)  /* ADC1 or ADC2 */
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	4a99      	ldr	r2, [pc, #612]	; (8002200 <HAL_ADC_ConfigChannel+0x2bc>)
 8001f9a:	4293      	cmp	r3, r2
 8001f9c:	f000 83ea 	beq.w	8002774 <HAL_ADC_ConfigChannel+0x830>
    {
      /* ADC channels preselection */
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel) & 0x1FUL));
 8001fa0:	683b      	ldr	r3, [r7, #0]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d108      	bne.n	8001fbe <HAL_ADC_ConfigChannel+0x7a>
 8001fac:	683b      	ldr	r3, [r7, #0]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	0e9b      	lsrs	r3, r3, #26
 8001fb2:	f003 031f 	and.w	r3, r3, #31
 8001fb6:	2201      	movs	r2, #1
 8001fb8:	fa02 f303 	lsl.w	r3, r2, r3
 8001fbc:	e01d      	b.n	8001ffa <HAL_ADC_ConfigChannel+0xb6>
 8001fbe:	683b      	ldr	r3, [r7, #0]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fc6:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001fca:	fa93 f3a3 	rbit	r3, r3
 8001fce:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  return result;
 8001fd2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001fd6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  if (value == 0U)
 8001fda:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d101      	bne.n	8001fe6 <HAL_ADC_ConfigChannel+0xa2>
    return 32U;
 8001fe2:	2320      	movs	r3, #32
 8001fe4:	e004      	b.n	8001ff0 <HAL_ADC_ConfigChannel+0xac>
  return __builtin_clz(value);
 8001fe6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8001fea:	fab3 f383 	clz	r3, r3
 8001fee:	b2db      	uxtb	r3, r3
 8001ff0:	f003 031f 	and.w	r3, r3, #31
 8001ff4:	2201      	movs	r2, #1
 8001ff6:	fa02 f303 	lsl.w	r3, r2, r3
 8001ffa:	687a      	ldr	r2, [r7, #4]
 8001ffc:	6812      	ldr	r2, [r2, #0]
 8001ffe:	69d1      	ldr	r1, [r2, #28]
 8002000:	687a      	ldr	r2, [r7, #4]
 8002002:	6812      	ldr	r2, [r2, #0]
 8002004:	430b      	orrs	r3, r1
 8002006:	61d3      	str	r3, [r2, #28]

      /* Set ADC group regular sequence: channel on the selected scan sequence rank */
      LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	6818      	ldr	r0, [r3, #0]
 800200c:	683b      	ldr	r3, [r7, #0]
 800200e:	6859      	ldr	r1, [r3, #4]
 8002010:	683b      	ldr	r3, [r7, #0]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	461a      	mov	r2, r3
 8002016:	f7ff fb0f 	bl	8001638 <LL_ADC_REG_SetSequencerRanks>
      /* Parameters update conditioned to ADC state:                              */
      /* Parameters that can be updated when ADC is disabled or enabled without   */
      /* conversion on going on regular group:                                    */
      /*  - Channel sampling time                                                 */
      /*  - Channel offset                                                        */
      tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	4618      	mov	r0, r3
 8002020:	f7ff fc9f 	bl	8001962 <LL_ADC_REG_IsConversionOngoing>
 8002024:	f8c7 00e0 	str.w	r0, [r7, #224]	; 0xe0
      tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	4618      	mov	r0, r3
 800202e:	f7ff fcab 	bl	8001988 <LL_ADC_INJ_IsConversionOngoing>
 8002032:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
      if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002036:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800203a:	2b00      	cmp	r3, #0
 800203c:	f040 81ed 	bne.w	800241a <HAL_ADC_ConfigChannel+0x4d6>
          && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002040:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002044:	2b00      	cmp	r3, #0
 8002046:	f040 81e8 	bne.w	800241a <HAL_ADC_ConfigChannel+0x4d6>
         )
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	6818      	ldr	r0, [r3, #0]
 800204e:	683b      	ldr	r3, [r7, #0]
 8002050:	6819      	ldr	r1, [r3, #0]
 8002052:	683b      	ldr	r3, [r7, #0]
 8002054:	689b      	ldr	r3, [r3, #8]
 8002056:	461a      	mov	r2, r3
 8002058:	f7ff fb9a 	bl	8001790 <LL_ADC_SetChannelSamplingTime>

        /* Configure the offset: offset enable/disable, channel, offset value */

        /* Shift the offset with respect to the selected ADC resolution. */
        /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
        tmp_offset_shifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 800205c:	683b      	ldr	r3, [r7, #0]
 800205e:	695a      	ldr	r2, [r3, #20]
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	68db      	ldr	r3, [r3, #12]
 8002066:	089b      	lsrs	r3, r3, #2
 8002068:	f003 0303 	and.w	r3, r3, #3
 800206c:	005b      	lsls	r3, r3, #1
 800206e:	fa02 f303 	lsl.w	r3, r2, r3
 8002072:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8

        if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002076:	683b      	ldr	r3, [r7, #0]
 8002078:	691b      	ldr	r3, [r3, #16]
 800207a:	2b04      	cmp	r3, #4
 800207c:	d046      	beq.n	800210c <HAL_ADC_ConfigChannel+0x1c8>
        {
          /* Set ADC selected offset number */
          LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmp_offset_shifted);
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	6818      	ldr	r0, [r3, #0]
 8002082:	683b      	ldr	r3, [r7, #0]
 8002084:	6919      	ldr	r1, [r3, #16]
 8002086:	683b      	ldr	r3, [r7, #0]
 8002088:	681a      	ldr	r2, [r3, #0]
 800208a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800208e:	f7ff fa09 	bl	80014a4 <LL_ADC_SetOffset>
          assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
          assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
          assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSignedSaturation));
          /* Set ADC selected offset sign */
          LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	6818      	ldr	r0, [r3, #0]
 8002096:	683b      	ldr	r3, [r7, #0]
 8002098:	6919      	ldr	r1, [r3, #16]
 800209a:	683b      	ldr	r3, [r7, #0]
 800209c:	69db      	ldr	r3, [r3, #28]
 800209e:	461a      	mov	r2, r3
 80020a0:	f7ff fa37 	bl	8001512 <LL_ADC_SetOffsetSign>

          /* Configure offset saturation */
          if (pConfig->OffsetSaturation == ENABLE)
 80020a4:	683b      	ldr	r3, [r7, #0]
 80020a6:	7e9b      	ldrb	r3, [r3, #26]
 80020a8:	2b01      	cmp	r3, #1
 80020aa:	d11e      	bne.n	80020ea <HAL_ADC_ConfigChannel+0x1a6>
          {
            /* Set ADC selected offset unsigned/signed saturation */
            LL_ADC_SetOffsetUnsignedSaturation(hadc->Instance, pConfig->OffsetNumber,
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	6818      	ldr	r0, [r3, #0]
 80020b0:	683b      	ldr	r3, [r7, #0]
 80020b2:	6919      	ldr	r1, [r3, #16]
                                               (pConfig->OffsetSignedSaturation == DISABLE)
 80020b4:	683b      	ldr	r3, [r7, #0]
 80020b6:	7e5b      	ldrb	r3, [r3, #25]
            LL_ADC_SetOffsetUnsignedSaturation(hadc->Instance, pConfig->OffsetNumber,
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d102      	bne.n	80020c2 <HAL_ADC_ConfigChannel+0x17e>
 80020bc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80020c0:	e000      	b.n	80020c4 <HAL_ADC_ConfigChannel+0x180>
 80020c2:	2300      	movs	r3, #0
 80020c4:	461a      	mov	r2, r3
 80020c6:	f7ff fa5a 	bl	800157e <LL_ADC_SetOffsetUnsignedSaturation>
                                               ? LL_ADC_OFFSET_UNSIGNED_SATURATION_ENABLE    \
                                               : LL_ADC_OFFSET_UNSIGNED_SATURATION_DISABLE);

            LL_ADC_SetOffsetSignedSaturation(hadc->Instance, pConfig->OffsetNumber,
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	6818      	ldr	r0, [r3, #0]
 80020ce:	683b      	ldr	r3, [r7, #0]
 80020d0:	6919      	ldr	r1, [r3, #16]
                                             (pConfig->OffsetSignedSaturation == ENABLE)
 80020d2:	683b      	ldr	r3, [r7, #0]
 80020d4:	7e5b      	ldrb	r3, [r3, #25]
            LL_ADC_SetOffsetSignedSaturation(hadc->Instance, pConfig->OffsetNumber,
 80020d6:	2b01      	cmp	r3, #1
 80020d8:	d102      	bne.n	80020e0 <HAL_ADC_ConfigChannel+0x19c>
 80020da:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80020de:	e000      	b.n	80020e2 <HAL_ADC_ConfigChannel+0x19e>
 80020e0:	2300      	movs	r3, #0
 80020e2:	461a      	mov	r2, r3
 80020e4:	f7ff fa30 	bl	8001548 <LL_ADC_SetOffsetSignedSaturation>
 80020e8:	e197      	b.n	800241a <HAL_ADC_ConfigChannel+0x4d6>
                                             : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
          }
          else
          {
            /* Disable ADC offset signed saturation */
            LL_ADC_SetOffsetUnsignedSaturation(hadc->Instance, pConfig->OffsetNumber,
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	6818      	ldr	r0, [r3, #0]
 80020ee:	683b      	ldr	r3, [r7, #0]
 80020f0:	691b      	ldr	r3, [r3, #16]
 80020f2:	2200      	movs	r2, #0
 80020f4:	4619      	mov	r1, r3
 80020f6:	f7ff fa42 	bl	800157e <LL_ADC_SetOffsetUnsignedSaturation>
                                               LL_ADC_OFFSET_UNSIGNED_SATURATION_DISABLE);
            LL_ADC_SetOffsetSignedSaturation(hadc->Instance, pConfig->OffsetNumber,
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	6818      	ldr	r0, [r3, #0]
 80020fe:	683b      	ldr	r3, [r7, #0]
 8002100:	691b      	ldr	r3, [r3, #16]
 8002102:	2200      	movs	r2, #0
 8002104:	4619      	mov	r1, r3
 8002106:	f7ff fa1f 	bl	8001548 <LL_ADC_SetOffsetSignedSaturation>
 800210a:	e186      	b.n	800241a <HAL_ADC_ConfigChannel+0x4d6>
        }
        else
        {
          /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is enabled.
             If this is the case, the corresponding offset is disabled since pConfig->OffsetNumber = ADC_OFFSET_NONE. */
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	2100      	movs	r1, #0
 8002112:	4618      	mov	r0, r3
 8002114:	f7ff f9e7 	bl	80014e6 <LL_ADC_GetOffsetChannel>
 8002118:	4603      	mov	r3, r0
 800211a:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800211e:	2b00      	cmp	r3, #0
 8002120:	d10a      	bne.n	8002138 <HAL_ADC_ConfigChannel+0x1f4>
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	2100      	movs	r1, #0
 8002128:	4618      	mov	r0, r3
 800212a:	f7ff f9dc 	bl	80014e6 <LL_ADC_GetOffsetChannel>
 800212e:	4603      	mov	r3, r0
 8002130:	0e9b      	lsrs	r3, r3, #26
 8002132:	f003 021f 	and.w	r2, r3, #31
 8002136:	e01e      	b.n	8002176 <HAL_ADC_ConfigChannel+0x232>
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	2100      	movs	r1, #0
 800213e:	4618      	mov	r0, r3
 8002140:	f7ff f9d1 	bl	80014e6 <LL_ADC_GetOffsetChannel>
 8002144:	4603      	mov	r3, r0
 8002146:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800214a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800214e:	fa93 f3a3 	rbit	r3, r3
 8002152:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  return result;
 8002156:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800215a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  if (value == 0U)
 800215e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002162:	2b00      	cmp	r3, #0
 8002164:	d101      	bne.n	800216a <HAL_ADC_ConfigChannel+0x226>
    return 32U;
 8002166:	2320      	movs	r3, #32
 8002168:	e004      	b.n	8002174 <HAL_ADC_ConfigChannel+0x230>
  return __builtin_clz(value);
 800216a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800216e:	fab3 f383 	clz	r3, r3
 8002172:	b2db      	uxtb	r3, r3
 8002174:	461a      	mov	r2, r3
              == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002176:	683b      	ldr	r3, [r7, #0]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800217e:	2b00      	cmp	r3, #0
 8002180:	d105      	bne.n	800218e <HAL_ADC_ConfigChannel+0x24a>
 8002182:	683b      	ldr	r3, [r7, #0]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	0e9b      	lsrs	r3, r3, #26
 8002188:	f003 031f 	and.w	r3, r3, #31
 800218c:	e018      	b.n	80021c0 <HAL_ADC_ConfigChannel+0x27c>
 800218e:	683b      	ldr	r3, [r7, #0]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002196:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800219a:	fa93 f3a3 	rbit	r3, r3
 800219e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  return result;
 80021a2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80021a6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  if (value == 0U)
 80021aa:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d101      	bne.n	80021b6 <HAL_ADC_ConfigChannel+0x272>
    return 32U;
 80021b2:	2320      	movs	r3, #32
 80021b4:	e004      	b.n	80021c0 <HAL_ADC_ConfigChannel+0x27c>
  return __builtin_clz(value);
 80021b6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80021ba:	fab3 f383 	clz	r3, r3
 80021be:	b2db      	uxtb	r3, r3
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80021c0:	429a      	cmp	r2, r3
 80021c2:	d107      	bne.n	80021d4 <HAL_ADC_ConfigChannel+0x290>
          {
            LL_ADC_SetOffset(hadc->Instance, LL_ADC_OFFSET_1, pConfig->Channel, 0x0);
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	6818      	ldr	r0, [r3, #0]
 80021c8:	683b      	ldr	r3, [r7, #0]
 80021ca:	681a      	ldr	r2, [r3, #0]
 80021cc:	2300      	movs	r3, #0
 80021ce:	2100      	movs	r1, #0
 80021d0:	f7ff f968 	bl	80014a4 <LL_ADC_SetOffset>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	2101      	movs	r1, #1
 80021da:	4618      	mov	r0, r3
 80021dc:	f7ff f983 	bl	80014e6 <LL_ADC_GetOffsetChannel>
 80021e0:	4603      	mov	r3, r0
 80021e2:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d10c      	bne.n	8002204 <HAL_ADC_ConfigChannel+0x2c0>
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	2101      	movs	r1, #1
 80021f0:	4618      	mov	r0, r3
 80021f2:	f7ff f978 	bl	80014e6 <LL_ADC_GetOffsetChannel>
 80021f6:	4603      	mov	r3, r0
 80021f8:	0e9b      	lsrs	r3, r3, #26
 80021fa:	f003 021f 	and.w	r2, r3, #31
 80021fe:	e020      	b.n	8002242 <HAL_ADC_ConfigChannel+0x2fe>
 8002200:	46021000 	.word	0x46021000
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	2101      	movs	r1, #1
 800220a:	4618      	mov	r0, r3
 800220c:	f7ff f96b 	bl	80014e6 <LL_ADC_GetOffsetChannel>
 8002210:	4603      	mov	r3, r0
 8002212:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002216:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800221a:	fa93 f3a3 	rbit	r3, r3
 800221e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  return result;
 8002222:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002226:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  if (value == 0U)
 800222a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800222e:	2b00      	cmp	r3, #0
 8002230:	d101      	bne.n	8002236 <HAL_ADC_ConfigChannel+0x2f2>
    return 32U;
 8002232:	2320      	movs	r3, #32
 8002234:	e004      	b.n	8002240 <HAL_ADC_ConfigChannel+0x2fc>
  return __builtin_clz(value);
 8002236:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800223a:	fab3 f383 	clz	r3, r3
 800223e:	b2db      	uxtb	r3, r3
 8002240:	461a      	mov	r2, r3
              == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002242:	683b      	ldr	r3, [r7, #0]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800224a:	2b00      	cmp	r3, #0
 800224c:	d105      	bne.n	800225a <HAL_ADC_ConfigChannel+0x316>
 800224e:	683b      	ldr	r3, [r7, #0]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	0e9b      	lsrs	r3, r3, #26
 8002254:	f003 031f 	and.w	r3, r3, #31
 8002258:	e018      	b.n	800228c <HAL_ADC_ConfigChannel+0x348>
 800225a:	683b      	ldr	r3, [r7, #0]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002262:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002266:	fa93 f3a3 	rbit	r3, r3
 800226a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  return result;
 800226e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002272:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (value == 0U)
 8002276:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800227a:	2b00      	cmp	r3, #0
 800227c:	d101      	bne.n	8002282 <HAL_ADC_ConfigChannel+0x33e>
    return 32U;
 800227e:	2320      	movs	r3, #32
 8002280:	e004      	b.n	800228c <HAL_ADC_ConfigChannel+0x348>
  return __builtin_clz(value);
 8002282:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002286:	fab3 f383 	clz	r3, r3
 800228a:	b2db      	uxtb	r3, r3
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800228c:	429a      	cmp	r2, r3
 800228e:	d107      	bne.n	80022a0 <HAL_ADC_ConfigChannel+0x35c>
          {
            LL_ADC_SetOffset(hadc->Instance, LL_ADC_OFFSET_2, pConfig->Channel, 0x0);
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	6818      	ldr	r0, [r3, #0]
 8002294:	683b      	ldr	r3, [r7, #0]
 8002296:	681a      	ldr	r2, [r3, #0]
 8002298:	2300      	movs	r3, #0
 800229a:	2101      	movs	r1, #1
 800229c:	f7ff f902 	bl	80014a4 <LL_ADC_SetOffset>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	2102      	movs	r1, #2
 80022a6:	4618      	mov	r0, r3
 80022a8:	f7ff f91d 	bl	80014e6 <LL_ADC_GetOffsetChannel>
 80022ac:	4603      	mov	r3, r0
 80022ae:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d10a      	bne.n	80022cc <HAL_ADC_ConfigChannel+0x388>
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	2102      	movs	r1, #2
 80022bc:	4618      	mov	r0, r3
 80022be:	f7ff f912 	bl	80014e6 <LL_ADC_GetOffsetChannel>
 80022c2:	4603      	mov	r3, r0
 80022c4:	0e9b      	lsrs	r3, r3, #26
 80022c6:	f003 021f 	and.w	r2, r3, #31
 80022ca:	e01e      	b.n	800230a <HAL_ADC_ConfigChannel+0x3c6>
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	2102      	movs	r1, #2
 80022d2:	4618      	mov	r0, r3
 80022d4:	f7ff f907 	bl	80014e6 <LL_ADC_GetOffsetChannel>
 80022d8:	4603      	mov	r3, r0
 80022da:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022de:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80022e2:	fa93 f3a3 	rbit	r3, r3
 80022e6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  return result;
 80022ea:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80022ee:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  if (value == 0U)
 80022f2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d101      	bne.n	80022fe <HAL_ADC_ConfigChannel+0x3ba>
    return 32U;
 80022fa:	2320      	movs	r3, #32
 80022fc:	e004      	b.n	8002308 <HAL_ADC_ConfigChannel+0x3c4>
  return __builtin_clz(value);
 80022fe:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002302:	fab3 f383 	clz	r3, r3
 8002306:	b2db      	uxtb	r3, r3
 8002308:	461a      	mov	r2, r3
              == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800230a:	683b      	ldr	r3, [r7, #0]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8002312:	2b00      	cmp	r3, #0
 8002314:	d105      	bne.n	8002322 <HAL_ADC_ConfigChannel+0x3de>
 8002316:	683b      	ldr	r3, [r7, #0]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	0e9b      	lsrs	r3, r3, #26
 800231c:	f003 031f 	and.w	r3, r3, #31
 8002320:	e018      	b.n	8002354 <HAL_ADC_ConfigChannel+0x410>
 8002322:	683b      	ldr	r3, [r7, #0]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800232a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800232e:	fa93 f3a3 	rbit	r3, r3
 8002332:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  return result;
 8002336:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800233a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (value == 0U)
 800233e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002342:	2b00      	cmp	r3, #0
 8002344:	d101      	bne.n	800234a <HAL_ADC_ConfigChannel+0x406>
    return 32U;
 8002346:	2320      	movs	r3, #32
 8002348:	e004      	b.n	8002354 <HAL_ADC_ConfigChannel+0x410>
  return __builtin_clz(value);
 800234a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800234e:	fab3 f383 	clz	r3, r3
 8002352:	b2db      	uxtb	r3, r3
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002354:	429a      	cmp	r2, r3
 8002356:	d107      	bne.n	8002368 <HAL_ADC_ConfigChannel+0x424>
          {
            LL_ADC_SetOffset(hadc->Instance, LL_ADC_OFFSET_3, pConfig->Channel, 0x0);
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	6818      	ldr	r0, [r3, #0]
 800235c:	683b      	ldr	r3, [r7, #0]
 800235e:	681a      	ldr	r2, [r3, #0]
 8002360:	2300      	movs	r3, #0
 8002362:	2102      	movs	r1, #2
 8002364:	f7ff f89e 	bl	80014a4 <LL_ADC_SetOffset>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	2103      	movs	r1, #3
 800236e:	4618      	mov	r0, r3
 8002370:	f7ff f8b9 	bl	80014e6 <LL_ADC_GetOffsetChannel>
 8002374:	4603      	mov	r3, r0
 8002376:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800237a:	2b00      	cmp	r3, #0
 800237c:	d10a      	bne.n	8002394 <HAL_ADC_ConfigChannel+0x450>
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	2103      	movs	r1, #3
 8002384:	4618      	mov	r0, r3
 8002386:	f7ff f8ae 	bl	80014e6 <LL_ADC_GetOffsetChannel>
 800238a:	4603      	mov	r3, r0
 800238c:	0e9b      	lsrs	r3, r3, #26
 800238e:	f003 021f 	and.w	r2, r3, #31
 8002392:	e01a      	b.n	80023ca <HAL_ADC_ConfigChannel+0x486>
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	2103      	movs	r1, #3
 800239a:	4618      	mov	r0, r3
 800239c:	f7ff f8a3 	bl	80014e6 <LL_ADC_GetOffsetChannel>
 80023a0:	4603      	mov	r3, r0
 80023a2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023a4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80023a6:	fa93 f3a3 	rbit	r3, r3
 80023aa:	67bb      	str	r3, [r7, #120]	; 0x78
  return result;
 80023ac:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80023ae:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  if (value == 0U)
 80023b2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d101      	bne.n	80023be <HAL_ADC_ConfigChannel+0x47a>
    return 32U;
 80023ba:	2320      	movs	r3, #32
 80023bc:	e004      	b.n	80023c8 <HAL_ADC_ConfigChannel+0x484>
  return __builtin_clz(value);
 80023be:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80023c2:	fab3 f383 	clz	r3, r3
 80023c6:	b2db      	uxtb	r3, r3
 80023c8:	461a      	mov	r2, r3
              == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80023ca:	683b      	ldr	r3, [r7, #0]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d105      	bne.n	80023e2 <HAL_ADC_ConfigChannel+0x49e>
 80023d6:	683b      	ldr	r3, [r7, #0]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	0e9b      	lsrs	r3, r3, #26
 80023dc:	f003 031f 	and.w	r3, r3, #31
 80023e0:	e011      	b.n	8002406 <HAL_ADC_ConfigChannel+0x4c2>
 80023e2:	683b      	ldr	r3, [r7, #0]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023e8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80023ea:	fa93 f3a3 	rbit	r3, r3
 80023ee:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80023f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80023f2:	677b      	str	r3, [r7, #116]	; 0x74
  if (value == 0U)
 80023f4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d101      	bne.n	80023fe <HAL_ADC_ConfigChannel+0x4ba>
    return 32U;
 80023fa:	2320      	movs	r3, #32
 80023fc:	e003      	b.n	8002406 <HAL_ADC_ConfigChannel+0x4c2>
  return __builtin_clz(value);
 80023fe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002400:	fab3 f383 	clz	r3, r3
 8002404:	b2db      	uxtb	r3, r3
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002406:	429a      	cmp	r2, r3
 8002408:	d107      	bne.n	800241a <HAL_ADC_ConfigChannel+0x4d6>
          {
            LL_ADC_SetOffset(hadc->Instance, LL_ADC_OFFSET_4, pConfig->Channel, 0x0);
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	6818      	ldr	r0, [r3, #0]
 800240e:	683b      	ldr	r3, [r7, #0]
 8002410:	681a      	ldr	r2, [r3, #0]
 8002412:	2300      	movs	r3, #0
 8002414:	2103      	movs	r1, #3
 8002416:	f7ff f845 	bl	80014a4 <LL_ADC_SetOffset>

      /* Parameters update conditioned to ADC state:                              */
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Single or differential mode                                           */
      /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	4618      	mov	r0, r3
 8002420:	f7ff fa8c 	bl	800193c <LL_ADC_IsEnabled>
 8002424:	4603      	mov	r3, r0
 8002426:	2b00      	cmp	r3, #0
 8002428:	f040 840e 	bne.w	8002c48 <HAL_ADC_ConfigChannel+0xd04>
      {
        /* Set mode single-ended or differential input of the selected ADC channel */
        LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	6818      	ldr	r0, [r3, #0]
 8002430:	683b      	ldr	r3, [r7, #0]
 8002432:	6819      	ldr	r1, [r3, #0]
 8002434:	683b      	ldr	r3, [r7, #0]
 8002436:	68db      	ldr	r3, [r3, #12]
 8002438:	461a      	mov	r2, r3
 800243a:	f7ff fa0d 	bl	8001858 <LL_ADC_SetChannelSingleDiff>

        /* Configuration of differential mode */
        if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800243e:	683b      	ldr	r3, [r7, #0]
 8002440:	68db      	ldr	r3, [r3, #12]
 8002442:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002446:	f040 80d6 	bne.w	80025f6 <HAL_ADC_ConfigChannel+0x6b2>
        {
          /* Set sampling time of the selected ADC channel */
          /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
          tmp_channel = __LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel) \
 800244a:	683b      	ldr	r3, [r7, #0]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8002452:	2b00      	cmp	r3, #0
 8002454:	d10b      	bne.n	800246e <HAL_ADC_ConfigChannel+0x52a>
 8002456:	683b      	ldr	r3, [r7, #0]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	0e9b      	lsrs	r3, r3, #26
 800245c:	3301      	adds	r3, #1
 800245e:	f003 031f 	and.w	r3, r3, #31
 8002462:	2b09      	cmp	r3, #9
 8002464:	bf94      	ite	ls
 8002466:	2301      	movls	r3, #1
 8002468:	2300      	movhi	r3, #0
 800246a:	b2db      	uxtb	r3, r3
 800246c:	e019      	b.n	80024a2 <HAL_ADC_ConfigChannel+0x55e>
 800246e:	683b      	ldr	r3, [r7, #0]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002474:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002476:	fa93 f3a3 	rbit	r3, r3
 800247a:	663b      	str	r3, [r7, #96]	; 0x60
  return result;
 800247c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800247e:	66bb      	str	r3, [r7, #104]	; 0x68
  if (value == 0U)
 8002480:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002482:	2b00      	cmp	r3, #0
 8002484:	d101      	bne.n	800248a <HAL_ADC_ConfigChannel+0x546>
    return 32U;
 8002486:	2320      	movs	r3, #32
 8002488:	e003      	b.n	8002492 <HAL_ADC_ConfigChannel+0x54e>
  return __builtin_clz(value);
 800248a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800248c:	fab3 f383 	clz	r3, r3
 8002490:	b2db      	uxtb	r3, r3
 8002492:	3301      	adds	r3, #1
 8002494:	f003 031f 	and.w	r3, r3, #31
 8002498:	2b09      	cmp	r3, #9
 800249a:	bf94      	ite	ls
 800249c:	2301      	movls	r3, #1
 800249e:	2300      	movhi	r3, #0
 80024a0:	b2db      	uxtb	r3, r3
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d04d      	beq.n	8002542 <HAL_ADC_ConfigChannel+0x5fe>
 80024a6:	683b      	ldr	r3, [r7, #0]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d107      	bne.n	80024c2 <HAL_ADC_ConfigChannel+0x57e>
 80024b2:	683b      	ldr	r3, [r7, #0]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	0e9b      	lsrs	r3, r3, #26
 80024b8:	3301      	adds	r3, #1
 80024ba:	069b      	lsls	r3, r3, #26
 80024bc:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80024c0:	e015      	b.n	80024ee <HAL_ADC_ConfigChannel+0x5aa>
 80024c2:	683b      	ldr	r3, [r7, #0]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024c8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80024ca:	fa93 f3a3 	rbit	r3, r3
 80024ce:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 80024d0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80024d2:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 80024d4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d101      	bne.n	80024de <HAL_ADC_ConfigChannel+0x59a>
    return 32U;
 80024da:	2320      	movs	r3, #32
 80024dc:	e003      	b.n	80024e6 <HAL_ADC_ConfigChannel+0x5a2>
  return __builtin_clz(value);
 80024de:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80024e0:	fab3 f383 	clz	r3, r3
 80024e4:	b2db      	uxtb	r3, r3
 80024e6:	3301      	adds	r3, #1
 80024e8:	069b      	lsls	r3, r3, #26
 80024ea:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80024ee:	683b      	ldr	r3, [r7, #0]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d109      	bne.n	800250e <HAL_ADC_ConfigChannel+0x5ca>
 80024fa:	683b      	ldr	r3, [r7, #0]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	0e9b      	lsrs	r3, r3, #26
 8002500:	3301      	adds	r3, #1
 8002502:	f003 031f 	and.w	r3, r3, #31
 8002506:	2101      	movs	r1, #1
 8002508:	fa01 f303 	lsl.w	r3, r1, r3
 800250c:	e017      	b.n	800253e <HAL_ADC_ConfigChannel+0x5fa>
 800250e:	683b      	ldr	r3, [r7, #0]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002514:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002516:	fa93 f3a3 	rbit	r3, r3
 800251a:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 800251c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800251e:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8002520:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002522:	2b00      	cmp	r3, #0
 8002524:	d101      	bne.n	800252a <HAL_ADC_ConfigChannel+0x5e6>
    return 32U;
 8002526:	2320      	movs	r3, #32
 8002528:	e003      	b.n	8002532 <HAL_ADC_ConfigChannel+0x5ee>
  return __builtin_clz(value);
 800252a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800252c:	fab3 f383 	clz	r3, r3
 8002530:	b2db      	uxtb	r3, r3
 8002532:	3301      	adds	r3, #1
 8002534:	f003 031f 	and.w	r3, r3, #31
 8002538:	2101      	movs	r1, #1
 800253a:	fa01 f303 	lsl.w	r3, r1, r3
 800253e:	4313      	orrs	r3, r2
 8002540:	e04e      	b.n	80025e0 <HAL_ADC_ConfigChannel+0x69c>
 8002542:	683b      	ldr	r3, [r7, #0]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800254a:	2b00      	cmp	r3, #0
 800254c:	d107      	bne.n	800255e <HAL_ADC_ConfigChannel+0x61a>
 800254e:	683b      	ldr	r3, [r7, #0]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	0e9b      	lsrs	r3, r3, #26
 8002554:	3301      	adds	r3, #1
 8002556:	069b      	lsls	r3, r3, #26
 8002558:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800255c:	e015      	b.n	800258a <HAL_ADC_ConfigChannel+0x646>
 800255e:	683b      	ldr	r3, [r7, #0]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002564:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002566:	fa93 f3a3 	rbit	r3, r3
 800256a:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 800256c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800256e:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8002570:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002572:	2b00      	cmp	r3, #0
 8002574:	d101      	bne.n	800257a <HAL_ADC_ConfigChannel+0x636>
    return 32U;
 8002576:	2320      	movs	r3, #32
 8002578:	e003      	b.n	8002582 <HAL_ADC_ConfigChannel+0x63e>
  return __builtin_clz(value);
 800257a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800257c:	fab3 f383 	clz	r3, r3
 8002580:	b2db      	uxtb	r3, r3
 8002582:	3301      	adds	r3, #1
 8002584:	069b      	lsls	r3, r3, #26
 8002586:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800258a:	683b      	ldr	r3, [r7, #0]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8002592:	2b00      	cmp	r3, #0
 8002594:	d109      	bne.n	80025aa <HAL_ADC_ConfigChannel+0x666>
 8002596:	683b      	ldr	r3, [r7, #0]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	0e9b      	lsrs	r3, r3, #26
 800259c:	3301      	adds	r3, #1
 800259e:	f003 031f 	and.w	r3, r3, #31
 80025a2:	2101      	movs	r1, #1
 80025a4:	fa01 f303 	lsl.w	r3, r1, r3
 80025a8:	e017      	b.n	80025da <HAL_ADC_ConfigChannel+0x696>
 80025aa:	683b      	ldr	r3, [r7, #0]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80025b2:	fa93 f3a3 	rbit	r3, r3
 80025b6:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 80025b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025ba:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 80025bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d101      	bne.n	80025c6 <HAL_ADC_ConfigChannel+0x682>
    return 32U;
 80025c2:	2320      	movs	r3, #32
 80025c4:	e003      	b.n	80025ce <HAL_ADC_ConfigChannel+0x68a>
  return __builtin_clz(value);
 80025c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025c8:	fab3 f383 	clz	r3, r3
 80025cc:	b2db      	uxtb	r3, r3
 80025ce:	3301      	adds	r3, #1
 80025d0:	f003 031f 	and.w	r3, r3, #31
 80025d4:	2101      	movs	r1, #1
 80025d6:	fa01 f303 	lsl.w	r3, r1, r3
 80025da:	4313      	orrs	r3, r2
 80025dc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80025e0:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
                                                        + 1UL) & 0x1FUL);
          LL_ADC_SetChannelSamplingTime(hadc->Instance, tmp_channel, pConfig->SamplingTime);
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	6818      	ldr	r0, [r3, #0]
 80025e8:	683b      	ldr	r3, [r7, #0]
 80025ea:	689b      	ldr	r3, [r3, #8]
 80025ec:	461a      	mov	r2, r3
 80025ee:	f8d7 10e8 	ldr.w	r1, [r7, #232]	; 0xe8
 80025f2:	f7ff f8cd 	bl	8001790 <LL_ADC_SetChannelSamplingTime>
        /* If internal channel selected, enable dedicated internal buffers and    */
        /* paths.                                                                 */
        /* Note: these internal measurement paths can be disabled using           */
        /* HAL_ADC_DeInit().                                                      */

        if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80025f6:	683b      	ldr	r3, [r7, #0]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	f280 8324 	bge.w	8002c48 <HAL_ADC_ConfigChannel+0xd04>
        {
          /* Configuration of common ADC parameters                                 */

          tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	4a99      	ldr	r2, [pc, #612]	; (800286c <HAL_ADC_ConfigChannel+0x928>)
 8002606:	4293      	cmp	r3, r2
 8002608:	d101      	bne.n	800260e <HAL_ADC_ConfigChannel+0x6ca>
 800260a:	4b99      	ldr	r3, [pc, #612]	; (8002870 <HAL_ADC_ConfigChannel+0x92c>)
 800260c:	e000      	b.n	8002610 <HAL_ADC_ConfigChannel+0x6cc>
 800260e:	4b99      	ldr	r3, [pc, #612]	; (8002874 <HAL_ADC_ConfigChannel+0x930>)
 8002610:	4618      	mov	r0, r3
 8002612:	f7fe ff19 	bl	8001448 <LL_ADC_GetCommonPathInternalCh>
 8002616:	f8c7 00e4 	str.w	r0, [r7, #228]	; 0xe4

          /* Software is allowed to change common parameters only when all ADCs   */
          /* of the common group are disabled.                                    */
          if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	4a93      	ldr	r2, [pc, #588]	; (800286c <HAL_ADC_ConfigChannel+0x928>)
 8002620:	4293      	cmp	r3, r2
 8002622:	d109      	bne.n	8002638 <HAL_ADC_ConfigChannel+0x6f4>
 8002624:	4891      	ldr	r0, [pc, #580]	; (800286c <HAL_ADC_ConfigChannel+0x928>)
 8002626:	f7ff f989 	bl	800193c <LL_ADC_IsEnabled>
 800262a:	4603      	mov	r3, r0
 800262c:	2b00      	cmp	r3, #0
 800262e:	bf0c      	ite	eq
 8002630:	2301      	moveq	r3, #1
 8002632:	2300      	movne	r3, #0
 8002634:	b2db      	uxtb	r3, r3
 8002636:	e008      	b.n	800264a <HAL_ADC_ConfigChannel+0x706>
 8002638:	488f      	ldr	r0, [pc, #572]	; (8002878 <HAL_ADC_ConfigChannel+0x934>)
 800263a:	f7ff f97f 	bl	800193c <LL_ADC_IsEnabled>
 800263e:	4603      	mov	r3, r0
 8002640:	2b00      	cmp	r3, #0
 8002642:	bf0c      	ite	eq
 8002644:	2301      	moveq	r3, #1
 8002646:	2300      	movne	r3, #0
 8002648:	b2db      	uxtb	r3, r3
 800264a:	2b00      	cmp	r3, #0
 800264c:	f000 8088 	beq.w	8002760 <HAL_ADC_ConfigChannel+0x81c>
          {
            /* If the requested internal measurement path has already been enabled, */
            /* bypass the configuration processing.                                 */
            if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002650:	683b      	ldr	r3, [r7, #0]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	4a89      	ldr	r2, [pc, #548]	; (800287c <HAL_ADC_ConfigChannel+0x938>)
 8002656:	4293      	cmp	r3, r2
 8002658:	d132      	bne.n	80026c0 <HAL_ADC_ConfigChannel+0x77c>
                && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800265a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800265e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002662:	2b00      	cmp	r3, #0
 8002664:	d12c      	bne.n	80026c0 <HAL_ADC_ConfigChannel+0x77c>
            {
              if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	4a80      	ldr	r2, [pc, #512]	; (800286c <HAL_ADC_ConfigChannel+0x928>)
 800266c:	4293      	cmp	r3, r2
 800266e:	d005      	beq.n	800267c <HAL_ADC_ConfigChannel+0x738>
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	4a80      	ldr	r2, [pc, #512]	; (8002878 <HAL_ADC_ConfigChannel+0x934>)
 8002676:	4293      	cmp	r3, r2
 8002678:	f040 82e3 	bne.w	8002c42 <HAL_ADC_ConfigChannel+0xcfe>
              {
                LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	4a7a      	ldr	r2, [pc, #488]	; (800286c <HAL_ADC_ConfigChannel+0x928>)
 8002682:	4293      	cmp	r3, r2
 8002684:	d101      	bne.n	800268a <HAL_ADC_ConfigChannel+0x746>
 8002686:	4a7a      	ldr	r2, [pc, #488]	; (8002870 <HAL_ADC_ConfigChannel+0x92c>)
 8002688:	e000      	b.n	800268c <HAL_ADC_ConfigChannel+0x748>
 800268a:	4a7a      	ldr	r2, [pc, #488]	; (8002874 <HAL_ADC_ConfigChannel+0x930>)
 800268c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002690:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002694:	4619      	mov	r1, r3
 8002696:	4610      	mov	r0, r2
 8002698:	f7fe fec3 	bl	8001422 <LL_ADC_SetCommonPathInternalCh>
                /* Wait loop initialization and execution */
                /* Note: Variable divided by 2 to compensate partially              */
                /*       CPU processing cycles, scaling in us split to not          */
                /*       exceed 32 bits register capacity and handle low frequency. */
                wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL)                                       \
                                   * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800269c:	4b78      	ldr	r3, [pc, #480]	; (8002880 <HAL_ADC_ConfigChannel+0x93c>)
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	099b      	lsrs	r3, r3, #6
 80026a2:	4a78      	ldr	r2, [pc, #480]	; (8002884 <HAL_ADC_ConfigChannel+0x940>)
 80026a4:	fba2 2303 	umull	r2, r3, r2, r3
 80026a8:	099b      	lsrs	r3, r3, #6
 80026aa:	3301      	adds	r3, #1
 80026ac:	005b      	lsls	r3, r3, #1
                wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL)                                       \
 80026ae:	60bb      	str	r3, [r7, #8]
                while (wait_loop_index != 0UL)
 80026b0:	e002      	b.n	80026b8 <HAL_ADC_ConfigChannel+0x774>
                {
                  wait_loop_index--;
 80026b2:	68bb      	ldr	r3, [r7, #8]
 80026b4:	3b01      	subs	r3, #1
 80026b6:	60bb      	str	r3, [r7, #8]
                while (wait_loop_index != 0UL)
 80026b8:	68bb      	ldr	r3, [r7, #8]
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d1f9      	bne.n	80026b2 <HAL_ADC_ConfigChannel+0x76e>
              if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80026be:	e2c0      	b.n	8002c42 <HAL_ADC_ConfigChannel+0xcfe>
                }
              }
            }
            else if ((pConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel                          \
 80026c0:	683b      	ldr	r3, [r7, #0]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	4a70      	ldr	r2, [pc, #448]	; (8002888 <HAL_ADC_ConfigChannel+0x944>)
 80026c6:	4293      	cmp	r3, r2
 80026c8:	d121      	bne.n	800270e <HAL_ADC_ConfigChannel+0x7ca>
                                                                 & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80026ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80026ce:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
            else if ((pConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel                          \
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d11b      	bne.n	800270e <HAL_ADC_ConfigChannel+0x7ca>
            {
              if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	4a64      	ldr	r2, [pc, #400]	; (800286c <HAL_ADC_ConfigChannel+0x928>)
 80026dc:	4293      	cmp	r3, r2
 80026de:	d005      	beq.n	80026ec <HAL_ADC_ConfigChannel+0x7a8>
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	4a64      	ldr	r2, [pc, #400]	; (8002878 <HAL_ADC_ConfigChannel+0x934>)
 80026e6:	4293      	cmp	r3, r2
 80026e8:	f040 82ad 	bne.w	8002c46 <HAL_ADC_ConfigChannel+0xd02>
              {
                LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	4a5e      	ldr	r2, [pc, #376]	; (800286c <HAL_ADC_ConfigChannel+0x928>)
 80026f2:	4293      	cmp	r3, r2
 80026f4:	d101      	bne.n	80026fa <HAL_ADC_ConfigChannel+0x7b6>
 80026f6:	4a5e      	ldr	r2, [pc, #376]	; (8002870 <HAL_ADC_ConfigChannel+0x92c>)
 80026f8:	e000      	b.n	80026fc <HAL_ADC_ConfigChannel+0x7b8>
 80026fa:	4a5e      	ldr	r2, [pc, #376]	; (8002874 <HAL_ADC_ConfigChannel+0x930>)
 80026fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002700:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002704:	4619      	mov	r1, r3
 8002706:	4610      	mov	r0, r2
 8002708:	f7fe fe8b 	bl	8001422 <LL_ADC_SetCommonPathInternalCh>
              if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800270c:	e29b      	b.n	8002c46 <HAL_ADC_ConfigChannel+0xd02>
                                               LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
              }
            }
            else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 800270e:	683b      	ldr	r3, [r7, #0]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	4a5e      	ldr	r2, [pc, #376]	; (800288c <HAL_ADC_ConfigChannel+0x948>)
 8002714:	4293      	cmp	r3, r2
 8002716:	f040 8297 	bne.w	8002c48 <HAL_ADC_ConfigChannel+0xd04>
                     && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800271a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800271e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002722:	2b00      	cmp	r3, #0
 8002724:	f040 8290 	bne.w	8002c48 <HAL_ADC_ConfigChannel+0xd04>
            {
              if (ADC_VREFINT_INSTANCE(hadc))
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	4a4f      	ldr	r2, [pc, #316]	; (800286c <HAL_ADC_ConfigChannel+0x928>)
 800272e:	4293      	cmp	r3, r2
 8002730:	d005      	beq.n	800273e <HAL_ADC_ConfigChannel+0x7fa>
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	4a50      	ldr	r2, [pc, #320]	; (8002878 <HAL_ADC_ConfigChannel+0x934>)
 8002738:	4293      	cmp	r3, r2
 800273a:	f040 8285 	bne.w	8002c48 <HAL_ADC_ConfigChannel+0xd04>
              {
                LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	4a4a      	ldr	r2, [pc, #296]	; (800286c <HAL_ADC_ConfigChannel+0x928>)
 8002744:	4293      	cmp	r3, r2
 8002746:	d101      	bne.n	800274c <HAL_ADC_ConfigChannel+0x808>
 8002748:	4a49      	ldr	r2, [pc, #292]	; (8002870 <HAL_ADC_ConfigChannel+0x92c>)
 800274a:	e000      	b.n	800274e <HAL_ADC_ConfigChannel+0x80a>
 800274c:	4a49      	ldr	r2, [pc, #292]	; (8002874 <HAL_ADC_ConfigChannel+0x930>)
 800274e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002752:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002756:	4619      	mov	r1, r3
 8002758:	4610      	mov	r0, r2
 800275a:	f7fe fe62 	bl	8001422 <LL_ADC_SetCommonPathInternalCh>
 800275e:	e273      	b.n	8002c48 <HAL_ADC_ConfigChannel+0xd04>
          /* enabled and other ADC of the common group are enabled, internal      */
          /* measurement paths cannot be enabled.                                 */
          else
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002764:	f043 0220 	orr.w	r2, r3, #32
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	679a      	str	r2, [r3, #120]	; 0x78

            tmp_hal_status = HAL_ERROR;
 800276c:	2301      	movs	r3, #1
 800276e:	f887 30ef 	strb.w	r3, [r7, #239]	; 0xef
 8002772:	e269      	b.n	8002c48 <HAL_ADC_ConfigChannel+0xd04>
        }
      }
    }
    else
    {
      tmp_channel = pConfig->Channel;
 8002774:	683b      	ldr	r3, [r7, #0]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
      /* If sequencer set to not fully configurable with channel rank set to    */
      /* none, remove the channel from the sequencer.                           */
      /* Otherwise (sequencer set to fully configurable or to to not fully      */
      /* configurable with channel rank to be set), configure the selected      */
      /* channel.                                                               */
      if (pConfig->Rank != ADC4_RANK_NONE)
 800277c:	683b      	ldr	r3, [r7, #0]
 800277e:	685b      	ldr	r3, [r3, #4]
 8002780:	2b02      	cmp	r3, #2
 8002782:	f000 8191 	beq.w	8002aa8 <HAL_ADC_ConfigChannel+0xb64>
        /* Note: ADC channel configuration requires few ADC clock cycles        */
        /*       to be ready. Processing of ADC settings in this function       */
        /*       induce that a specific wait time is not necessary.             */
        /*       For more details on ADC channel configuration ready,           */
        /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
        if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)         ||
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	691b      	ldr	r3, [r3, #16]
 800278a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800278e:	d004      	beq.n	800279a <HAL_ADC_ConfigChannel+0x856>
            (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	691b      	ldr	r3, [r3, #16]
        if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)         ||
 8002794:	4a3e      	ldr	r2, [pc, #248]	; (8002890 <HAL_ADC_ConfigChannel+0x94c>)
 8002796:	4293      	cmp	r3, r2
 8002798:	d107      	bne.n	80027aa <HAL_ADC_ConfigChannel+0x866>
        {
          /* Sequencer set to not fully configurable:                           */
          /* Set the channel by enabling the corresponding bitfield.            */
          LL_ADC_REG_SetSequencerChAdd(hadc->Instance, tmp_channel);
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f8d7 10e8 	ldr.w	r1, [r7, #232]	; 0xe8
 80027a2:	4618      	mov	r0, r3
 80027a4:	f7fe ffa8 	bl	80016f8 <LL_ADC_REG_SetSequencerChAdd>
 80027a8:	e0b0      	b.n	800290c <HAL_ADC_ConfigChannel+0x9c8>
        {
          /* Sequencer set to fully configurable:                               */
          /* Set the channel by entering it into the selected rank.             */

          /* Memorize the channel set into variable in HAL ADC handle */
          MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80027b0:	683b      	ldr	r3, [r7, #0]
 80027b2:	685b      	ldr	r3, [r3, #4]
 80027b4:	f003 031f 	and.w	r3, r3, #31
 80027b8:	210f      	movs	r1, #15
 80027ba:	fa01 f303 	lsl.w	r3, r1, r3
 80027be:	43db      	mvns	r3, r3
 80027c0:	401a      	ands	r2, r3
 80027c2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80027c6:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d105      	bne.n	80027da <HAL_ADC_ConfigChannel+0x896>
 80027ce:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80027d2:	0e9b      	lsrs	r3, r3, #26
 80027d4:	f003 031f 	and.w	r3, r3, #31
 80027d8:	e011      	b.n	80027fe <HAL_ADC_ConfigChannel+0x8ba>
 80027da:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80027de:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027e2:	fa93 f3a3 	rbit	r3, r3
 80027e6:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 80027e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 80027ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d101      	bne.n	80027f6 <HAL_ADC_ConfigChannel+0x8b2>
    return 32U;
 80027f2:	2320      	movs	r3, #32
 80027f4:	e003      	b.n	80027fe <HAL_ADC_ConfigChannel+0x8ba>
  return __builtin_clz(value);
 80027f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027f8:	fab3 f383 	clz	r3, r3
 80027fc:	b2db      	uxtb	r3, r3
 80027fe:	6839      	ldr	r1, [r7, #0]
 8002800:	6849      	ldr	r1, [r1, #4]
 8002802:	f001 011f 	and.w	r1, r1, #31
 8002806:	408b      	lsls	r3, r1
 8002808:	431a      	orrs	r2, r3
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

          /* If the selected rank is below ADC group regular sequencer length,  */
          /* apply the configuration in ADC register.                           */
          /* Note: Otherwise, configuration is not applied.                     */
          /*       To apply it, parameter'NbrOfConversion' must be increased.   */
          if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8002810:	683b      	ldr	r3, [r7, #0]
 8002812:	685b      	ldr	r3, [r3, #4]
 8002814:	089b      	lsrs	r3, r3, #2
 8002816:	1c5a      	adds	r2, r3, #1
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800281c:	429a      	cmp	r2, r3
 800281e:	d875      	bhi.n	800290c <HAL_ADC_ConfigChannel+0x9c8>
          {
#if !defined (ADC2)
            if (HAL_GetREVID() <= REV_ID_A) /* STM32U5 silicon Rev.A */
 8002820:	f7fe fdde 	bl	80013e0 <HAL_GetREVID>
 8002824:	4603      	mov	r3, r0
 8002826:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800282a:	d866      	bhi.n	80028fa <HAL_ADC_ConfigChannel+0x9b6>
            {
              if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(tmp_channel) >= 20UL)
 800282c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8002830:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8002834:	2b00      	cmp	r3, #0
 8002836:	d10a      	bne.n	800284e <HAL_ADC_ConfigChannel+0x90a>
 8002838:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800283c:	0e9b      	lsrs	r3, r3, #26
 800283e:	f003 031f 	and.w	r3, r3, #31
 8002842:	2b13      	cmp	r3, #19
 8002844:	bf8c      	ite	hi
 8002846:	2301      	movhi	r3, #1
 8002848:	2300      	movls	r3, #0
 800284a:	b2db      	uxtb	r3, r3
 800284c:	e02b      	b.n	80028a6 <HAL_ADC_ConfigChannel+0x962>
 800284e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8002852:	61fb      	str	r3, [r7, #28]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002854:	69fb      	ldr	r3, [r7, #28]
 8002856:	fa93 f3a3 	rbit	r3, r3
 800285a:	61bb      	str	r3, [r7, #24]
  return result;
 800285c:	69bb      	ldr	r3, [r7, #24]
 800285e:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8002860:	6a3b      	ldr	r3, [r7, #32]
 8002862:	2b00      	cmp	r3, #0
 8002864:	d116      	bne.n	8002894 <HAL_ADC_ConfigChannel+0x950>
    return 32U;
 8002866:	2320      	movs	r3, #32
 8002868:	e018      	b.n	800289c <HAL_ADC_ConfigChannel+0x958>
 800286a:	bf00      	nop
 800286c:	42028000 	.word	0x42028000
 8002870:	42028308 	.word	0x42028308
 8002874:	46021308 	.word	0x46021308
 8002878:	46021000 	.word	0x46021000
 800287c:	ce080000 	.word	0xce080000
 8002880:	20000000 	.word	0x20000000
 8002884:	053e2d63 	.word	0x053e2d63
 8002888:	ca040000 	.word	0xca040000
 800288c:	80000001 	.word	0x80000001
 8002890:	80000010 	.word	0x80000010
  return __builtin_clz(value);
 8002894:	6a3b      	ldr	r3, [r7, #32]
 8002896:	fab3 f383 	clz	r3, r3
 800289a:	b2db      	uxtb	r3, r3
 800289c:	2b13      	cmp	r3, #19
 800289e:	bf8c      	ite	hi
 80028a0:	2301      	movhi	r3, #1
 80028a2:	2300      	movls	r3, #0
 80028a4:	b2db      	uxtb	r3, r3
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d027      	beq.n	80028fa <HAL_ADC_ConfigChannel+0x9b6>
              {
                tmp_channel = (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(tmp_channel) - 9UL));
 80028aa:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80028ae:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d109      	bne.n	80028ca <HAL_ADC_ConfigChannel+0x986>
 80028b6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80028ba:	0e9b      	lsrs	r3, r3, #26
 80028bc:	f003 031f 	and.w	r3, r3, #31
 80028c0:	3b09      	subs	r3, #9
 80028c2:	2201      	movs	r2, #1
 80028c4:	fa02 f303 	lsl.w	r3, r2, r3
 80028c8:	e015      	b.n	80028f6 <HAL_ADC_ConfigChannel+0x9b2>
 80028ca:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80028ce:	613b      	str	r3, [r7, #16]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028d0:	693b      	ldr	r3, [r7, #16]
 80028d2:	fa93 f3a3 	rbit	r3, r3
 80028d6:	60fb      	str	r3, [r7, #12]
  return result;
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 80028dc:	697b      	ldr	r3, [r7, #20]
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d101      	bne.n	80028e6 <HAL_ADC_ConfigChannel+0x9a2>
    return 32U;
 80028e2:	2320      	movs	r3, #32
 80028e4:	e003      	b.n	80028ee <HAL_ADC_ConfigChannel+0x9aa>
  return __builtin_clz(value);
 80028e6:	697b      	ldr	r3, [r7, #20]
 80028e8:	fab3 f383 	clz	r3, r3
 80028ec:	b2db      	uxtb	r3, r3
 80028ee:	3b09      	subs	r3, #9
 80028f0:	2201      	movs	r2, #1
 80028f2:	fa02 f303 	lsl.w	r3, r2, r3
 80028f6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
              }
            }
#endif /* ADC2 */
            LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, tmp_channel);
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	6818      	ldr	r0, [r3, #0]
 80028fe:	683b      	ldr	r3, [r7, #0]
 8002900:	685b      	ldr	r3, [r3, #4]
 8002902:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 8002906:	4619      	mov	r1, r3
 8002908:	f7fe fe96 	bl	8001638 <LL_ADC_REG_SetSequencerRanks>
          }
        }

        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, tmp_channel, pConfig->SamplingTime);
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	6818      	ldr	r0, [r3, #0]
 8002910:	683b      	ldr	r3, [r7, #0]
 8002912:	689b      	ldr	r3, [r3, #8]
 8002914:	461a      	mov	r2, r3
 8002916:	f8d7 10e8 	ldr.w	r1, [r7, #232]	; 0xe8
 800291a:	f7fe ff39 	bl	8001790 <LL_ADC_SetChannelSamplingTime>
        /* internal measurement paths enable: If internal channel selected,     */
        /* enable dedicated internal buffers and path.                          */
        /* Note: these internal measurement paths can be disabled using         */
        /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
        /*       channel configuration parameter "Rank".                        */
        if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 800291e:	683b      	ldr	r3, [r7, #0]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	2b00      	cmp	r3, #0
 8002924:	f280 8190 	bge.w	8002c48 <HAL_ADC_ConfigChannel+0xd04>
        {
          tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	4a97      	ldr	r2, [pc, #604]	; (8002b8c <HAL_ADC_ConfigChannel+0xc48>)
 800292e:	4293      	cmp	r3, r2
 8002930:	d101      	bne.n	8002936 <HAL_ADC_ConfigChannel+0x9f2>
 8002932:	4b97      	ldr	r3, [pc, #604]	; (8002b90 <HAL_ADC_ConfigChannel+0xc4c>)
 8002934:	e000      	b.n	8002938 <HAL_ADC_ConfigChannel+0x9f4>
 8002936:	4b97      	ldr	r3, [pc, #604]	; (8002b94 <HAL_ADC_ConfigChannel+0xc50>)
 8002938:	4618      	mov	r0, r3
 800293a:	f7fe fd85 	bl	8001448 <LL_ADC_GetCommonPathInternalCh>
 800293e:	f8c7 00e4 	str.w	r0, [r7, #228]	; 0xe4

          /* If the requested internal measurement path has already been enabled,   */
          /* bypass the configuration processing.                                   */
          if ((pConfig->Channel == ADC4_CHANNEL_TEMPSENSOR)                                                           \
 8002942:	683b      	ldr	r3, [r7, #0]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	4a94      	ldr	r2, [pc, #592]	; (8002b98 <HAL_ADC_ConfigChannel+0xc54>)
 8002948:	4293      	cmp	r3, r2
 800294a:	d126      	bne.n	800299a <HAL_ADC_ConfigChannel+0xa56>
              && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800294c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002950:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002954:	2b00      	cmp	r3, #0
 8002956:	d120      	bne.n	800299a <HAL_ADC_ConfigChannel+0xa56>
          {
            LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	4a8b      	ldr	r2, [pc, #556]	; (8002b8c <HAL_ADC_ConfigChannel+0xc48>)
 800295e:	4293      	cmp	r3, r2
 8002960:	d101      	bne.n	8002966 <HAL_ADC_ConfigChannel+0xa22>
 8002962:	4a8b      	ldr	r2, [pc, #556]	; (8002b90 <HAL_ADC_ConfigChannel+0xc4c>)
 8002964:	e000      	b.n	8002968 <HAL_ADC_ConfigChannel+0xa24>
 8002966:	4a8b      	ldr	r2, [pc, #556]	; (8002b94 <HAL_ADC_ConfigChannel+0xc50>)
 8002968:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800296c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002970:	4619      	mov	r1, r3
 8002972:	4610      	mov	r0, r2
 8002974:	f7fe fd55 	bl	8001422 <LL_ADC_SetCommonPathInternalCh>
            /* Delay for temperature sensor stabilization time */
            /* Wait loop initialization and execution */
            /* Note: Variable divided by 2 to compensate partially              */
            /*       CPU processing cycles, scaling in us split to not          */
            /*       exceed 32 bits register capacity and handle low frequency. */
            wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8002978:	4b88      	ldr	r3, [pc, #544]	; (8002b9c <HAL_ADC_ConfigChannel+0xc58>)
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	099b      	lsrs	r3, r3, #6
 800297e:	4a88      	ldr	r2, [pc, #544]	; (8002ba0 <HAL_ADC_ConfigChannel+0xc5c>)
 8002980:	fba2 2303 	umull	r2, r3, r2, r3
 8002984:	099b      	lsrs	r3, r3, #6
 8002986:	005b      	lsls	r3, r3, #1
 8002988:	60bb      	str	r3, [r7, #8]
            while (wait_loop_index != 0UL)
 800298a:	e002      	b.n	8002992 <HAL_ADC_ConfigChannel+0xa4e>
            {
              wait_loop_index--;
 800298c:	68bb      	ldr	r3, [r7, #8]
 800298e:	3b01      	subs	r3, #1
 8002990:	60bb      	str	r3, [r7, #8]
            while (wait_loop_index != 0UL)
 8002992:	68bb      	ldr	r3, [r7, #8]
 8002994:	2b00      	cmp	r3, #0
 8002996:	d1f9      	bne.n	800298c <HAL_ADC_ConfigChannel+0xa48>
          if ((pConfig->Channel == ADC4_CHANNEL_TEMPSENSOR)                                                           \
 8002998:	e067      	b.n	8002a6a <HAL_ADC_ConfigChannel+0xb26>
            }
          }
          else if ((pConfig->Channel == ADC4_CHANNEL_VBAT) && ((tmp_config_internal_channel                           \
 800299a:	683b      	ldr	r3, [r7, #0]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	4a81      	ldr	r2, [pc, #516]	; (8002ba4 <HAL_ADC_ConfigChannel+0xc60>)
 80029a0:	4293      	cmp	r3, r2
 80029a2:	d116      	bne.n	80029d2 <HAL_ADC_ConfigChannel+0xa8e>
                                                                & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80029a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80029a8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
          else if ((pConfig->Channel == ADC4_CHANNEL_VBAT) && ((tmp_config_internal_channel                           \
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d110      	bne.n	80029d2 <HAL_ADC_ConfigChannel+0xa8e>
          {
            LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	4a75      	ldr	r2, [pc, #468]	; (8002b8c <HAL_ADC_ConfigChannel+0xc48>)
 80029b6:	4293      	cmp	r3, r2
 80029b8:	d101      	bne.n	80029be <HAL_ADC_ConfigChannel+0xa7a>
 80029ba:	4a75      	ldr	r2, [pc, #468]	; (8002b90 <HAL_ADC_ConfigChannel+0xc4c>)
 80029bc:	e000      	b.n	80029c0 <HAL_ADC_ConfigChannel+0xa7c>
 80029be:	4a75      	ldr	r2, [pc, #468]	; (8002b94 <HAL_ADC_ConfigChannel+0xc50>)
 80029c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80029c4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80029c8:	4619      	mov	r1, r3
 80029ca:	4610      	mov	r0, r2
 80029cc:	f7fe fd29 	bl	8001422 <LL_ADC_SetCommonPathInternalCh>
 80029d0:	e04b      	b.n	8002a6a <HAL_ADC_ConfigChannel+0xb26>
                                           LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
          }
          else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)                                                          \
 80029d2:	683b      	ldr	r3, [r7, #0]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	4a74      	ldr	r2, [pc, #464]	; (8002ba8 <HAL_ADC_ConfigChannel+0xc64>)
 80029d8:	4293      	cmp	r3, r2
 80029da:	d116      	bne.n	8002a0a <HAL_ADC_ConfigChannel+0xac6>
                   && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80029dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80029e0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d110      	bne.n	8002a0a <HAL_ADC_ConfigChannel+0xac6>
          {
            LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	4a67      	ldr	r2, [pc, #412]	; (8002b8c <HAL_ADC_ConfigChannel+0xc48>)
 80029ee:	4293      	cmp	r3, r2
 80029f0:	d101      	bne.n	80029f6 <HAL_ADC_ConfigChannel+0xab2>
 80029f2:	4a67      	ldr	r2, [pc, #412]	; (8002b90 <HAL_ADC_ConfigChannel+0xc4c>)
 80029f4:	e000      	b.n	80029f8 <HAL_ADC_ConfigChannel+0xab4>
 80029f6:	4a67      	ldr	r2, [pc, #412]	; (8002b94 <HAL_ADC_ConfigChannel+0xc50>)
 80029f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80029fc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002a00:	4619      	mov	r1, r3
 8002a02:	4610      	mov	r0, r2
 8002a04:	f7fe fd0d 	bl	8001422 <LL_ADC_SetCommonPathInternalCh>
 8002a08:	e02f      	b.n	8002a6a <HAL_ADC_ConfigChannel+0xb26>
                                           LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
          }
          else if ((pConfig->Channel == ADC_CHANNEL_VCORE)                                                            \
 8002a0a:	683b      	ldr	r3, [r7, #0]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	4a67      	ldr	r2, [pc, #412]	; (8002bac <HAL_ADC_ConfigChannel+0xc68>)
 8002a10:	4293      	cmp	r3, r2
 8002a12:	d12a      	bne.n	8002a6a <HAL_ADC_ConfigChannel+0xb26>
                   && ((tmp_config_internal_channel  & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002a14:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002a18:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d124      	bne.n	8002a6a <HAL_ADC_ConfigChannel+0xb26>
          {
#if !defined (ADC2)
            if (ADC_VCORE_INSTANCE(hadc))
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	4a62      	ldr	r2, [pc, #392]	; (8002bb0 <HAL_ADC_ConfigChannel+0xc6c>)
 8002a26:	4293      	cmp	r3, r2
 8002a28:	d11f      	bne.n	8002a6a <HAL_ADC_ConfigChannel+0xb26>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	4a57      	ldr	r2, [pc, #348]	; (8002b8c <HAL_ADC_ConfigChannel+0xc48>)
 8002a30:	4293      	cmp	r3, r2
 8002a32:	d101      	bne.n	8002a38 <HAL_ADC_ConfigChannel+0xaf4>
 8002a34:	4a56      	ldr	r2, [pc, #344]	; (8002b90 <HAL_ADC_ConfigChannel+0xc4c>)
 8002a36:	e000      	b.n	8002a3a <HAL_ADC_ConfigChannel+0xaf6>
 8002a38:	4a56      	ldr	r2, [pc, #344]	; (8002b94 <HAL_ADC_ConfigChannel+0xc50>)
 8002a3a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002a3e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002a42:	4619      	mov	r1, r3
 8002a44:	4610      	mov	r0, r2
 8002a46:	f7fe fcec 	bl	8001422 <LL_ADC_SetCommonPathInternalCh>
                                             LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
              if (HAL_GetREVID() <= REV_ID_A) /* STM32U5 silicon Rev.A */
 8002a4a:	f7fe fcc9 	bl	80013e0 <HAL_GetREVID>
 8002a4e:	4603      	mov	r3, r0
 8002a50:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002a54:	d809      	bhi.n	8002a6a <HAL_ADC_ConfigChannel+0xb26>
              {
                SET_BIT((hadc->Instance->OR), ADC_OR_CHN0SEL);
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f8d3 20d0 	ldr.w	r2, [r3, #208]	; 0xd0
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f042 0201 	orr.w	r2, r2, #1
 8002a66:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
            /* nothing to do */
          }
          /* If STM32U5 silicon Rev.B (or 4M), ADC_CHANNEL_DAC1CH1 and ADC_CHANNEL_DAC1CH2 are both on Channel 21
             and selection is done via ADC_OR[0] register */
#if !defined (ADC2)
          if (HAL_GetREVID() == REV_ID_B) /* STM32U5 silicon Rev.B */
 8002a6a:	f7fe fcb9 	bl	80013e0 <HAL_GetREVID>
 8002a6e:	4603      	mov	r3, r0
 8002a70:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002a74:	f040 80e8 	bne.w	8002c48 <HAL_ADC_ConfigChannel+0xd04>
          {
            if ((pConfig->Channel == ADC_CHANNEL_DAC1CH2_ADC4)                                                        \
 8002a78:	683b      	ldr	r3, [r7, #0]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	4a4d      	ldr	r2, [pc, #308]	; (8002bb4 <HAL_ADC_ConfigChannel+0xc70>)
 8002a7e:	4293      	cmp	r3, r2
 8002a80:	f040 80e2 	bne.w	8002c48 <HAL_ADC_ConfigChannel+0xd04>
                && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002a84:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002a88:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	f040 80db 	bne.w	8002c48 <HAL_ADC_ConfigChannel+0xd04>
            {
              SET_BIT((hadc->Instance->OR), ADC_OR_CHN0SEL);
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	f8d3 20d0 	ldr.w	r2, [r3, #208]	; 0xd0
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f042 0201 	orr.w	r2, r2, #1
 8002aa2:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
 8002aa6:	e0cf      	b.n	8002c48 <HAL_ADC_ConfigChannel+0xd04>
        /* Regular sequencer configuration */
        /* Note: Case of sequencer set to fully configurable:                   */
        /*       Sequencer rank cannot be disabled, only affected to            */
        /*       another channel.                                               */
        /*       To remove a rank, use parameter 'NbrOfConversion".             */
        if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)         ||
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	691b      	ldr	r3, [r3, #16]
 8002aac:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002ab0:	d004      	beq.n	8002abc <HAL_ADC_ConfigChannel+0xb78>
            (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	691b      	ldr	r3, [r3, #16]
        if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)         ||
 8002ab6:	4a40      	ldr	r2, [pc, #256]	; (8002bb8 <HAL_ADC_ConfigChannel+0xc74>)
 8002ab8:	4293      	cmp	r3, r2
 8002aba:	d106      	bne.n	8002aca <HAL_ADC_ConfigChannel+0xb86>
        {
          /* Sequencer set to not fully configurable:                           */
          /* Reset the channel by disabling the corresponding bitfield.         */
          LL_ADC_REG_SetSequencerChRem(hadc->Instance, tmp_channel);
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	f8d7 10e8 	ldr.w	r1, [r7, #232]	; 0xe8
 8002ac4:	4618      	mov	r0, r3
 8002ac6:	f7fe fe4a 	bl	800175e <LL_ADC_REG_SetSequencerChRem>
        }

        /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
        /* If internal channel selected, enable dedicated internal buffers and    */
        /* paths.                                                                 */
        if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002aca:	683b      	ldr	r3, [r7, #0]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	f280 80ba 	bge.w	8002c48 <HAL_ADC_ConfigChannel+0xd04>
        {
          tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	4a2c      	ldr	r2, [pc, #176]	; (8002b8c <HAL_ADC_ConfigChannel+0xc48>)
 8002ada:	4293      	cmp	r3, r2
 8002adc:	d101      	bne.n	8002ae2 <HAL_ADC_ConfigChannel+0xb9e>
 8002ade:	4b2c      	ldr	r3, [pc, #176]	; (8002b90 <HAL_ADC_ConfigChannel+0xc4c>)
 8002ae0:	e000      	b.n	8002ae4 <HAL_ADC_ConfigChannel+0xba0>
 8002ae2:	4b2c      	ldr	r3, [pc, #176]	; (8002b94 <HAL_ADC_ConfigChannel+0xc50>)
 8002ae4:	4618      	mov	r0, r3
 8002ae6:	f7fe fcaf 	bl	8001448 <LL_ADC_GetCommonPathInternalCh>
 8002aea:	f8c7 00e4 	str.w	r0, [r7, #228]	; 0xe4

          if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002aee:	683b      	ldr	r3, [r7, #0]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	4a32      	ldr	r2, [pc, #200]	; (8002bbc <HAL_ADC_ConfigChannel+0xc78>)
 8002af4:	4293      	cmp	r3, r2
 8002af6:	d110      	bne.n	8002b1a <HAL_ADC_ConfigChannel+0xbd6>
          {
            LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	4a23      	ldr	r2, [pc, #140]	; (8002b8c <HAL_ADC_ConfigChannel+0xc48>)
 8002afe:	4293      	cmp	r3, r2
 8002b00:	d101      	bne.n	8002b06 <HAL_ADC_ConfigChannel+0xbc2>
 8002b02:	4a23      	ldr	r2, [pc, #140]	; (8002b90 <HAL_ADC_ConfigChannel+0xc4c>)
 8002b04:	e000      	b.n	8002b08 <HAL_ADC_ConfigChannel+0xbc4>
 8002b06:	4a23      	ldr	r2, [pc, #140]	; (8002b94 <HAL_ADC_ConfigChannel+0xc50>)
 8002b08:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002b0c:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002b10:	4619      	mov	r1, r3
 8002b12:	4610      	mov	r0, r2
 8002b14:	f7fe fc85 	bl	8001422 <LL_ADC_SetCommonPathInternalCh>
 8002b18:	e06d      	b.n	8002bf6 <HAL_ADC_ConfigChannel+0xcb2>
                                           ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
          }
          else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 8002b1a:	683b      	ldr	r3, [r7, #0]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	4a28      	ldr	r2, [pc, #160]	; (8002bc0 <HAL_ADC_ConfigChannel+0xc7c>)
 8002b20:	4293      	cmp	r3, r2
 8002b22:	d110      	bne.n	8002b46 <HAL_ADC_ConfigChannel+0xc02>
          {
            LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	4a18      	ldr	r2, [pc, #96]	; (8002b8c <HAL_ADC_ConfigChannel+0xc48>)
 8002b2a:	4293      	cmp	r3, r2
 8002b2c:	d101      	bne.n	8002b32 <HAL_ADC_ConfigChannel+0xbee>
 8002b2e:	4a18      	ldr	r2, [pc, #96]	; (8002b90 <HAL_ADC_ConfigChannel+0xc4c>)
 8002b30:	e000      	b.n	8002b34 <HAL_ADC_ConfigChannel+0xbf0>
 8002b32:	4a18      	ldr	r2, [pc, #96]	; (8002b94 <HAL_ADC_ConfigChannel+0xc50>)
 8002b34:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002b38:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002b3c:	4619      	mov	r1, r3
 8002b3e:	4610      	mov	r0, r2
 8002b40:	f7fe fc6f 	bl	8001422 <LL_ADC_SetCommonPathInternalCh>
 8002b44:	e057      	b.n	8002bf6 <HAL_ADC_ConfigChannel+0xcb2>
                                           ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
          }
          else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 8002b46:	683b      	ldr	r3, [r7, #0]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	4a17      	ldr	r2, [pc, #92]	; (8002ba8 <HAL_ADC_ConfigChannel+0xc64>)
 8002b4c:	4293      	cmp	r3, r2
 8002b4e:	d110      	bne.n	8002b72 <HAL_ADC_ConfigChannel+0xc2e>
          {
            LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	4a0d      	ldr	r2, [pc, #52]	; (8002b8c <HAL_ADC_ConfigChannel+0xc48>)
 8002b56:	4293      	cmp	r3, r2
 8002b58:	d101      	bne.n	8002b5e <HAL_ADC_ConfigChannel+0xc1a>
 8002b5a:	4a0d      	ldr	r2, [pc, #52]	; (8002b90 <HAL_ADC_ConfigChannel+0xc4c>)
 8002b5c:	e000      	b.n	8002b60 <HAL_ADC_ConfigChannel+0xc1c>
 8002b5e:	4a0d      	ldr	r2, [pc, #52]	; (8002b94 <HAL_ADC_ConfigChannel+0xc50>)
 8002b60:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002b64:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8002b68:	4619      	mov	r1, r3
 8002b6a:	4610      	mov	r0, r2
 8002b6c:	f7fe fc59 	bl	8001422 <LL_ADC_SetCommonPathInternalCh>
 8002b70:	e041      	b.n	8002bf6 <HAL_ADC_ConfigChannel+0xcb2>
                                           ~LL_ADC_PATH_INTERNAL_VREFINT & tmp_config_internal_channel);
          }
          else if (pConfig->Channel == ADC_CHANNEL_VCORE)
 8002b72:	683b      	ldr	r3, [r7, #0]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	4a0d      	ldr	r2, [pc, #52]	; (8002bac <HAL_ADC_ConfigChannel+0xc68>)
 8002b78:	4293      	cmp	r3, r2
 8002b7a:	d13c      	bne.n	8002bf6 <HAL_ADC_ConfigChannel+0xcb2>
          {
#if !defined (ADC2)
            LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	4a02      	ldr	r2, [pc, #8]	; (8002b8c <HAL_ADC_ConfigChannel+0xc48>)
 8002b82:	4293      	cmp	r3, r2
 8002b84:	d11e      	bne.n	8002bc4 <HAL_ADC_ConfigChannel+0xc80>
 8002b86:	4a02      	ldr	r2, [pc, #8]	; (8002b90 <HAL_ADC_ConfigChannel+0xc4c>)
 8002b88:	e01d      	b.n	8002bc6 <HAL_ADC_ConfigChannel+0xc82>
 8002b8a:	bf00      	nop
 8002b8c:	42028000 	.word	0x42028000
 8002b90:	42028308 	.word	0x42028308
 8002b94:	46021308 	.word	0x46021308
 8002b98:	b6002000 	.word	0xb6002000
 8002b9c:	20000000 	.word	0x20000000
 8002ba0:	053e2d63 	.word	0x053e2d63
 8002ba4:	ba004000 	.word	0xba004000
 8002ba8:	80000001 	.word	0x80000001
 8002bac:	b2001000 	.word	0xb2001000
 8002bb0:	46021000 	.word	0x46021000
 8002bb4:	d7200000 	.word	0xd7200000
 8002bb8:	80000010 	.word	0x80000010
 8002bbc:	ce080000 	.word	0xce080000
 8002bc0:	ca040000 	.word	0xca040000
 8002bc4:	4a25      	ldr	r2, [pc, #148]	; (8002c5c <HAL_ADC_ConfigChannel+0xd18>)
 8002bc6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002bca:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8002bce:	4619      	mov	r1, r3
 8002bd0:	4610      	mov	r0, r2
 8002bd2:	f7fe fc26 	bl	8001422 <LL_ADC_SetCommonPathInternalCh>
                                           ~LL_ADC_PATH_INTERNAL_VREFINT & tmp_config_internal_channel);
            if (HAL_GetREVID() <= REV_ID_A) /* STM32U5 silicon Rev.A */
 8002bd6:	f7fe fc03 	bl	80013e0 <HAL_GetREVID>
 8002bda:	4603      	mov	r3, r0
 8002bdc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002be0:	d809      	bhi.n	8002bf6 <HAL_ADC_ConfigChannel+0xcb2>
            {
              SET_BIT((hadc->Instance->OR), ADC_OR_CHN0SEL);
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f8d3 20d0 	ldr.w	r2, [r3, #208]	; 0xd0
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	f042 0201 	orr.w	r2, r2, #1
 8002bf2:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
            /* nothing to do */
          }
          /* If STM32U5 2M silicon Rev.B (or 4M), ADC_CHANNEL_DAC1CH1 and ADC_CHANNEL_DAC1CH2 are both on Channel 21
             and selection is done via ADC_OR[0] register */
#if !defined (ADC2)
          if (HAL_GetREVID() == REV_ID_B) /* STM32U5 silicon Rev.B */
 8002bf6:	f7fe fbf3 	bl	80013e0 <HAL_GetREVID>
 8002bfa:	4603      	mov	r3, r0
 8002bfc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002c00:	d122      	bne.n	8002c48 <HAL_ADC_ConfigChannel+0xd04>
          {
            if ((pConfig->Channel == ADC_CHANNEL_DAC1CH2_ADC4)                                                        \
 8002c02:	683b      	ldr	r3, [r7, #0]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	4a16      	ldr	r2, [pc, #88]	; (8002c60 <HAL_ADC_ConfigChannel+0xd1c>)
 8002c08:	4293      	cmp	r3, r2
 8002c0a:	d11d      	bne.n	8002c48 <HAL_ADC_ConfigChannel+0xd04>
                && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002c0c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002c10:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d117      	bne.n	8002c48 <HAL_ADC_ConfigChannel+0xd04>
            {
              SET_BIT((hadc->Instance->OR), ADC_OR_CHN0SEL);
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	f8d3 20d0 	ldr.w	r2, [r3, #208]	; 0xd0
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	f042 0201 	orr.w	r2, r2, #1
 8002c28:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
 8002c2c:	e00c      	b.n	8002c48 <HAL_ADC_ConfigChannel+0xd04>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002c32:	f043 0220 	orr.w	r2, r3, #32
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	679a      	str	r2, [r3, #120]	; 0x78
    tmp_hal_status = HAL_ERROR;
 8002c3a:	2301      	movs	r3, #1
 8002c3c:	f887 30ef 	strb.w	r3, [r7, #239]	; 0xef
 8002c40:	e002      	b.n	8002c48 <HAL_ADC_ConfigChannel+0xd04>
              if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002c42:	bf00      	nop
 8002c44:	e000      	b.n	8002c48 <HAL_ADC_ConfigChannel+0xd04>
              if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002c46:	bf00      	nop
  }

  __HAL_UNLOCK(hadc);
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	2200      	movs	r2, #0
 8002c4c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return tmp_hal_status;
 8002c50:	f897 30ef 	ldrb.w	r3, [r7, #239]	; 0xef
}
 8002c54:	4618      	mov	r0, r3
 8002c56:	37f0      	adds	r7, #240	; 0xf0
 8002c58:	46bd      	mov	sp, r7
 8002c5a:	bd80      	pop	{r7, pc}
 8002c5c:	46021308 	.word	0x46021308
 8002c60:	d7200000 	.word	0xd7200000

08002c64 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c64:	b480      	push	{r7}
 8002c66:	b085      	sub	sp, #20
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	f003 0307 	and.w	r3, r3, #7
 8002c72:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002c74:	4b0c      	ldr	r3, [pc, #48]	; (8002ca8 <__NVIC_SetPriorityGrouping+0x44>)
 8002c76:	68db      	ldr	r3, [r3, #12]
 8002c78:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002c7a:	68ba      	ldr	r2, [r7, #8]
 8002c7c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002c80:	4013      	ands	r3, r2
 8002c82:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002c88:	68bb      	ldr	r3, [r7, #8]
 8002c8a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002c8c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002c90:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002c94:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002c96:	4a04      	ldr	r2, [pc, #16]	; (8002ca8 <__NVIC_SetPriorityGrouping+0x44>)
 8002c98:	68bb      	ldr	r3, [r7, #8]
 8002c9a:	60d3      	str	r3, [r2, #12]
}
 8002c9c:	bf00      	nop
 8002c9e:	3714      	adds	r7, #20
 8002ca0:	46bd      	mov	sp, r7
 8002ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca6:	4770      	bx	lr
 8002ca8:	e000ed00 	.word	0xe000ed00

08002cac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002cac:	b480      	push	{r7}
 8002cae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002cb0:	4b04      	ldr	r3, [pc, #16]	; (8002cc4 <__NVIC_GetPriorityGrouping+0x18>)
 8002cb2:	68db      	ldr	r3, [r3, #12]
 8002cb4:	0a1b      	lsrs	r3, r3, #8
 8002cb6:	f003 0307 	and.w	r3, r3, #7
}
 8002cba:	4618      	mov	r0, r3
 8002cbc:	46bd      	mov	sp, r7
 8002cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc2:	4770      	bx	lr
 8002cc4:	e000ed00 	.word	0xe000ed00

08002cc8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002cc8:	b480      	push	{r7}
 8002cca:	b083      	sub	sp, #12
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	4603      	mov	r3, r0
 8002cd0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002cd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	db0b      	blt.n	8002cf2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002cda:	79fb      	ldrb	r3, [r7, #7]
 8002cdc:	f003 021f 	and.w	r2, r3, #31
 8002ce0:	4907      	ldr	r1, [pc, #28]	; (8002d00 <__NVIC_EnableIRQ+0x38>)
 8002ce2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ce6:	095b      	lsrs	r3, r3, #5
 8002ce8:	2001      	movs	r0, #1
 8002cea:	fa00 f202 	lsl.w	r2, r0, r2
 8002cee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002cf2:	bf00      	nop
 8002cf4:	370c      	adds	r7, #12
 8002cf6:	46bd      	mov	sp, r7
 8002cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cfc:	4770      	bx	lr
 8002cfe:	bf00      	nop
 8002d00:	e000e100 	.word	0xe000e100

08002d04 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002d04:	b480      	push	{r7}
 8002d06:	b083      	sub	sp, #12
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	4603      	mov	r3, r0
 8002d0c:	6039      	str	r1, [r7, #0]
 8002d0e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	db0a      	blt.n	8002d2e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d18:	683b      	ldr	r3, [r7, #0]
 8002d1a:	b2da      	uxtb	r2, r3
 8002d1c:	490c      	ldr	r1, [pc, #48]	; (8002d50 <__NVIC_SetPriority+0x4c>)
 8002d1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d22:	0112      	lsls	r2, r2, #4
 8002d24:	b2d2      	uxtb	r2, r2
 8002d26:	440b      	add	r3, r1
 8002d28:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002d2c:	e00a      	b.n	8002d44 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d2e:	683b      	ldr	r3, [r7, #0]
 8002d30:	b2da      	uxtb	r2, r3
 8002d32:	4908      	ldr	r1, [pc, #32]	; (8002d54 <__NVIC_SetPriority+0x50>)
 8002d34:	79fb      	ldrb	r3, [r7, #7]
 8002d36:	f003 030f 	and.w	r3, r3, #15
 8002d3a:	3b04      	subs	r3, #4
 8002d3c:	0112      	lsls	r2, r2, #4
 8002d3e:	b2d2      	uxtb	r2, r2
 8002d40:	440b      	add	r3, r1
 8002d42:	761a      	strb	r2, [r3, #24]
}
 8002d44:	bf00      	nop
 8002d46:	370c      	adds	r7, #12
 8002d48:	46bd      	mov	sp, r7
 8002d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d4e:	4770      	bx	lr
 8002d50:	e000e100 	.word	0xe000e100
 8002d54:	e000ed00 	.word	0xe000ed00

08002d58 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002d58:	b480      	push	{r7}
 8002d5a:	b089      	sub	sp, #36	; 0x24
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	60f8      	str	r0, [r7, #12]
 8002d60:	60b9      	str	r1, [r7, #8]
 8002d62:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	f003 0307 	and.w	r3, r3, #7
 8002d6a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002d6c:	69fb      	ldr	r3, [r7, #28]
 8002d6e:	f1c3 0307 	rsb	r3, r3, #7
 8002d72:	2b04      	cmp	r3, #4
 8002d74:	bf28      	it	cs
 8002d76:	2304      	movcs	r3, #4
 8002d78:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002d7a:	69fb      	ldr	r3, [r7, #28]
 8002d7c:	3304      	adds	r3, #4
 8002d7e:	2b06      	cmp	r3, #6
 8002d80:	d902      	bls.n	8002d88 <NVIC_EncodePriority+0x30>
 8002d82:	69fb      	ldr	r3, [r7, #28]
 8002d84:	3b03      	subs	r3, #3
 8002d86:	e000      	b.n	8002d8a <NVIC_EncodePriority+0x32>
 8002d88:	2300      	movs	r3, #0
 8002d8a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d8c:	f04f 32ff 	mov.w	r2, #4294967295
 8002d90:	69bb      	ldr	r3, [r7, #24]
 8002d92:	fa02 f303 	lsl.w	r3, r2, r3
 8002d96:	43da      	mvns	r2, r3
 8002d98:	68bb      	ldr	r3, [r7, #8]
 8002d9a:	401a      	ands	r2, r3
 8002d9c:	697b      	ldr	r3, [r7, #20]
 8002d9e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002da0:	f04f 31ff 	mov.w	r1, #4294967295
 8002da4:	697b      	ldr	r3, [r7, #20]
 8002da6:	fa01 f303 	lsl.w	r3, r1, r3
 8002daa:	43d9      	mvns	r1, r3
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002db0:	4313      	orrs	r3, r2
         );
}
 8002db2:	4618      	mov	r0, r3
 8002db4:	3724      	adds	r7, #36	; 0x24
 8002db6:	46bd      	mov	sp, r7
 8002db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dbc:	4770      	bx	lr
	...

08002dc0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002dc0:	b580      	push	{r7, lr}
 8002dc2:	b082      	sub	sp, #8
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	3b01      	subs	r3, #1
 8002dcc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002dd0:	d301      	bcc.n	8002dd6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002dd2:	2301      	movs	r3, #1
 8002dd4:	e00f      	b.n	8002df6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002dd6:	4a0a      	ldr	r2, [pc, #40]	; (8002e00 <SysTick_Config+0x40>)
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	3b01      	subs	r3, #1
 8002ddc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002dde:	210f      	movs	r1, #15
 8002de0:	f04f 30ff 	mov.w	r0, #4294967295
 8002de4:	f7ff ff8e 	bl	8002d04 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002de8:	4b05      	ldr	r3, [pc, #20]	; (8002e00 <SysTick_Config+0x40>)
 8002dea:	2200      	movs	r2, #0
 8002dec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002dee:	4b04      	ldr	r3, [pc, #16]	; (8002e00 <SysTick_Config+0x40>)
 8002df0:	2207      	movs	r2, #7
 8002df2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002df4:	2300      	movs	r3, #0
}
 8002df6:	4618      	mov	r0, r3
 8002df8:	3708      	adds	r7, #8
 8002dfa:	46bd      	mov	sp, r7
 8002dfc:	bd80      	pop	{r7, pc}
 8002dfe:	bf00      	nop
 8002e00:	e000e010 	.word	0xe000e010

08002e04 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e04:	b580      	push	{r7, lr}
 8002e06:	b082      	sub	sp, #8
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002e0c:	6878      	ldr	r0, [r7, #4]
 8002e0e:	f7ff ff29 	bl	8002c64 <__NVIC_SetPriorityGrouping>
}
 8002e12:	bf00      	nop
 8002e14:	3708      	adds	r7, #8
 8002e16:	46bd      	mov	sp, r7
 8002e18:	bd80      	pop	{r7, pc}

08002e1a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002e1a:	b580      	push	{r7, lr}
 8002e1c:	b086      	sub	sp, #24
 8002e1e:	af00      	add	r7, sp, #0
 8002e20:	4603      	mov	r3, r0
 8002e22:	60b9      	str	r1, [r7, #8]
 8002e24:	607a      	str	r2, [r7, #4]
 8002e26:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002e28:	f7ff ff40 	bl	8002cac <__NVIC_GetPriorityGrouping>
 8002e2c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002e2e:	687a      	ldr	r2, [r7, #4]
 8002e30:	68b9      	ldr	r1, [r7, #8]
 8002e32:	6978      	ldr	r0, [r7, #20]
 8002e34:	f7ff ff90 	bl	8002d58 <NVIC_EncodePriority>
 8002e38:	4602      	mov	r2, r0
 8002e3a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002e3e:	4611      	mov	r1, r2
 8002e40:	4618      	mov	r0, r3
 8002e42:	f7ff ff5f 	bl	8002d04 <__NVIC_SetPriority>
}
 8002e46:	bf00      	nop
 8002e48:	3718      	adds	r7, #24
 8002e4a:	46bd      	mov	sp, r7
 8002e4c:	bd80      	pop	{r7, pc}

08002e4e <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32u5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e4e:	b580      	push	{r7, lr}
 8002e50:	b082      	sub	sp, #8
 8002e52:	af00      	add	r7, sp, #0
 8002e54:	4603      	mov	r3, r0
 8002e56:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002e58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e5c:	4618      	mov	r0, r3
 8002e5e:	f7ff ff33 	bl	8002cc8 <__NVIC_EnableIRQ>
}
 8002e62:	bf00      	nop
 8002e64:	3708      	adds	r7, #8
 8002e66:	46bd      	mov	sp, r7
 8002e68:	bd80      	pop	{r7, pc}

08002e6a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002e6a:	b580      	push	{r7, lr}
 8002e6c:	b082      	sub	sp, #8
 8002e6e:	af00      	add	r7, sp, #0
 8002e70:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8002e72:	6878      	ldr	r0, [r7, #4]
 8002e74:	f7ff ffa4 	bl	8002dc0 <SysTick_Config>
 8002e78:	4603      	mov	r3, r0
}
 8002e7a:	4618      	mov	r0, r3
 8002e7c:	3708      	adds	r7, #8
 8002e7e:	46bd      	mov	sp, r7
 8002e80:	bd80      	pop	{r7, pc}

08002e82 <HAL_DMA_Abort>:
  *         is suspended while a data transfer is on-going, the current data will be transferred and the channel will be
  *         effectively suspended only after the transfer of any on-going data is finished.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *const hdma)
{
 8002e82:	b580      	push	{r7, lr}
 8002e84:	b084      	sub	sp, #16
 8002e86:	af00      	add	r7, sp, #0
 8002e88:	6078      	str	r0, [r7, #4]
  /* Get tick number */
  uint32_t tickstart =  HAL_GetTick();
 8002e8a:	f7fe fa79 	bl	8001380 <HAL_GetTick>
 8002e8e:	60f8      	str	r0, [r7, #12]

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d101      	bne.n	8002e9a <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8002e96:	2301      	movs	r3, #1
 8002e98:	e06b      	b.n	8002f72 <HAL_DMA_Abort+0xf0>
  }

  /* Check DMA channel state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8002ea0:	b2db      	uxtb	r3, r3
 8002ea2:	2b02      	cmp	r3, #2
 8002ea4:	d008      	beq.n	8002eb8 <HAL_DMA_Abort+0x36>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	2220      	movs	r2, #32
 8002eaa:	659a      	str	r2, [r3, #88]	; 0x58

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	2200      	movs	r2, #0
 8002eb0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

    return HAL_ERROR;
 8002eb4:	2301      	movs	r3, #1
 8002eb6:	e05c      	b.n	8002f72 <HAL_DMA_Abort+0xf0>
  }
  else
  {
    /* Suspend the channel */
    hdma->Instance->CCR |= DMA_CCR_SUSP;
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	695a      	ldr	r2, [r3, #20]
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	f042 0204 	orr.w	r2, r2, #4
 8002ec6:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_SUSPEND;
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	2205      	movs	r2, #5
 8002ecc:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    /* Check if the DMA Channel is suspended */
    while ((hdma->Instance->CSR & DMA_CSR_SUSPF) == 0U)
 8002ed0:	e020      	b.n	8002f14 <HAL_DMA_Abort+0x92>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 8002ed2:	f7fe fa55 	bl	8001380 <HAL_GetTick>
 8002ed6:	4602      	mov	r2, r0
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	1ad3      	subs	r3, r2, r3
 8002edc:	2b05      	cmp	r3, #5
 8002ede:	d919      	bls.n	8002f14 <HAL_DMA_Abort+0x92>
      {
        /* Update the DMA channel error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TIMEOUT;
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ee4:	f043 0210 	orr.w	r2, r3, #16
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	659a      	str	r2, [r3, #88]	; 0x58

        /* Update the DMA channel state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	2203      	movs	r2, #3
 8002ef0:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

        /* Check DMA channel transfer mode */
        if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002ef8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d003      	beq.n	8002f08 <HAL_DMA_Abort+0x86>
        {
          /* Update the linked-list queue state */
          hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f04:	2201      	movs	r2, #1
 8002f06:	731a      	strb	r2, [r3, #12]
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	2200      	movs	r2, #0
 8002f0c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        return HAL_ERROR;
 8002f10:	2301      	movs	r3, #1
 8002f12:	e02e      	b.n	8002f72 <HAL_DMA_Abort+0xf0>
    while ((hdma->Instance->CSR & DMA_CSR_SUSPF) == 0U)
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	691b      	ldr	r3, [r3, #16]
 8002f1a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d0d7      	beq.n	8002ed2 <HAL_DMA_Abort+0x50>
      }
    }

    /* Reset the channel */
    hdma->Instance->CCR |= DMA_CCR_RESET;
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	695a      	ldr	r2, [r3, #20]
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	f042 0202 	orr.w	r2, r2, #2
 8002f30:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	2204      	movs	r2, #4
 8002f36:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    /* Clear all status flags */
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC | DMA_FLAG_HT | DMA_FLAG_DTE | DMA_FLAG_ULE | DMA_FLAG_USE | DMA_FLAG_SUSP |
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f44f 42fe 	mov.w	r2, #32512	; 0x7f00
 8002f42:	60da      	str	r2, [r3, #12]
                                DMA_FLAG_TO));

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_READY;
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	2201      	movs	r2, #1
 8002f48:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    /* Check DMA channel transfer mode */
    if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002f50:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d007      	beq.n	8002f68 <HAL_DMA_Abort+0xe6>
    {
      /* Update the linked-list queue state */
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f5c:	2201      	movs	r2, #1
 8002f5e:	731a      	strb	r2, [r3, #12]

      /* Clear remaining data size to ensure loading linked-list from memory next start */
      hdma->Instance->CBR1 = 0U;
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	2200      	movs	r2, #0
 8002f66:	649a      	str	r2, [r3, #72]	; 0x48
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	2200      	movs	r2, #0
 8002f6c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8002f70:	2300      	movs	r3, #0
}
 8002f72:	4618      	mov	r0, r3
 8002f74:	3710      	adds	r7, #16
 8002f76:	46bd      	mov	sp, r7
 8002f78:	bd80      	pop	{r7, pc}

08002f7a <HAL_DMA_Abort_IT>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *const hdma)
{
 8002f7a:	b480      	push	{r7}
 8002f7c:	b083      	sub	sp, #12
 8002f7e:	af00      	add	r7, sp, #0
 8002f80:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d101      	bne.n	8002f8c <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8002f88:	2301      	movs	r3, #1
 8002f8a:	e019      	b.n	8002fc0 <HAL_DMA_Abort_IT+0x46>
  }

  /* Check DMA channel state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8002f92:	b2db      	uxtb	r3, r3
 8002f94:	2b02      	cmp	r3, #2
 8002f96:	d004      	beq.n	8002fa2 <HAL_DMA_Abort_IT+0x28>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	2220      	movs	r2, #32
 8002f9c:	659a      	str	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 8002f9e:	2301      	movs	r3, #1
 8002fa0:	e00e      	b.n	8002fc0 <HAL_DMA_Abort_IT+0x46>
  }
  else
  {
    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	2204      	movs	r2, #4
 8002fa6:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    /* Suspend the channel and activate suspend interrupt */
    hdma->Instance->CCR |= (DMA_CCR_SUSP | DMA_CCR_SUSPIE);
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	695b      	ldr	r3, [r3, #20]
 8002fb0:	687a      	ldr	r2, [r7, #4]
 8002fb2:	6812      	ldr	r2, [r2, #0]
 8002fb4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002fb8:	f043 0304 	orr.w	r3, r3, #4
 8002fbc:	6153      	str	r3, [r2, #20]
  }

  return HAL_OK;
 8002fbe:	2300      	movs	r3, #0
}
 8002fc0:	4618      	mov	r0, r3
 8002fc2:	370c      	adds	r7, #12
 8002fc4:	46bd      	mov	sp, r7
 8002fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fca:	4770      	bx	lr

08002fcc <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8002fcc:	b480      	push	{r7}
 8002fce:	b089      	sub	sp, #36	; 0x24
 8002fd0:	af00      	add	r7, sp, #0
 8002fd2:	6078      	str	r0, [r7, #4]
 8002fd4:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t pin_position;
  uint32_t position = 0U;
 8002fd6:	2300      	movs	r3, #0
 8002fd8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Save GPIO port address */
  p_gpio = GPIOx;
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	613b      	str	r3, [r7, #16]

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8002fde:	e1ba      	b.n	8003356 <HAL_GPIO_Init+0x38a>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8002fe0:	683b      	ldr	r3, [r7, #0]
 8002fe2:	681a      	ldr	r2, [r3, #0]
 8002fe4:	2101      	movs	r1, #1
 8002fe6:	697b      	ldr	r3, [r7, #20]
 8002fe8:	fa01 f303 	lsl.w	r3, r1, r3
 8002fec:	4013      	ands	r3, r2
 8002fee:	60fb      	str	r3, [r7, #12]

    /* Save Pin Position */
    pin_position = position;
 8002ff0:	697b      	ldr	r3, [r7, #20]
 8002ff2:	61bb      	str	r3, [r7, #24]

    if (iocurrent != 0U)
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	f000 81aa 	beq.w	8003350 <HAL_GPIO_Init+0x384>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if (GPIOx == LPGPIO1)
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	4a55      	ldr	r2, [pc, #340]	; (8003154 <HAL_GPIO_Init+0x188>)
 8003000:	4293      	cmp	r3, r2
 8003002:	d15d      	bne.n	80030c0 <HAL_GPIO_Init+0xf4>
      {
        /* MODER configuration */
        tmp = GPIOx->MODER;
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	61fb      	str	r3, [r7, #28]
        tmp &= ~(LPGPIO_MODER_MOD0 << position);
 800300a:	2201      	movs	r2, #1
 800300c:	697b      	ldr	r3, [r7, #20]
 800300e:	fa02 f303 	lsl.w	r3, r2, r3
 8003012:	43db      	mvns	r3, r3
 8003014:	69fa      	ldr	r2, [r7, #28]
 8003016:	4013      	ands	r3, r2
 8003018:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE_OUTPUT_PP) << position);
 800301a:	683b      	ldr	r3, [r7, #0]
 800301c:	685b      	ldr	r3, [r3, #4]
 800301e:	f003 0201 	and.w	r2, r3, #1
 8003022:	697b      	ldr	r3, [r7, #20]
 8003024:	fa02 f303 	lsl.w	r3, r2, r3
 8003028:	69fa      	ldr	r2, [r7, #28]
 800302a:	4313      	orrs	r3, r2
 800302c:	61fb      	str	r3, [r7, #28]
        GPIOx->MODER = tmp;
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	69fa      	ldr	r2, [r7, #28]
 8003032:	601a      	str	r2, [r3, #0]

        /* Save GPIO Port and pin index */
        p_gpio = LPGPIO_Map[position].GPIO_PORT;
 8003034:	4a48      	ldr	r2, [pc, #288]	; (8003158 <HAL_GPIO_Init+0x18c>)
 8003036:	697b      	ldr	r3, [r7, #20]
 8003038:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800303c:	613b      	str	r3, [r7, #16]
        pin_position = LPGPIO_Map[position].Pin_Pos;
 800303e:	4a46      	ldr	r2, [pc, #280]	; (8003158 <HAL_GPIO_Init+0x18c>)
 8003040:	697b      	ldr	r3, [r7, #20]
 8003042:	00db      	lsls	r3, r3, #3
 8003044:	4413      	add	r3, r2
 8003046:	685b      	ldr	r3, [r3, #4]
 8003048:	61bb      	str	r3, [r7, #24]

        /* Configure Alternate function mapped with the current IO */
        tmp = p_gpio->AFR[(pin_position) >> 3U];
 800304a:	69bb      	ldr	r3, [r7, #24]
 800304c:	08da      	lsrs	r2, r3, #3
 800304e:	693b      	ldr	r3, [r7, #16]
 8003050:	3208      	adds	r2, #8
 8003052:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003056:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << (((pin_position) & 0x07U) * 4U));
 8003058:	69bb      	ldr	r3, [r7, #24]
 800305a:	f003 0307 	and.w	r3, r3, #7
 800305e:	009b      	lsls	r3, r3, #2
 8003060:	220f      	movs	r2, #15
 8003062:	fa02 f303 	lsl.w	r3, r2, r3
 8003066:	43db      	mvns	r3, r3
 8003068:	69fa      	ldr	r2, [r7, #28]
 800306a:	4013      	ands	r3, r2
 800306c:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_AF11_LPGPIO1 & 0x0FUL) << (((pin_position) & 0x07U) * 4U));
 800306e:	69bb      	ldr	r3, [r7, #24]
 8003070:	f003 0307 	and.w	r3, r3, #7
 8003074:	009b      	lsls	r3, r3, #2
 8003076:	220b      	movs	r2, #11
 8003078:	fa02 f303 	lsl.w	r3, r2, r3
 800307c:	69fa      	ldr	r2, [r7, #28]
 800307e:	4313      	orrs	r3, r2
 8003080:	61fb      	str	r3, [r7, #28]
        p_gpio->AFR[(pin_position) >> 3U] = tmp;
 8003082:	69bb      	ldr	r3, [r7, #24]
 8003084:	08da      	lsrs	r2, r3, #3
 8003086:	693b      	ldr	r3, [r7, #16]
 8003088:	3208      	adds	r2, #8
 800308a:	69f9      	ldr	r1, [r7, #28]
 800308c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 8003090:	693b      	ldr	r3, [r7, #16]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 8003096:	69bb      	ldr	r3, [r7, #24]
 8003098:	005b      	lsls	r3, r3, #1
 800309a:	2203      	movs	r2, #3
 800309c:	fa02 f303 	lsl.w	r3, r2, r3
 80030a0:	43db      	mvns	r3, r3
 80030a2:	69fa      	ldr	r2, [r7, #28]
 80030a4:	4013      	ands	r3, r2
 80030a6:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_MODE_AF_PP & 0x0FUL) << (pin_position * 2U));
 80030a8:	69bb      	ldr	r3, [r7, #24]
 80030aa:	005b      	lsls	r3, r3, #1
 80030ac:	2202      	movs	r2, #2
 80030ae:	fa02 f303 	lsl.w	r3, r2, r3
 80030b2:	69fa      	ldr	r2, [r7, #28]
 80030b4:	4313      	orrs	r3, r2
 80030b6:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 80030b8:	693b      	ldr	r3, [r7, #16]
 80030ba:	69fa      	ldr	r2, [r7, #28]
 80030bc:	601a      	str	r2, [r3, #0]
 80030be:	e067      	b.n	8003190 <HAL_GPIO_Init+0x1c4>
      }
      else if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80030c0:	683b      	ldr	r3, [r7, #0]
 80030c2:	685b      	ldr	r3, [r3, #4]
 80030c4:	2b02      	cmp	r3, #2
 80030c6:	d003      	beq.n	80030d0 <HAL_GPIO_Init+0x104>
 80030c8:	683b      	ldr	r3, [r7, #0]
 80030ca:	685b      	ldr	r3, [r3, #4]
 80030cc:	2b12      	cmp	r3, #18
 80030ce:	d145      	bne.n	800315c <HAL_GPIO_Init+0x190>
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 80030d0:	697b      	ldr	r3, [r7, #20]
 80030d2:	08da      	lsrs	r2, r3, #3
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	3208      	adds	r2, #8
 80030d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80030dc:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << ((position & 0x07U) * 4U));
 80030de:	697b      	ldr	r3, [r7, #20]
 80030e0:	f003 0307 	and.w	r3, r3, #7
 80030e4:	009b      	lsls	r3, r3, #2
 80030e6:	220f      	movs	r2, #15
 80030e8:	fa02 f303 	lsl.w	r3, r2, r3
 80030ec:	43db      	mvns	r3, r3
 80030ee:	69fa      	ldr	r2, [r7, #28]
 80030f0:	4013      	ands	r3, r2
 80030f2:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * 4U));
 80030f4:	683b      	ldr	r3, [r7, #0]
 80030f6:	691b      	ldr	r3, [r3, #16]
 80030f8:	f003 020f 	and.w	r2, r3, #15
 80030fc:	697b      	ldr	r3, [r7, #20]
 80030fe:	f003 0307 	and.w	r3, r3, #7
 8003102:	009b      	lsls	r3, r3, #2
 8003104:	fa02 f303 	lsl.w	r3, r2, r3
 8003108:	69fa      	ldr	r2, [r7, #28]
 800310a:	4313      	orrs	r3, r2
 800310c:	61fb      	str	r3, [r7, #28]
        GPIOx->AFR[position >> 3U] = tmp;
 800310e:	697b      	ldr	r3, [r7, #20]
 8003110:	08da      	lsrs	r2, r3, #3
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	3208      	adds	r2, #8
 8003116:	69f9      	ldr	r1, [r7, #28]
 8003118:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 800311c:	693b      	ldr	r3, [r7, #16]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 8003122:	69bb      	ldr	r3, [r7, #24]
 8003124:	005b      	lsls	r3, r3, #1
 8003126:	2203      	movs	r2, #3
 8003128:	fa02 f303 	lsl.w	r3, r2, r3
 800312c:	43db      	mvns	r3, r3
 800312e:	69fa      	ldr	r2, [r7, #28]
 8003130:	4013      	ands	r3, r2
 8003132:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * 2U));
 8003134:	683b      	ldr	r3, [r7, #0]
 8003136:	685b      	ldr	r3, [r3, #4]
 8003138:	f003 0203 	and.w	r2, r3, #3
 800313c:	69bb      	ldr	r3, [r7, #24]
 800313e:	005b      	lsls	r3, r3, #1
 8003140:	fa02 f303 	lsl.w	r3, r2, r3
 8003144:	69fa      	ldr	r2, [r7, #28]
 8003146:	4313      	orrs	r3, r2
 8003148:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 800314a:	693b      	ldr	r3, [r7, #16]
 800314c:	69fa      	ldr	r2, [r7, #28]
 800314e:	601a      	str	r2, [r3, #0]
 8003150:	e01e      	b.n	8003190 <HAL_GPIO_Init+0x1c4>
 8003152:	bf00      	nop
 8003154:	46020000 	.word	0x46020000
 8003158:	08009fe0 	.word	0x08009fe0
      {
        /* Check the parameters */
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

        /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
        tmp = p_gpio->MODER;
 800315c:	693b      	ldr	r3, [r7, #16]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 8003162:	69bb      	ldr	r3, [r7, #24]
 8003164:	005b      	lsls	r3, r3, #1
 8003166:	2203      	movs	r2, #3
 8003168:	fa02 f303 	lsl.w	r3, r2, r3
 800316c:	43db      	mvns	r3, r3
 800316e:	69fa      	ldr	r2, [r7, #28]
 8003170:	4013      	ands	r3, r2
 8003172:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * 2U));
 8003174:	683b      	ldr	r3, [r7, #0]
 8003176:	685b      	ldr	r3, [r3, #4]
 8003178:	f003 0203 	and.w	r2, r3, #3
 800317c:	69bb      	ldr	r3, [r7, #24]
 800317e:	005b      	lsls	r3, r3, #1
 8003180:	fa02 f303 	lsl.w	r3, r2, r3
 8003184:	69fa      	ldr	r2, [r7, #28]
 8003186:	4313      	orrs	r3, r2
 8003188:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 800318a:	693b      	ldr	r3, [r7, #16]
 800318c:	69fa      	ldr	r2, [r7, #28]
 800318e:	601a      	str	r2, [r3, #0]
      }

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003190:	683b      	ldr	r3, [r7, #0]
 8003192:	685b      	ldr	r3, [r3, #4]
 8003194:	2b01      	cmp	r3, #1
 8003196:	d00b      	beq.n	80031b0 <HAL_GPIO_Init+0x1e4>
 8003198:	683b      	ldr	r3, [r7, #0]
 800319a:	685b      	ldr	r3, [r3, #4]
 800319c:	2b02      	cmp	r3, #2
 800319e:	d007      	beq.n	80031b0 <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80031a0:	683b      	ldr	r3, [r7, #0]
 80031a2:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80031a4:	2b11      	cmp	r3, #17
 80031a6:	d003      	beq.n	80031b0 <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80031a8:	683b      	ldr	r3, [r7, #0]
 80031aa:	685b      	ldr	r3, [r3, #4]
 80031ac:	2b12      	cmp	r3, #18
 80031ae:	d130      	bne.n	8003212 <HAL_GPIO_Init+0x246>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = p_gpio->OSPEEDR;
 80031b0:	693b      	ldr	r3, [r7, #16]
 80031b2:	689b      	ldr	r3, [r3, #8]
 80031b4:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (pin_position * 2U));
 80031b6:	69bb      	ldr	r3, [r7, #24]
 80031b8:	005b      	lsls	r3, r3, #1
 80031ba:	2203      	movs	r2, #3
 80031bc:	fa02 f303 	lsl.w	r3, r2, r3
 80031c0:	43db      	mvns	r3, r3
 80031c2:	69fa      	ldr	r2, [r7, #28]
 80031c4:	4013      	ands	r3, r2
 80031c6:	61fb      	str	r3, [r7, #28]
        tmp |= (pGPIO_Init->Speed << (pin_position * 2U));
 80031c8:	683b      	ldr	r3, [r7, #0]
 80031ca:	68da      	ldr	r2, [r3, #12]
 80031cc:	69bb      	ldr	r3, [r7, #24]
 80031ce:	005b      	lsls	r3, r3, #1
 80031d0:	fa02 f303 	lsl.w	r3, r2, r3
 80031d4:	69fa      	ldr	r2, [r7, #28]
 80031d6:	4313      	orrs	r3, r2
 80031d8:	61fb      	str	r3, [r7, #28]
        p_gpio->OSPEEDR = tmp;
 80031da:	693b      	ldr	r3, [r7, #16]
 80031dc:	69fa      	ldr	r2, [r7, #28]
 80031de:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = p_gpio->OTYPER;
 80031e0:	693b      	ldr	r3, [r7, #16]
 80031e2:	685b      	ldr	r3, [r3, #4]
 80031e4:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OTYPER_OT0 << pin_position);
 80031e6:	2201      	movs	r2, #1
 80031e8:	69bb      	ldr	r3, [r7, #24]
 80031ea:	fa02 f303 	lsl.w	r3, r2, r3
 80031ee:	43db      	mvns	r3, r3
 80031f0:	69fa      	ldr	r2, [r7, #28]
 80031f2:	4013      	ands	r3, r2
 80031f4:	61fb      	str	r3, [r7, #28]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << pin_position);
 80031f6:	683b      	ldr	r3, [r7, #0]
 80031f8:	685b      	ldr	r3, [r3, #4]
 80031fa:	091b      	lsrs	r3, r3, #4
 80031fc:	f003 0201 	and.w	r2, r3, #1
 8003200:	69bb      	ldr	r3, [r7, #24]
 8003202:	fa02 f303 	lsl.w	r3, r2, r3
 8003206:	69fa      	ldr	r2, [r7, #28]
 8003208:	4313      	orrs	r3, r2
 800320a:	61fb      	str	r3, [r7, #28]
        p_gpio->OTYPER = tmp;
 800320c:	693b      	ldr	r3, [r7, #16]
 800320e:	69fa      	ldr	r2, [r7, #28]
 8003210:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 8003212:	683b      	ldr	r3, [r7, #0]
 8003214:	685b      	ldr	r3, [r3, #4]
 8003216:	2b03      	cmp	r3, #3
 8003218:	d017      	beq.n	800324a <HAL_GPIO_Init+0x27e>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = p_gpio->PUPDR;
 800321a:	693b      	ldr	r3, [r7, #16]
 800321c:	68db      	ldr	r3, [r3, #12]
 800321e:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (pin_position * 2U));
 8003220:	69bb      	ldr	r3, [r7, #24]
 8003222:	005b      	lsls	r3, r3, #1
 8003224:	2203      	movs	r2, #3
 8003226:	fa02 f303 	lsl.w	r3, r2, r3
 800322a:	43db      	mvns	r3, r3
 800322c:	69fa      	ldr	r2, [r7, #28]
 800322e:	4013      	ands	r3, r2
 8003230:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Pull) << (pin_position * 2U));
 8003232:	683b      	ldr	r3, [r7, #0]
 8003234:	689a      	ldr	r2, [r3, #8]
 8003236:	69bb      	ldr	r3, [r7, #24]
 8003238:	005b      	lsls	r3, r3, #1
 800323a:	fa02 f303 	lsl.w	r3, r2, r3
 800323e:	69fa      	ldr	r2, [r7, #28]
 8003240:	4313      	orrs	r3, r2
 8003242:	61fb      	str	r3, [r7, #28]
        p_gpio->PUPDR = tmp;
 8003244:	693b      	ldr	r3, [r7, #16]
 8003246:	69fa      	ldr	r2, [r7, #28]
 8003248:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800324a:	683b      	ldr	r3, [r7, #0]
 800324c:	685b      	ldr	r3, [r3, #4]
 800324e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003252:	2b00      	cmp	r3, #0
 8003254:	d07c      	beq.n	8003350 <HAL_GPIO_Init+0x384>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 8003256:	4a47      	ldr	r2, [pc, #284]	; (8003374 <HAL_GPIO_Init+0x3a8>)
 8003258:	697b      	ldr	r3, [r7, #20]
 800325a:	089b      	lsrs	r3, r3, #2
 800325c:	3318      	adds	r3, #24
 800325e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003262:	61fb      	str	r3, [r7, #28]
        tmp &= ~((0x0FUL) << (8U * (position & 0x03U)));
 8003264:	697b      	ldr	r3, [r7, #20]
 8003266:	f003 0303 	and.w	r3, r3, #3
 800326a:	00db      	lsls	r3, r3, #3
 800326c:	220f      	movs	r2, #15
 800326e:	fa02 f303 	lsl.w	r3, r2, r3
 8003272:	43db      	mvns	r3, r3
 8003274:	69fa      	ldr	r2, [r7, #28]
 8003276:	4013      	ands	r3, r2
 8003278:	61fb      	str	r3, [r7, #28]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	0a9a      	lsrs	r2, r3, #10
 800327e:	4b3e      	ldr	r3, [pc, #248]	; (8003378 <HAL_GPIO_Init+0x3ac>)
 8003280:	4013      	ands	r3, r2
 8003282:	697a      	ldr	r2, [r7, #20]
 8003284:	f002 0203 	and.w	r2, r2, #3
 8003288:	00d2      	lsls	r2, r2, #3
 800328a:	4093      	lsls	r3, r2
 800328c:	69fa      	ldr	r2, [r7, #28]
 800328e:	4313      	orrs	r3, r2
 8003290:	61fb      	str	r3, [r7, #28]
        EXTI->EXTICR[position >> 2U] = tmp;
 8003292:	4938      	ldr	r1, [pc, #224]	; (8003374 <HAL_GPIO_Init+0x3a8>)
 8003294:	697b      	ldr	r3, [r7, #20]
 8003296:	089b      	lsrs	r3, r3, #2
 8003298:	3318      	adds	r3, #24
 800329a:	69fa      	ldr	r2, [r7, #28]
 800329c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 80032a0:	4b34      	ldr	r3, [pc, #208]	; (8003374 <HAL_GPIO_Init+0x3a8>)
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	43db      	mvns	r3, r3
 80032aa:	69fa      	ldr	r2, [r7, #28]
 80032ac:	4013      	ands	r3, r2
 80032ae:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80032b0:	683b      	ldr	r3, [r7, #0]
 80032b2:	685b      	ldr	r3, [r3, #4]
 80032b4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d003      	beq.n	80032c4 <HAL_GPIO_Init+0x2f8>
        {
          tmp |= iocurrent;
 80032bc:	69fa      	ldr	r2, [r7, #28]
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	4313      	orrs	r3, r2
 80032c2:	61fb      	str	r3, [r7, #28]
        }
        EXTI->RTSR1 = tmp;
 80032c4:	4a2b      	ldr	r2, [pc, #172]	; (8003374 <HAL_GPIO_Init+0x3a8>)
 80032c6:	69fb      	ldr	r3, [r7, #28]
 80032c8:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 80032ca:	4b2a      	ldr	r3, [pc, #168]	; (8003374 <HAL_GPIO_Init+0x3a8>)
 80032cc:	685b      	ldr	r3, [r3, #4]
 80032ce:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	43db      	mvns	r3, r3
 80032d4:	69fa      	ldr	r2, [r7, #28]
 80032d6:	4013      	ands	r3, r2
 80032d8:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80032da:	683b      	ldr	r3, [r7, #0]
 80032dc:	685b      	ldr	r3, [r3, #4]
 80032de:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d003      	beq.n	80032ee <HAL_GPIO_Init+0x322>
        {
          tmp |= iocurrent;
 80032e6:	69fa      	ldr	r2, [r7, #28]
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	4313      	orrs	r3, r2
 80032ec:	61fb      	str	r3, [r7, #28]
        }
        EXTI->FTSR1 = tmp;
 80032ee:	4a21      	ldr	r2, [pc, #132]	; (8003374 <HAL_GPIO_Init+0x3a8>)
 80032f0:	69fb      	ldr	r3, [r7, #28]
 80032f2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 80032f4:	4b1f      	ldr	r3, [pc, #124]	; (8003374 <HAL_GPIO_Init+0x3a8>)
 80032f6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80032fa:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	43db      	mvns	r3, r3
 8003300:	69fa      	ldr	r2, [r7, #28]
 8003302:	4013      	ands	r3, r2
 8003304:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003306:	683b      	ldr	r3, [r7, #0]
 8003308:	685b      	ldr	r3, [r3, #4]
 800330a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800330e:	2b00      	cmp	r3, #0
 8003310:	d003      	beq.n	800331a <HAL_GPIO_Init+0x34e>
        {
          tmp |= iocurrent;
 8003312:	69fa      	ldr	r2, [r7, #28]
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	4313      	orrs	r3, r2
 8003318:	61fb      	str	r3, [r7, #28]
        }
        EXTI->EMR1 = tmp;
 800331a:	4a16      	ldr	r2, [pc, #88]	; (8003374 <HAL_GPIO_Init+0x3a8>)
 800331c:	69fb      	ldr	r3, [r7, #28]
 800331e:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        tmp = EXTI->IMR1;
 8003322:	4b14      	ldr	r3, [pc, #80]	; (8003374 <HAL_GPIO_Init+0x3a8>)
 8003324:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003328:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	43db      	mvns	r3, r3
 800332e:	69fa      	ldr	r2, [r7, #28]
 8003330:	4013      	ands	r3, r2
 8003332:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003334:	683b      	ldr	r3, [r7, #0]
 8003336:	685b      	ldr	r3, [r3, #4]
 8003338:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800333c:	2b00      	cmp	r3, #0
 800333e:	d003      	beq.n	8003348 <HAL_GPIO_Init+0x37c>
        {
          tmp |= iocurrent;
 8003340:	69fa      	ldr	r2, [r7, #28]
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	4313      	orrs	r3, r2
 8003346:	61fb      	str	r3, [r7, #28]
        }
        EXTI->IMR1 = tmp;
 8003348:	4a0a      	ldr	r2, [pc, #40]	; (8003374 <HAL_GPIO_Init+0x3a8>)
 800334a:	69fb      	ldr	r3, [r7, #28]
 800334c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
      }
    }
    position++;
 8003350:	697b      	ldr	r3, [r7, #20]
 8003352:	3301      	adds	r3, #1
 8003354:	617b      	str	r3, [r7, #20]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8003356:	683b      	ldr	r3, [r7, #0]
 8003358:	681a      	ldr	r2, [r3, #0]
 800335a:	697b      	ldr	r3, [r7, #20]
 800335c:	fa22 f303 	lsr.w	r3, r2, r3
 8003360:	2b00      	cmp	r3, #0
 8003362:	f47f ae3d 	bne.w	8002fe0 <HAL_GPIO_Init+0x14>
  }
}
 8003366:	bf00      	nop
 8003368:	bf00      	nop
 800336a:	3724      	adds	r7, #36	; 0x24
 800336c:	46bd      	mov	sp, r7
 800336e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003372:	4770      	bx	lr
 8003374:	46022000 	.word	0x46022000
 8003378:	002f7f7f 	.word	0x002f7f7f

0800337c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800337c:	b480      	push	{r7}
 800337e:	b083      	sub	sp, #12
 8003380:	af00      	add	r7, sp, #0
 8003382:	6078      	str	r0, [r7, #4]
 8003384:	460b      	mov	r3, r1
 8003386:	807b      	strh	r3, [r7, #2]
 8003388:	4613      	mov	r3, r2
 800338a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800338c:	787b      	ldrb	r3, [r7, #1]
 800338e:	2b00      	cmp	r3, #0
 8003390:	d003      	beq.n	800339a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003392:	887a      	ldrh	r2, [r7, #2]
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
  }
}
 8003398:	e002      	b.n	80033a0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
 800339a:	887a      	ldrh	r2, [r7, #2]
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	629a      	str	r2, [r3, #40]	; 0x28
}
 80033a0:	bf00      	nop
 80033a2:	370c      	adds	r7, #12
 80033a4:	46bd      	mov	sp, r7
 80033a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033aa:	4770      	bx	lr

080033ac <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 80033ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80033ae:	b08d      	sub	sp, #52	; 0x34
 80033b0:	af0a      	add	r7, sp, #40	; 0x28
 80033b2:	6078      	str	r0, [r7, #4]
  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d101      	bne.n	80033be <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 80033ba:	2301      	movs	r3, #1
 80033bc:	e05e      	b.n	800347c <HAL_HCD_Init+0xd0>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  if (hhcd->State == HAL_HCD_STATE_RESET)
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	f893 337e 	ldrb.w	r3, [r3, #894]	; 0x37e
 80033c4:	b2db      	uxtb	r3, r3
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d106      	bne.n	80033d8 <HAL_HCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	2200      	movs	r2, #0
 80033ce:	f883 237d 	strb.w	r2, [r3, #893]	; 0x37d

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 80033d2:	6878      	ldr	r0, [r7, #4]
 80033d4:	f7fd fd8c 	bl	8000ef0 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }
  hhcd->State = HAL_HCD_STATE_BUSY;
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	2203      	movs	r2, #3
 80033dc:	f883 237e 	strb.w	r2, [r3, #894]	; 0x37e

  /* Disable the Interrupts */
  (void)__HAL_HCD_DISABLE(hhcd);
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	4618      	mov	r0, r3
 80033e6:	f006 f80c 	bl	8009402 <USB_DisableGlobalInt>

  /* Dma not supported, force to zero */
  hhcd->Init.dma_enable = 0U;
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	2200      	movs	r2, #0
 80033ee:	60da      	str	r2, [r3, #12]

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	603b      	str	r3, [r7, #0]
 80033f6:	687e      	ldr	r6, [r7, #4]
 80033f8:	466d      	mov	r5, sp
 80033fa:	f106 0410 	add.w	r4, r6, #16
 80033fe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003400:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003402:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003404:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003406:	e894 0003 	ldmia.w	r4, {r0, r1}
 800340a:	e885 0003 	stmia.w	r5, {r0, r1}
 800340e:	1d33      	adds	r3, r6, #4
 8003410:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003412:	6838      	ldr	r0, [r7, #0]
 8003414:	f005 ffd7 	bl	80093c6 <USB_CoreInit>

  /* Force Host Mode */
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	2101      	movs	r1, #1
 800341e:	4618      	mov	r0, r3
 8003420:	f006 f804 	bl	800942c <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	603b      	str	r3, [r7, #0]
 800342a:	687e      	ldr	r6, [r7, #4]
 800342c:	466d      	mov	r5, sp
 800342e:	f106 0410 	add.w	r4, r6, #16
 8003432:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003434:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003436:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003438:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800343a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800343e:	e885 0003 	stmia.w	r5, {r0, r1}
 8003442:	1d33      	adds	r3, r6, #4
 8003444:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003446:	6838      	ldr	r0, [r7, #0]
 8003448:	f006 f813 	bl	8009472 <USB_HostInit>

  /* Deactivate the power down */
  hhcd->Instance->CNTR &= ~USB_CNTR_PDWN;
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	f022 0202 	bic.w	r2, r2, #2
 800345a:	641a      	str	r2, [r3, #64]	; 0x40

  hhcd->State = HAL_HCD_STATE_READY;
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	2201      	movs	r2, #1
 8003460:	f883 237e 	strb.w	r2, [r3, #894]	; 0x37e

  /* Host Port State */
  hhcd->HostState = HCD_HCD_STATE_DISCONNECTED;
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	2200      	movs	r2, #0
 8003468:	f883 237c 	strb.w	r2, [r3, #892]	; 0x37c

  /* Init PMA Address */
  (void)HAL_HCD_PMAReset(hhcd);
 800346c:	6878      	ldr	r0, [r7, #4]
 800346e:	f000 f809 	bl	8003484 <HAL_HCD_PMAReset>

  hhcd->State = HAL_HCD_STATE_READY;
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	2201      	movs	r2, #1
 8003476:	f883 237e 	strb.w	r2, [r3, #894]	; 0x37e

  return HAL_OK;
 800347a:	2300      	movs	r3, #0
}
 800347c:	4618      	mov	r0, r3
 800347e:	370c      	adds	r7, #12
 8003480:	46bd      	mov	sp, r7
 8003482:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003484 <HAL_HCD_PMAReset>:
  * @brief  PMA Reset
  * @param  hhcd  Host instance
  * @retval HAL status
  */
HAL_StatusTypeDef  HAL_HCD_PMAReset(HCD_HandleTypeDef *hhcd)
{
 8003484:	b480      	push	{r7}
 8003486:	b085      	sub	sp, #20
 8003488:	af00      	add	r7, sp, #0
 800348a:	6078      	str	r0, [r7, #4]
  /* Reset All PMA Entry */
  for (uint8_t i = 0U; i < PMA_BLOCKS; i++)
 800348c:	2300      	movs	r3, #0
 800348e:	73fb      	strb	r3, [r7, #15]
 8003490:	e009      	b.n	80034a6 <HAL_HCD_PMAReset+0x22>
  {
    hhcd->PMALookupTable[i] = 0U;
 8003492:	7bfb      	ldrb	r3, [r7, #15]
 8003494:	687a      	ldr	r2, [r7, #4]
 8003496:	33d6      	adds	r3, #214	; 0xd6
 8003498:	009b      	lsls	r3, r3, #2
 800349a:	4413      	add	r3, r2
 800349c:	2200      	movs	r2, #0
 800349e:	605a      	str	r2, [r3, #4]
  for (uint8_t i = 0U; i < PMA_BLOCKS; i++)
 80034a0:	7bfb      	ldrb	r3, [r7, #15]
 80034a2:	3301      	adds	r3, #1
 80034a4:	73fb      	strb	r3, [r7, #15]
 80034a6:	7bfb      	ldrb	r3, [r7, #15]
 80034a8:	2b07      	cmp	r3, #7
 80034aa:	d9f2      	bls.n	8003492 <HAL_HCD_PMAReset+0xe>
  }

  /* Allocate a Space for buffer descriptor table depending on the Host channel number */
  for (uint8_t i = 0U; i < hhcd->Init.Host_channels; i++)
 80034ac:	2300      	movs	r3, #0
 80034ae:	73bb      	strb	r3, [r7, #14]
 80034b0:	e00d      	b.n	80034ce <HAL_HCD_PMAReset+0x4a>
  {
    hhcd->PMALookupTable[0] |= ((uint32_t)1U << i);
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	f8d3 235c 	ldr.w	r2, [r3, #860]	; 0x35c
 80034b8:	7bbb      	ldrb	r3, [r7, #14]
 80034ba:	2101      	movs	r1, #1
 80034bc:	fa01 f303 	lsl.w	r3, r1, r3
 80034c0:	431a      	orrs	r2, r3
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	f8c3 235c 	str.w	r2, [r3, #860]	; 0x35c
  for (uint8_t i = 0U; i < hhcd->Init.Host_channels; i++)
 80034c8:	7bbb      	ldrb	r3, [r7, #14]
 80034ca:	3301      	adds	r3, #1
 80034cc:	73bb      	strb	r3, [r7, #14]
 80034ce:	7bba      	ldrb	r2, [r7, #14]
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	689b      	ldr	r3, [r3, #8]
 80034d4:	429a      	cmp	r2, r3
 80034d6:	d3ec      	bcc.n	80034b2 <HAL_HCD_PMAReset+0x2e>
  }

  return HAL_OK;
 80034d8:	2300      	movs	r3, #0
}
 80034da:	4618      	mov	r0, r3
 80034dc:	3714      	adds	r7, #20
 80034de:	46bd      	mov	sp, r7
 80034e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e4:	4770      	bx	lr
	...

080034e8 <HAL_ICACHE_ConfigAssociativityMode>:
  *            @arg ICACHE_1WAY   1-way cache (direct mapped cache)
  *            @arg ICACHE_2WAYS  2-ways set associative cache (default)
  * @retval HAL status (HAL_OK/HAL_ERROR)
  */
HAL_StatusTypeDef HAL_ICACHE_ConfigAssociativityMode(uint32_t AssociativityMode)
{
 80034e8:	b480      	push	{r7}
 80034ea:	b085      	sub	sp, #20
 80034ec:	af00      	add	r7, sp, #0
 80034ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80034f0:	2300      	movs	r3, #0
 80034f2:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_ICACHE_ASSOCIATIVITY_MODE(AssociativityMode));

  /* Check cache is not enabled */
  if (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 80034f4:	4b0b      	ldr	r3, [pc, #44]	; (8003524 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	f003 0301 	and.w	r3, r3, #1
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d002      	beq.n	8003506 <HAL_ICACHE_ConfigAssociativityMode+0x1e>
  {
    status = HAL_ERROR;
 8003500:	2301      	movs	r3, #1
 8003502:	73fb      	strb	r3, [r7, #15]
 8003504:	e007      	b.n	8003516 <HAL_ICACHE_ConfigAssociativityMode+0x2e>
  }
  else
  {
    MODIFY_REG(ICACHE->CR, ICACHE_CR_WAYSEL, AssociativityMode);
 8003506:	4b07      	ldr	r3, [pc, #28]	; (8003524 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	f023 0204 	bic.w	r2, r3, #4
 800350e:	4905      	ldr	r1, [pc, #20]	; (8003524 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	4313      	orrs	r3, r2
 8003514:	600b      	str	r3, [r1, #0]
  }

  return status;
 8003516:	7bfb      	ldrb	r3, [r7, #15]
}
 8003518:	4618      	mov	r0, r3
 800351a:	3714      	adds	r7, #20
 800351c:	46bd      	mov	sp, r7
 800351e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003522:	4770      	bx	lr
 8003524:	40030400 	.word	0x40030400

08003528 <HAL_ICACHE_Enable>:
  *         cache operation. The Instruction Cache is bypassed until the
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
 8003528:	b480      	push	{r7}
 800352a:	af00      	add	r7, sp, #0
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 800352c:	4b05      	ldr	r3, [pc, #20]	; (8003544 <HAL_ICACHE_Enable+0x1c>)
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	4a04      	ldr	r2, [pc, #16]	; (8003544 <HAL_ICACHE_Enable+0x1c>)
 8003532:	f043 0301 	orr.w	r3, r3, #1
 8003536:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8003538:	2300      	movs	r3, #0
}
 800353a:	4618      	mov	r0, r3
 800353c:	46bd      	mov	sp, r7
 800353e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003542:	4770      	bx	lr
 8003544:	40030400 	.word	0x40030400

08003548 <HAL_PWREx_ControlVoltageScaling>:
  * @note  Before moving to voltage scaling 4, it is mandatory to ensure that
  *        the system frequency is below 24 MHz.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003548:	b480      	push	{r7}
 800354a:	b085      	sub	sp, #20
 800354c:	af00      	add	r7, sp, #0
 800354e:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Get the current voltage scale applied */
  vos_old = READ_BIT(PWR->SVMSR, PWR_SVMSR_ACTVOS);
 8003550:	4b39      	ldr	r3, [pc, #228]	; (8003638 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8003552:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003554:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003558:	60bb      	str	r3, [r7, #8]

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 800355a:	68ba      	ldr	r2, [r7, #8]
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	429a      	cmp	r2, r3
 8003560:	d10b      	bne.n	800357a <HAL_PWREx_ControlVoltageScaling+0x32>
  {
    /* Enable USB BOOST after wake up from Stop mode */
    if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003568:	d905      	bls.n	8003576 <HAL_PWREx_ControlVoltageScaling+0x2e>
    {
      /* Enable USB BOOST */
      SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 800356a:	4b33      	ldr	r3, [pc, #204]	; (8003638 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800356c:	68db      	ldr	r3, [r3, #12]
 800356e:	4a32      	ldr	r2, [pc, #200]	; (8003638 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8003570:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003574:	60d3      	str	r3, [r2, #12]
    }

    return HAL_OK;
 8003576:	2300      	movs	r3, #0
 8003578:	e057      	b.n	800362a <HAL_PWREx_ControlVoltageScaling+0xe2>
  /* Check voltage scaling level */
  /*
   *  The Embedded power distribution (EPOD) must be enabled before switching to
   *  voltage scale 1 / 2 from voltage scale lower.
   */
  if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003580:	d90a      	bls.n	8003598 <HAL_PWREx_ControlVoltageScaling+0x50>
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), (VoltageScaling | PWR_VOSR_BOOSTEN));
 8003582:	4b2d      	ldr	r3, [pc, #180]	; (8003638 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8003584:	68db      	ldr	r3, [r3, #12]
 8003586:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	4313      	orrs	r3, r2
 800358e:	4a2a      	ldr	r2, [pc, #168]	; (8003638 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8003590:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003594:	60d3      	str	r3, [r2, #12]
 8003596:	e007      	b.n	80035a8 <HAL_PWREx_ControlVoltageScaling+0x60>
  }
  else
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), VoltageScaling);
 8003598:	4b27      	ldr	r3, [pc, #156]	; (8003638 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800359a:	68db      	ldr	r3, [r3, #12]
 800359c:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 80035a0:	4925      	ldr	r1, [pc, #148]	; (8003638 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	4313      	orrs	r3, r2
 80035a6:	60cb      	str	r3, [r1, #12]
  }

  /* Wait until VOSRDY is raised */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 80035a8:	4b24      	ldr	r3, [pc, #144]	; (800363c <HAL_PWREx_ControlVoltageScaling+0xf4>)
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	4a24      	ldr	r2, [pc, #144]	; (8003640 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 80035ae:	fba2 2303 	umull	r2, r3, r2, r3
 80035b2:	099b      	lsrs	r3, r3, #6
 80035b4:	2232      	movs	r2, #50	; 0x32
 80035b6:	fb02 f303 	mul.w	r3, r2, r3
 80035ba:	4a21      	ldr	r2, [pc, #132]	; (8003640 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 80035bc:	fba2 2303 	umull	r2, r3, r2, r3
 80035c0:	099b      	lsrs	r3, r3, #6
 80035c2:	3301      	adds	r3, #1
 80035c4:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 80035c6:	e002      	b.n	80035ce <HAL_PWREx_ControlVoltageScaling+0x86>
  {
    timeout--;
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	3b01      	subs	r3, #1
 80035cc:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 80035ce:	4b1a      	ldr	r3, [pc, #104]	; (8003638 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80035d0:	68db      	ldr	r3, [r3, #12]
 80035d2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d102      	bne.n	80035e0 <HAL_PWREx_ControlVoltageScaling+0x98>
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d1f3      	bne.n	80035c8 <HAL_PWREx_ControlVoltageScaling+0x80>
  }

  /* Check time out */
  if (timeout != 0U)
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d01b      	beq.n	800361e <HAL_PWREx_ControlVoltageScaling+0xd6>
  {
    /* Wait until ACTVOSRDY is raised */
    timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 80035e6:	4b15      	ldr	r3, [pc, #84]	; (800363c <HAL_PWREx_ControlVoltageScaling+0xf4>)
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	4a15      	ldr	r2, [pc, #84]	; (8003640 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 80035ec:	fba2 2303 	umull	r2, r3, r2, r3
 80035f0:	099b      	lsrs	r3, r3, #6
 80035f2:	2232      	movs	r2, #50	; 0x32
 80035f4:	fb02 f303 	mul.w	r3, r2, r3
 80035f8:	4a11      	ldr	r2, [pc, #68]	; (8003640 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 80035fa:	fba2 2303 	umull	r2, r3, r2, r3
 80035fe:	099b      	lsrs	r3, r3, #6
 8003600:	3301      	adds	r3, #1
 8003602:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 8003604:	e002      	b.n	800360c <HAL_PWREx_ControlVoltageScaling+0xc4>
    {
      timeout--;
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	3b01      	subs	r3, #1
 800360a:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 800360c:	4b0a      	ldr	r3, [pc, #40]	; (8003638 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800360e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003610:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003614:	2b00      	cmp	r3, #0
 8003616:	d102      	bne.n	800361e <HAL_PWREx_ControlVoltageScaling+0xd6>
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	2b00      	cmp	r3, #0
 800361c:	d1f3      	bne.n	8003606 <HAL_PWREx_ControlVoltageScaling+0xbe>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	2b00      	cmp	r3, #0
 8003622:	d101      	bne.n	8003628 <HAL_PWREx_ControlVoltageScaling+0xe0>
  {
    return HAL_TIMEOUT;
 8003624:	2303      	movs	r3, #3
 8003626:	e000      	b.n	800362a <HAL_PWREx_ControlVoltageScaling+0xe2>
  }

  return HAL_OK;
 8003628:	2300      	movs	r3, #0
}
 800362a:	4618      	mov	r0, r3
 800362c:	3714      	adds	r7, #20
 800362e:	46bd      	mov	sp, r7
 8003630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003634:	4770      	bx	lr
 8003636:	bf00      	nop
 8003638:	46020800 	.word	0x46020800
 800363c:	20000000 	.word	0x20000000
 8003640:	10624dd3 	.word	0x10624dd3

08003644 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief  Return Voltage Scaling Range.
  * @retval Applied voltage scaling value.
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003644:	b480      	push	{r7}
 8003646:	af00      	add	r7, sp, #0
  return (PWR->SVMSR & PWR_SVMSR_ACTVOS);
 8003648:	4b04      	ldr	r3, [pc, #16]	; (800365c <HAL_PWREx_GetVoltageRange+0x18>)
 800364a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800364c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
}
 8003650:	4618      	mov	r0, r3
 8003652:	46bd      	mov	sp, r7
 8003654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003658:	4770      	bx	lr
 800365a:	bf00      	nop
 800365c:	46020800 	.word	0x46020800

08003660 <HAL_PWREx_ConfigSupply>:
  *                        @arg PWR_LDO_SUPPLY  : The LDO regulator supplies the Vcore Power Domains.
  *                        @arg PWR_SMPS_SUPPLY : The SMPS regulator supplies the Vcore Power Domains.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply(uint32_t SupplySource)
{
 8003660:	b480      	push	{r7}
 8003662:	b085      	sub	sp, #20
 8003664:	af00      	add	r7, sp, #0
 8003666:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_SUPPLY(SupplySource));

  /* Set maximum time out */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8003668:	4b22      	ldr	r3, [pc, #136]	; (80036f4 <HAL_PWREx_ConfigSupply+0x94>)
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	4a22      	ldr	r2, [pc, #136]	; (80036f8 <HAL_PWREx_ConfigSupply+0x98>)
 800366e:	fba2 2303 	umull	r2, r3, r2, r3
 8003672:	099b      	lsrs	r3, r3, #6
 8003674:	2232      	movs	r2, #50	; 0x32
 8003676:	fb02 f303 	mul.w	r3, r2, r3
 800367a:	4a1f      	ldr	r2, [pc, #124]	; (80036f8 <HAL_PWREx_ConfigSupply+0x98>)
 800367c:	fba2 2303 	umull	r2, r3, r2, r3
 8003680:	099b      	lsrs	r3, r3, #6
 8003682:	3301      	adds	r3, #1
 8003684:	60fb      	str	r3, [r7, #12]

  /* Configure the LDO as system regulator supply */
  if (SupplySource == PWR_LDO_SUPPLY)
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	2b00      	cmp	r3, #0
 800368a:	d113      	bne.n	80036b4 <HAL_PWREx_ConfigSupply+0x54>
  {
    /* Set the power supply configuration */
    CLEAR_BIT(PWR->CR3, PWR_CR3_REGSEL);
 800368c:	4b1b      	ldr	r3, [pc, #108]	; (80036fc <HAL_PWREx_ConfigSupply+0x9c>)
 800368e:	689b      	ldr	r3, [r3, #8]
 8003690:	4a1a      	ldr	r2, [pc, #104]	; (80036fc <HAL_PWREx_ConfigSupply+0x9c>)
 8003692:	f023 0302 	bic.w	r3, r3, #2
 8003696:	6093      	str	r3, [r2, #8]

    /* Wait until system switch on new regulator */
    while (HAL_IS_BIT_SET(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8003698:	e002      	b.n	80036a0 <HAL_PWREx_ConfigSupply+0x40>
    {
      timeout--;
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	3b01      	subs	r3, #1
 800369e:	60fb      	str	r3, [r7, #12]
    while (HAL_IS_BIT_SET(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 80036a0:	4b16      	ldr	r3, [pc, #88]	; (80036fc <HAL_PWREx_ConfigSupply+0x9c>)
 80036a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036a4:	f003 0302 	and.w	r3, r3, #2
 80036a8:	2b02      	cmp	r3, #2
 80036aa:	d116      	bne.n	80036da <HAL_PWREx_ConfigSupply+0x7a>
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d1f3      	bne.n	800369a <HAL_PWREx_ConfigSupply+0x3a>
 80036b2:	e012      	b.n	80036da <HAL_PWREx_ConfigSupply+0x7a>
  }
  /* Configure the SMPS as system regulator supply */
  else
  {
    /* Set the power supply configuration */
    SET_BIT(PWR->CR3, PWR_CR3_REGSEL);
 80036b4:	4b11      	ldr	r3, [pc, #68]	; (80036fc <HAL_PWREx_ConfigSupply+0x9c>)
 80036b6:	689b      	ldr	r3, [r3, #8]
 80036b8:	4a10      	ldr	r2, [pc, #64]	; (80036fc <HAL_PWREx_ConfigSupply+0x9c>)
 80036ba:	f043 0302 	orr.w	r3, r3, #2
 80036be:	6093      	str	r3, [r2, #8]

    /* Wait until system switch on new regulator */
    while (HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 80036c0:	e002      	b.n	80036c8 <HAL_PWREx_ConfigSupply+0x68>
    {
      timeout--;
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	3b01      	subs	r3, #1
 80036c6:	60fb      	str	r3, [r7, #12]
    while (HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 80036c8:	4b0c      	ldr	r3, [pc, #48]	; (80036fc <HAL_PWREx_ConfigSupply+0x9c>)
 80036ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036cc:	f003 0302 	and.w	r3, r3, #2
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d102      	bne.n	80036da <HAL_PWREx_ConfigSupply+0x7a>
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d1f3      	bne.n	80036c2 <HAL_PWREx_ConfigSupply+0x62>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d101      	bne.n	80036e4 <HAL_PWREx_ConfigSupply+0x84>
  {
    return HAL_TIMEOUT;
 80036e0:	2303      	movs	r3, #3
 80036e2:	e000      	b.n	80036e6 <HAL_PWREx_ConfigSupply+0x86>
  }

  return HAL_OK;
 80036e4:	2300      	movs	r3, #0
}
 80036e6:	4618      	mov	r0, r3
 80036e8:	3714      	adds	r7, #20
 80036ea:	46bd      	mov	sp, r7
 80036ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f0:	4770      	bx	lr
 80036f2:	bf00      	nop
 80036f4:	20000000 	.word	0x20000000
 80036f8:	10624dd3 	.word	0x10624dd3
 80036fc:	46020800 	.word	0x46020800

08003700 <HAL_PWREx_EnableVddUSB>:
  * @note   Remove VDDUSB electrical and logical isolation, once VDDUSB supply
  *         is present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8003700:	b480      	push	{r7}
 8003702:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR, PWR_SVMCR_USV);
 8003704:	4b05      	ldr	r3, [pc, #20]	; (800371c <HAL_PWREx_EnableVddUSB+0x1c>)
 8003706:	691b      	ldr	r3, [r3, #16]
 8003708:	4a04      	ldr	r2, [pc, #16]	; (800371c <HAL_PWREx_EnableVddUSB+0x1c>)
 800370a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800370e:	6113      	str	r3, [r2, #16]
}
 8003710:	bf00      	nop
 8003712:	46bd      	mov	sp, r7
 8003714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003718:	4770      	bx	lr
 800371a:	bf00      	nop
 800371c:	46020800 	.word	0x46020800

08003720 <HAL_PWREx_EnableVddA>:
  * @note   Remove VDDA electrical and logical isolation, once VDDA supply is
  *         present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddA(void)
{
 8003720:	b480      	push	{r7}
 8003722:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR, PWR_SVMCR_ASV);
 8003724:	4b05      	ldr	r3, [pc, #20]	; (800373c <HAL_PWREx_EnableVddA+0x1c>)
 8003726:	691b      	ldr	r3, [r3, #16]
 8003728:	4a04      	ldr	r2, [pc, #16]	; (800373c <HAL_PWREx_EnableVddA+0x1c>)
 800372a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800372e:	6113      	str	r3, [r2, #16]
}
 8003730:	bf00      	nop
 8003732:	46bd      	mov	sp, r7
 8003734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003738:	4770      	bx	lr
 800373a:	bf00      	nop
 800373c:	46020800 	.word	0x46020800

08003740 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pRCC_OscInitStruct)
{
 8003740:	b580      	push	{r7, lr}
 8003742:	b08e      	sub	sp, #56	; 0x38
 8003744:	af00      	add	r7, sp, #0
 8003746:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source;
  uint32_t pll_config;
  FlagStatus pwrboosten = RESET;
 8003748:	2300      	movs	r3, #0
 800374a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pRCC_OscInitStruct == NULL)
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	2b00      	cmp	r3, #0
 8003752:	d102      	bne.n	800375a <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8003754:	2301      	movs	r3, #1
 8003756:	f000 bec8 	b.w	80044ea <HAL_RCC_OscConfig+0xdaa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pRCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800375a:	4b99      	ldr	r3, [pc, #612]	; (80039c0 <HAL_RCC_OscConfig+0x280>)
 800375c:	69db      	ldr	r3, [r3, #28]
 800375e:	f003 030c 	and.w	r3, r3, #12
 8003762:	633b      	str	r3, [r7, #48]	; 0x30
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003764:	4b96      	ldr	r3, [pc, #600]	; (80039c0 <HAL_RCC_OscConfig+0x280>)
 8003766:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003768:	f003 0303 	and.w	r3, r3, #3
 800376c:	62fb      	str	r3, [r7, #44]	; 0x2c

  /*----------------------------- MSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	f003 0310 	and.w	r3, r3, #16
 8003776:	2b00      	cmp	r3, #0
 8003778:	f000 816c 	beq.w	8003a54 <HAL_RCC_OscConfig+0x314>
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(pRCC_OscInitStruct->MSIClockRange));

    /*Check if MSI is used as system clock or as PLL source when PLL is selected as system clock*/

    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 800377c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800377e:	2b00      	cmp	r3, #0
 8003780:	d007      	beq.n	8003792 <HAL_RCC_OscConfig+0x52>
 8003782:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003784:	2b0c      	cmp	r3, #12
 8003786:	f040 80de 	bne.w	8003946 <HAL_RCC_OscConfig+0x206>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 800378a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800378c:	2b01      	cmp	r3, #1
 800378e:	f040 80da 	bne.w	8003946 <HAL_RCC_OscConfig+0x206>
    {
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	69db      	ldr	r3, [r3, #28]
 8003796:	2b00      	cmp	r3, #0
 8003798:	d102      	bne.n	80037a0 <HAL_RCC_OscConfig+0x60>
      {
        return HAL_ERROR;
 800379a:	2301      	movs	r3, #1
 800379c:	f000 bea5 	b.w	80044ea <HAL_RCC_OscConfig+0xdaa>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device */
        if (pRCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80037a4:	4b86      	ldr	r3, [pc, #536]	; (80039c0 <HAL_RCC_OscConfig+0x280>)
 80037a6:	689b      	ldr	r3, [r3, #8]
 80037a8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d004      	beq.n	80037ba <HAL_RCC_OscConfig+0x7a>
 80037b0:	4b83      	ldr	r3, [pc, #524]	; (80039c0 <HAL_RCC_OscConfig+0x280>)
 80037b2:	689b      	ldr	r3, [r3, #8]
 80037b4:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80037b8:	e005      	b.n	80037c6 <HAL_RCC_OscConfig+0x86>
 80037ba:	4b81      	ldr	r3, [pc, #516]	; (80039c0 <HAL_RCC_OscConfig+0x280>)
 80037bc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80037c0:	041b      	lsls	r3, r3, #16
 80037c2:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80037c6:	4293      	cmp	r3, r2
 80037c8:	d255      	bcs.n	8003876 <HAL_RCC_OscConfig+0x136>
        {
          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80037ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d10a      	bne.n	80037e6 <HAL_RCC_OscConfig+0xa6>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037d4:	4618      	mov	r0, r3
 80037d6:	f001 f9d9 	bl	8004b8c <RCC_SetFlashLatencyFromMSIRange>
 80037da:	4603      	mov	r3, r0
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d002      	beq.n	80037e6 <HAL_RCC_OscConfig+0xa6>
            {
              return HAL_ERROR;
 80037e0:	2301      	movs	r3, #1
 80037e2:	f000 be82 	b.w	80044ea <HAL_RCC_OscConfig+0xdaa>
            }
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 80037e6:	4b76      	ldr	r3, [pc, #472]	; (80039c0 <HAL_RCC_OscConfig+0x280>)
 80037e8:	689b      	ldr	r3, [r3, #8]
 80037ea:	4a75      	ldr	r2, [pc, #468]	; (80039c0 <HAL_RCC_OscConfig+0x280>)
 80037ec:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80037f0:	6093      	str	r3, [r2, #8]
 80037f2:	4b73      	ldr	r3, [pc, #460]	; (80039c0 <HAL_RCC_OscConfig+0x280>)
 80037f4:	689b      	ldr	r3, [r3, #8]
 80037f6:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037fe:	4970      	ldr	r1, [pc, #448]	; (80039c0 <HAL_RCC_OscConfig+0x280>)
 8003800:	4313      	orrs	r3, r2
 8003802:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003808:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 800380c:	d309      	bcc.n	8003822 <HAL_RCC_OscConfig+0xe2>
 800380e:	4b6c      	ldr	r3, [pc, #432]	; (80039c0 <HAL_RCC_OscConfig+0x280>)
 8003810:	68db      	ldr	r3, [r3, #12]
 8003812:	f023 021f 	bic.w	r2, r3, #31
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	6a1b      	ldr	r3, [r3, #32]
 800381a:	4969      	ldr	r1, [pc, #420]	; (80039c0 <HAL_RCC_OscConfig+0x280>)
 800381c:	4313      	orrs	r3, r2
 800381e:	60cb      	str	r3, [r1, #12]
 8003820:	e07e      	b.n	8003920 <HAL_RCC_OscConfig+0x1e0>
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003826:	2b00      	cmp	r3, #0
 8003828:	da0a      	bge.n	8003840 <HAL_RCC_OscConfig+0x100>
 800382a:	4b65      	ldr	r3, [pc, #404]	; (80039c0 <HAL_RCC_OscConfig+0x280>)
 800382c:	68db      	ldr	r3, [r3, #12]
 800382e:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	6a1b      	ldr	r3, [r3, #32]
 8003836:	015b      	lsls	r3, r3, #5
 8003838:	4961      	ldr	r1, [pc, #388]	; (80039c0 <HAL_RCC_OscConfig+0x280>)
 800383a:	4313      	orrs	r3, r2
 800383c:	60cb      	str	r3, [r1, #12]
 800383e:	e06f      	b.n	8003920 <HAL_RCC_OscConfig+0x1e0>
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003844:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003848:	d30a      	bcc.n	8003860 <HAL_RCC_OscConfig+0x120>
 800384a:	4b5d      	ldr	r3, [pc, #372]	; (80039c0 <HAL_RCC_OscConfig+0x280>)
 800384c:	68db      	ldr	r3, [r3, #12]
 800384e:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	6a1b      	ldr	r3, [r3, #32]
 8003856:	029b      	lsls	r3, r3, #10
 8003858:	4959      	ldr	r1, [pc, #356]	; (80039c0 <HAL_RCC_OscConfig+0x280>)
 800385a:	4313      	orrs	r3, r2
 800385c:	60cb      	str	r3, [r1, #12]
 800385e:	e05f      	b.n	8003920 <HAL_RCC_OscConfig+0x1e0>
 8003860:	4b57      	ldr	r3, [pc, #348]	; (80039c0 <HAL_RCC_OscConfig+0x280>)
 8003862:	68db      	ldr	r3, [r3, #12]
 8003864:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	6a1b      	ldr	r3, [r3, #32]
 800386c:	03db      	lsls	r3, r3, #15
 800386e:	4954      	ldr	r1, [pc, #336]	; (80039c0 <HAL_RCC_OscConfig+0x280>)
 8003870:	4313      	orrs	r3, r2
 8003872:	60cb      	str	r3, [r1, #12]
 8003874:	e054      	b.n	8003920 <HAL_RCC_OscConfig+0x1e0>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8003876:	4b52      	ldr	r3, [pc, #328]	; (80039c0 <HAL_RCC_OscConfig+0x280>)
 8003878:	689b      	ldr	r3, [r3, #8]
 800387a:	4a51      	ldr	r2, [pc, #324]	; (80039c0 <HAL_RCC_OscConfig+0x280>)
 800387c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003880:	6093      	str	r3, [r2, #8]
 8003882:	4b4f      	ldr	r3, [pc, #316]	; (80039c0 <HAL_RCC_OscConfig+0x280>)
 8003884:	689b      	ldr	r3, [r3, #8]
 8003886:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800388e:	494c      	ldr	r1, [pc, #304]	; (80039c0 <HAL_RCC_OscConfig+0x280>)
 8003890:	4313      	orrs	r3, r2
 8003892:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003898:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 800389c:	d309      	bcc.n	80038b2 <HAL_RCC_OscConfig+0x172>
 800389e:	4b48      	ldr	r3, [pc, #288]	; (80039c0 <HAL_RCC_OscConfig+0x280>)
 80038a0:	68db      	ldr	r3, [r3, #12]
 80038a2:	f023 021f 	bic.w	r2, r3, #31
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	6a1b      	ldr	r3, [r3, #32]
 80038aa:	4945      	ldr	r1, [pc, #276]	; (80039c0 <HAL_RCC_OscConfig+0x280>)
 80038ac:	4313      	orrs	r3, r2
 80038ae:	60cb      	str	r3, [r1, #12]
 80038b0:	e028      	b.n	8003904 <HAL_RCC_OscConfig+0x1c4>
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	da0a      	bge.n	80038d0 <HAL_RCC_OscConfig+0x190>
 80038ba:	4b41      	ldr	r3, [pc, #260]	; (80039c0 <HAL_RCC_OscConfig+0x280>)
 80038bc:	68db      	ldr	r3, [r3, #12]
 80038be:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	6a1b      	ldr	r3, [r3, #32]
 80038c6:	015b      	lsls	r3, r3, #5
 80038c8:	493d      	ldr	r1, [pc, #244]	; (80039c0 <HAL_RCC_OscConfig+0x280>)
 80038ca:	4313      	orrs	r3, r2
 80038cc:	60cb      	str	r3, [r1, #12]
 80038ce:	e019      	b.n	8003904 <HAL_RCC_OscConfig+0x1c4>
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80038d8:	d30a      	bcc.n	80038f0 <HAL_RCC_OscConfig+0x1b0>
 80038da:	4b39      	ldr	r3, [pc, #228]	; (80039c0 <HAL_RCC_OscConfig+0x280>)
 80038dc:	68db      	ldr	r3, [r3, #12]
 80038de:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	6a1b      	ldr	r3, [r3, #32]
 80038e6:	029b      	lsls	r3, r3, #10
 80038e8:	4935      	ldr	r1, [pc, #212]	; (80039c0 <HAL_RCC_OscConfig+0x280>)
 80038ea:	4313      	orrs	r3, r2
 80038ec:	60cb      	str	r3, [r1, #12]
 80038ee:	e009      	b.n	8003904 <HAL_RCC_OscConfig+0x1c4>
 80038f0:	4b33      	ldr	r3, [pc, #204]	; (80039c0 <HAL_RCC_OscConfig+0x280>)
 80038f2:	68db      	ldr	r3, [r3, #12]
 80038f4:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	6a1b      	ldr	r3, [r3, #32]
 80038fc:	03db      	lsls	r3, r3, #15
 80038fe:	4930      	ldr	r1, [pc, #192]	; (80039c0 <HAL_RCC_OscConfig+0x280>)
 8003900:	4313      	orrs	r3, r2
 8003902:	60cb      	str	r3, [r1, #12]
                                                (pRCC_OscInitStruct->MSIClockRange));

          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8003904:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003906:	2b00      	cmp	r3, #0
 8003908:	d10a      	bne.n	8003920 <HAL_RCC_OscConfig+0x1e0>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800390e:	4618      	mov	r0, r3
 8003910:	f001 f93c 	bl	8004b8c <RCC_SetFlashLatencyFromMSIRange>
 8003914:	4603      	mov	r3, r0
 8003916:	2b00      	cmp	r3, #0
 8003918:	d002      	beq.n	8003920 <HAL_RCC_OscConfig+0x1e0>
            {
              return HAL_ERROR;
 800391a:	2301      	movs	r3, #1
 800391c:	f000 bde5 	b.w	80044ea <HAL_RCC_OscConfig+0xdaa>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        (void) HAL_RCC_GetHCLKFreq();
 8003920:	f001 f8de 	bl	8004ae0 <HAL_RCC_GetHCLKFreq>
        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003924:	4b27      	ldr	r3, [pc, #156]	; (80039c4 <HAL_RCC_OscConfig+0x284>)
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	4618      	mov	r0, r3
 800392a:	f7fd fcdf 	bl	80012ec <HAL_InitTick>
 800392e:	4603      	mov	r3, r0
 8003930:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        if (status != HAL_OK)
 8003934:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003938:	2b00      	cmp	r3, #0
 800393a:	f000 808a 	beq.w	8003a52 <HAL_RCC_OscConfig+0x312>
        {
          return status;
 800393e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003942:	f000 bdd2 	b.w	80044ea <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Check the MSI State */
      if (pRCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	69db      	ldr	r3, [r3, #28]
 800394a:	2b00      	cmp	r3, #0
 800394c:	d066      	beq.n	8003a1c <HAL_RCC_OscConfig+0x2dc>
      {
        /* Enable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_ENABLE();
 800394e:	4b1c      	ldr	r3, [pc, #112]	; (80039c0 <HAL_RCC_OscConfig+0x280>)
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	4a1b      	ldr	r2, [pc, #108]	; (80039c0 <HAL_RCC_OscConfig+0x280>)
 8003954:	f043 0301 	orr.w	r3, r3, #1
 8003958:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800395a:	f7fd fd11 	bl	8001380 <HAL_GetTick>
 800395e:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8003960:	e009      	b.n	8003976 <HAL_RCC_OscConfig+0x236>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003962:	f7fd fd0d 	bl	8001380 <HAL_GetTick>
 8003966:	4602      	mov	r2, r0
 8003968:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800396a:	1ad3      	subs	r3, r2, r3
 800396c:	2b02      	cmp	r3, #2
 800396e:	d902      	bls.n	8003976 <HAL_RCC_OscConfig+0x236>
          {
            return HAL_TIMEOUT;
 8003970:	2303      	movs	r3, #3
 8003972:	f000 bdba 	b.w	80044ea <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8003976:	4b12      	ldr	r3, [pc, #72]	; (80039c0 <HAL_RCC_OscConfig+0x280>)
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	f003 0304 	and.w	r3, r3, #4
 800397e:	2b00      	cmp	r3, #0
 8003980:	d0ef      	beq.n	8003962 <HAL_RCC_OscConfig+0x222>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range */
        __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8003982:	4b0f      	ldr	r3, [pc, #60]	; (80039c0 <HAL_RCC_OscConfig+0x280>)
 8003984:	689b      	ldr	r3, [r3, #8]
 8003986:	4a0e      	ldr	r2, [pc, #56]	; (80039c0 <HAL_RCC_OscConfig+0x280>)
 8003988:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800398c:	6093      	str	r3, [r2, #8]
 800398e:	4b0c      	ldr	r3, [pc, #48]	; (80039c0 <HAL_RCC_OscConfig+0x280>)
 8003990:	689b      	ldr	r3, [r3, #8]
 8003992:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800399a:	4909      	ldr	r1, [pc, #36]	; (80039c0 <HAL_RCC_OscConfig+0x280>)
 800399c:	4313      	orrs	r3, r2
 800399e:	608b      	str	r3, [r1, #8]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039a4:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 80039a8:	d30e      	bcc.n	80039c8 <HAL_RCC_OscConfig+0x288>
 80039aa:	4b05      	ldr	r3, [pc, #20]	; (80039c0 <HAL_RCC_OscConfig+0x280>)
 80039ac:	68db      	ldr	r3, [r3, #12]
 80039ae:	f023 021f 	bic.w	r2, r3, #31
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	6a1b      	ldr	r3, [r3, #32]
 80039b6:	4902      	ldr	r1, [pc, #8]	; (80039c0 <HAL_RCC_OscConfig+0x280>)
 80039b8:	4313      	orrs	r3, r2
 80039ba:	60cb      	str	r3, [r1, #12]
 80039bc:	e04a      	b.n	8003a54 <HAL_RCC_OscConfig+0x314>
 80039be:	bf00      	nop
 80039c0:	46020c00 	.word	0x46020c00
 80039c4:	20000004 	.word	0x20000004
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	da0a      	bge.n	80039e6 <HAL_RCC_OscConfig+0x2a6>
 80039d0:	4b98      	ldr	r3, [pc, #608]	; (8003c34 <HAL_RCC_OscConfig+0x4f4>)
 80039d2:	68db      	ldr	r3, [r3, #12]
 80039d4:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	6a1b      	ldr	r3, [r3, #32]
 80039dc:	015b      	lsls	r3, r3, #5
 80039de:	4995      	ldr	r1, [pc, #596]	; (8003c34 <HAL_RCC_OscConfig+0x4f4>)
 80039e0:	4313      	orrs	r3, r2
 80039e2:	60cb      	str	r3, [r1, #12]
 80039e4:	e036      	b.n	8003a54 <HAL_RCC_OscConfig+0x314>
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80039ee:	d30a      	bcc.n	8003a06 <HAL_RCC_OscConfig+0x2c6>
 80039f0:	4b90      	ldr	r3, [pc, #576]	; (8003c34 <HAL_RCC_OscConfig+0x4f4>)
 80039f2:	68db      	ldr	r3, [r3, #12]
 80039f4:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	6a1b      	ldr	r3, [r3, #32]
 80039fc:	029b      	lsls	r3, r3, #10
 80039fe:	498d      	ldr	r1, [pc, #564]	; (8003c34 <HAL_RCC_OscConfig+0x4f4>)
 8003a00:	4313      	orrs	r3, r2
 8003a02:	60cb      	str	r3, [r1, #12]
 8003a04:	e026      	b.n	8003a54 <HAL_RCC_OscConfig+0x314>
 8003a06:	4b8b      	ldr	r3, [pc, #556]	; (8003c34 <HAL_RCC_OscConfig+0x4f4>)
 8003a08:	68db      	ldr	r3, [r3, #12]
 8003a0a:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	6a1b      	ldr	r3, [r3, #32]
 8003a12:	03db      	lsls	r3, r3, #15
 8003a14:	4987      	ldr	r1, [pc, #540]	; (8003c34 <HAL_RCC_OscConfig+0x4f4>)
 8003a16:	4313      	orrs	r3, r2
 8003a18:	60cb      	str	r3, [r1, #12]
 8003a1a:	e01b      	b.n	8003a54 <HAL_RCC_OscConfig+0x314>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_DISABLE();
 8003a1c:	4b85      	ldr	r3, [pc, #532]	; (8003c34 <HAL_RCC_OscConfig+0x4f4>)
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	4a84      	ldr	r2, [pc, #528]	; (8003c34 <HAL_RCC_OscConfig+0x4f4>)
 8003a22:	f023 0301 	bic.w	r3, r3, #1
 8003a26:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8003a28:	f7fd fcaa 	bl	8001380 <HAL_GetTick>
 8003a2c:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 8003a2e:	e009      	b.n	8003a44 <HAL_RCC_OscConfig+0x304>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003a30:	f7fd fca6 	bl	8001380 <HAL_GetTick>
 8003a34:	4602      	mov	r2, r0
 8003a36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a38:	1ad3      	subs	r3, r2, r3
 8003a3a:	2b02      	cmp	r3, #2
 8003a3c:	d902      	bls.n	8003a44 <HAL_RCC_OscConfig+0x304>
          {
            return HAL_TIMEOUT;
 8003a3e:	2303      	movs	r3, #3
 8003a40:	f000 bd53 	b.w	80044ea <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 8003a44:	4b7b      	ldr	r3, [pc, #492]	; (8003c34 <HAL_RCC_OscConfig+0x4f4>)
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	f003 0304 	and.w	r3, r3, #4
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d1ef      	bne.n	8003a30 <HAL_RCC_OscConfig+0x2f0>
 8003a50:	e000      	b.n	8003a54 <HAL_RCC_OscConfig+0x314>
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8003a52:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	f003 0301 	and.w	r3, r3, #1
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	f000 808b 	beq.w	8003b78 <HAL_RCC_OscConfig+0x438>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pRCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8003a62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a64:	2b08      	cmp	r3, #8
 8003a66:	d005      	beq.n	8003a74 <HAL_RCC_OscConfig+0x334>
 8003a68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a6a:	2b0c      	cmp	r3, #12
 8003a6c:	d109      	bne.n	8003a82 <HAL_RCC_OscConfig+0x342>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003a6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a70:	2b03      	cmp	r3, #3
 8003a72:	d106      	bne.n	8003a82 <HAL_RCC_OscConfig+0x342>
    {
      if (pRCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	685b      	ldr	r3, [r3, #4]
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d17d      	bne.n	8003b78 <HAL_RCC_OscConfig+0x438>
      {
        return HAL_ERROR;
 8003a7c:	2301      	movs	r3, #1
 8003a7e:	f000 bd34 	b.w	80044ea <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pRCC_OscInitStruct->HSEState);
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	685b      	ldr	r3, [r3, #4]
 8003a86:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a8a:	d106      	bne.n	8003a9a <HAL_RCC_OscConfig+0x35a>
 8003a8c:	4b69      	ldr	r3, [pc, #420]	; (8003c34 <HAL_RCC_OscConfig+0x4f4>)
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	4a68      	ldr	r2, [pc, #416]	; (8003c34 <HAL_RCC_OscConfig+0x4f4>)
 8003a92:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a96:	6013      	str	r3, [r2, #0]
 8003a98:	e041      	b.n	8003b1e <HAL_RCC_OscConfig+0x3de>
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	685b      	ldr	r3, [r3, #4]
 8003a9e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003aa2:	d112      	bne.n	8003aca <HAL_RCC_OscConfig+0x38a>
 8003aa4:	4b63      	ldr	r3, [pc, #396]	; (8003c34 <HAL_RCC_OscConfig+0x4f4>)
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	4a62      	ldr	r2, [pc, #392]	; (8003c34 <HAL_RCC_OscConfig+0x4f4>)
 8003aaa:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003aae:	6013      	str	r3, [r2, #0]
 8003ab0:	4b60      	ldr	r3, [pc, #384]	; (8003c34 <HAL_RCC_OscConfig+0x4f4>)
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	4a5f      	ldr	r2, [pc, #380]	; (8003c34 <HAL_RCC_OscConfig+0x4f4>)
 8003ab6:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8003aba:	6013      	str	r3, [r2, #0]
 8003abc:	4b5d      	ldr	r3, [pc, #372]	; (8003c34 <HAL_RCC_OscConfig+0x4f4>)
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	4a5c      	ldr	r2, [pc, #368]	; (8003c34 <HAL_RCC_OscConfig+0x4f4>)
 8003ac2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ac6:	6013      	str	r3, [r2, #0]
 8003ac8:	e029      	b.n	8003b1e <HAL_RCC_OscConfig+0x3de>
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	685b      	ldr	r3, [r3, #4]
 8003ace:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 8003ad2:	d112      	bne.n	8003afa <HAL_RCC_OscConfig+0x3ba>
 8003ad4:	4b57      	ldr	r3, [pc, #348]	; (8003c34 <HAL_RCC_OscConfig+0x4f4>)
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	4a56      	ldr	r2, [pc, #344]	; (8003c34 <HAL_RCC_OscConfig+0x4f4>)
 8003ada:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003ade:	6013      	str	r3, [r2, #0]
 8003ae0:	4b54      	ldr	r3, [pc, #336]	; (8003c34 <HAL_RCC_OscConfig+0x4f4>)
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	4a53      	ldr	r2, [pc, #332]	; (8003c34 <HAL_RCC_OscConfig+0x4f4>)
 8003ae6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003aea:	6013      	str	r3, [r2, #0]
 8003aec:	4b51      	ldr	r3, [pc, #324]	; (8003c34 <HAL_RCC_OscConfig+0x4f4>)
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	4a50      	ldr	r2, [pc, #320]	; (8003c34 <HAL_RCC_OscConfig+0x4f4>)
 8003af2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003af6:	6013      	str	r3, [r2, #0]
 8003af8:	e011      	b.n	8003b1e <HAL_RCC_OscConfig+0x3de>
 8003afa:	4b4e      	ldr	r3, [pc, #312]	; (8003c34 <HAL_RCC_OscConfig+0x4f4>)
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	4a4d      	ldr	r2, [pc, #308]	; (8003c34 <HAL_RCC_OscConfig+0x4f4>)
 8003b00:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b04:	6013      	str	r3, [r2, #0]
 8003b06:	4b4b      	ldr	r3, [pc, #300]	; (8003c34 <HAL_RCC_OscConfig+0x4f4>)
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	4a4a      	ldr	r2, [pc, #296]	; (8003c34 <HAL_RCC_OscConfig+0x4f4>)
 8003b0c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003b10:	6013      	str	r3, [r2, #0]
 8003b12:	4b48      	ldr	r3, [pc, #288]	; (8003c34 <HAL_RCC_OscConfig+0x4f4>)
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	4a47      	ldr	r2, [pc, #284]	; (8003c34 <HAL_RCC_OscConfig+0x4f4>)
 8003b18:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8003b1c:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pRCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	685b      	ldr	r3, [r3, #4]
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d014      	beq.n	8003b50 <HAL_RCC_OscConfig+0x410>
      {
        tickstart = HAL_GetTick();
 8003b26:	f7fd fc2b 	bl	8001380 <HAL_GetTick>
 8003b2a:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003b2c:	e009      	b.n	8003b42 <HAL_RCC_OscConfig+0x402>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003b2e:	f7fd fc27 	bl	8001380 <HAL_GetTick>
 8003b32:	4602      	mov	r2, r0
 8003b34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b36:	1ad3      	subs	r3, r2, r3
 8003b38:	2b64      	cmp	r3, #100	; 0x64
 8003b3a:	d902      	bls.n	8003b42 <HAL_RCC_OscConfig+0x402>
          {
            return HAL_TIMEOUT;
 8003b3c:	2303      	movs	r3, #3
 8003b3e:	f000 bcd4 	b.w	80044ea <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003b42:	4b3c      	ldr	r3, [pc, #240]	; (8003c34 <HAL_RCC_OscConfig+0x4f4>)
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d0ef      	beq.n	8003b2e <HAL_RCC_OscConfig+0x3ee>
 8003b4e:	e013      	b.n	8003b78 <HAL_RCC_OscConfig+0x438>
          }
        }
      }
      else
      {
        tickstart = HAL_GetTick();
 8003b50:	f7fd fc16 	bl	8001380 <HAL_GetTick>
 8003b54:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003b56:	e009      	b.n	8003b6c <HAL_RCC_OscConfig+0x42c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003b58:	f7fd fc12 	bl	8001380 <HAL_GetTick>
 8003b5c:	4602      	mov	r2, r0
 8003b5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b60:	1ad3      	subs	r3, r2, r3
 8003b62:	2b64      	cmp	r3, #100	; 0x64
 8003b64:	d902      	bls.n	8003b6c <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 8003b66:	2303      	movs	r3, #3
 8003b68:	f000 bcbf 	b.w	80044ea <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003b6c:	4b31      	ldr	r3, [pc, #196]	; (8003c34 <HAL_RCC_OscConfig+0x4f4>)
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d1ef      	bne.n	8003b58 <HAL_RCC_OscConfig+0x418>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	f003 0302 	and.w	r3, r3, #2
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d05f      	beq.n	8003c44 <HAL_RCC_OscConfig+0x504>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(pRCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pRCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8003b84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b86:	2b04      	cmp	r3, #4
 8003b88:	d005      	beq.n	8003b96 <HAL_RCC_OscConfig+0x456>
 8003b8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b8c:	2b0c      	cmp	r3, #12
 8003b8e:	d114      	bne.n	8003bba <HAL_RCC_OscConfig+0x47a>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003b90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b92:	2b02      	cmp	r3, #2
 8003b94:	d111      	bne.n	8003bba <HAL_RCC_OscConfig+0x47a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	68db      	ldr	r3, [r3, #12]
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d102      	bne.n	8003ba4 <HAL_RCC_OscConfig+0x464>
      {
        return HAL_ERROR;
 8003b9e:	2301      	movs	r3, #1
 8003ba0:	f000 bca3 	b.w	80044ea <HAL_RCC_OscConfig+0xdaa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 8003ba4:	4b23      	ldr	r3, [pc, #140]	; (8003c34 <HAL_RCC_OscConfig+0x4f4>)
 8003ba6:	691b      	ldr	r3, [r3, #16]
 8003ba8:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	691b      	ldr	r3, [r3, #16]
 8003bb0:	041b      	lsls	r3, r3, #16
 8003bb2:	4920      	ldr	r1, [pc, #128]	; (8003c34 <HAL_RCC_OscConfig+0x4f4>)
 8003bb4:	4313      	orrs	r3, r2
 8003bb6:	610b      	str	r3, [r1, #16]
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8003bb8:	e044      	b.n	8003c44 <HAL_RCC_OscConfig+0x504>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pRCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	68db      	ldr	r3, [r3, #12]
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d024      	beq.n	8003c0c <HAL_RCC_OscConfig+0x4cc>
      {
        /* Enable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_ENABLE();
 8003bc2:	4b1c      	ldr	r3, [pc, #112]	; (8003c34 <HAL_RCC_OscConfig+0x4f4>)
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	4a1b      	ldr	r2, [pc, #108]	; (8003c34 <HAL_RCC_OscConfig+0x4f4>)
 8003bc8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003bcc:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8003bce:	f7fd fbd7 	bl	8001380 <HAL_GetTick>
 8003bd2:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003bd4:	e009      	b.n	8003bea <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003bd6:	f7fd fbd3 	bl	8001380 <HAL_GetTick>
 8003bda:	4602      	mov	r2, r0
 8003bdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bde:	1ad3      	subs	r3, r2, r3
 8003be0:	2b02      	cmp	r3, #2
 8003be2:	d902      	bls.n	8003bea <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003be4:	2303      	movs	r3, #3
 8003be6:	f000 bc80 	b.w	80044ea <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003bea:	4b12      	ldr	r3, [pc, #72]	; (8003c34 <HAL_RCC_OscConfig+0x4f4>)
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d0ef      	beq.n	8003bd6 <HAL_RCC_OscConfig+0x496>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 8003bf6:	4b0f      	ldr	r3, [pc, #60]	; (8003c34 <HAL_RCC_OscConfig+0x4f4>)
 8003bf8:	691b      	ldr	r3, [r3, #16]
 8003bfa:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	691b      	ldr	r3, [r3, #16]
 8003c02:	041b      	lsls	r3, r3, #16
 8003c04:	490b      	ldr	r1, [pc, #44]	; (8003c34 <HAL_RCC_OscConfig+0x4f4>)
 8003c06:	4313      	orrs	r3, r2
 8003c08:	610b      	str	r3, [r1, #16]
 8003c0a:	e01b      	b.n	8003c44 <HAL_RCC_OscConfig+0x504>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_DISABLE();
 8003c0c:	4b09      	ldr	r3, [pc, #36]	; (8003c34 <HAL_RCC_OscConfig+0x4f4>)
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	4a08      	ldr	r2, [pc, #32]	; (8003c34 <HAL_RCC_OscConfig+0x4f4>)
 8003c12:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003c16:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8003c18:	f7fd fbb2 	bl	8001380 <HAL_GetTick>
 8003c1c:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003c1e:	e00b      	b.n	8003c38 <HAL_RCC_OscConfig+0x4f8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003c20:	f7fd fbae 	bl	8001380 <HAL_GetTick>
 8003c24:	4602      	mov	r2, r0
 8003c26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c28:	1ad3      	subs	r3, r2, r3
 8003c2a:	2b02      	cmp	r3, #2
 8003c2c:	d904      	bls.n	8003c38 <HAL_RCC_OscConfig+0x4f8>
          {
            return HAL_TIMEOUT;
 8003c2e:	2303      	movs	r3, #3
 8003c30:	f000 bc5b 	b.w	80044ea <HAL_RCC_OscConfig+0xdaa>
 8003c34:	46020c00 	.word	0x46020c00
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003c38:	4baf      	ldr	r3, [pc, #700]	; (8003ef8 <HAL_RCC_OscConfig+0x7b8>)
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d1ed      	bne.n	8003c20 <HAL_RCC_OscConfig+0x4e0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	f003 0308 	and.w	r3, r3, #8
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	f000 80c8 	beq.w	8003de2 <HAL_RCC_OscConfig+0x6a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(pRCC_OscInitStruct->LSIState));

    FlagStatus  pwrclkchanged = RESET;
 8003c52:	2300      	movs	r3, #0
 8003c54:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

    /* Update LSI configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003c58:	4ba7      	ldr	r3, [pc, #668]	; (8003ef8 <HAL_RCC_OscConfig+0x7b8>)
 8003c5a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003c5e:	f003 0304 	and.w	r3, r3, #4
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d111      	bne.n	8003c8a <HAL_RCC_OscConfig+0x54a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003c66:	4ba4      	ldr	r3, [pc, #656]	; (8003ef8 <HAL_RCC_OscConfig+0x7b8>)
 8003c68:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003c6c:	4aa2      	ldr	r2, [pc, #648]	; (8003ef8 <HAL_RCC_OscConfig+0x7b8>)
 8003c6e:	f043 0304 	orr.w	r3, r3, #4
 8003c72:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8003c76:	4ba0      	ldr	r3, [pc, #640]	; (8003ef8 <HAL_RCC_OscConfig+0x7b8>)
 8003c78:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003c7c:	f003 0304 	and.w	r3, r3, #4
 8003c80:	617b      	str	r3, [r7, #20]
 8003c82:	697b      	ldr	r3, [r7, #20]
      pwrclkchanged = SET;
 8003c84:	2301      	movs	r3, #1
 8003c86:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8003c8a:	4b9c      	ldr	r3, [pc, #624]	; (8003efc <HAL_RCC_OscConfig+0x7bc>)
 8003c8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c8e:	f003 0301 	and.w	r3, r3, #1
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d119      	bne.n	8003cca <HAL_RCC_OscConfig+0x58a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8003c96:	4b99      	ldr	r3, [pc, #612]	; (8003efc <HAL_RCC_OscConfig+0x7bc>)
 8003c98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c9a:	4a98      	ldr	r2, [pc, #608]	; (8003efc <HAL_RCC_OscConfig+0x7bc>)
 8003c9c:	f043 0301 	orr.w	r3, r3, #1
 8003ca0:	6293      	str	r3, [r2, #40]	; 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003ca2:	f7fd fb6d 	bl	8001380 <HAL_GetTick>
 8003ca6:	62b8      	str	r0, [r7, #40]	; 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8003ca8:	e009      	b.n	8003cbe <HAL_RCC_OscConfig+0x57e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003caa:	f7fd fb69 	bl	8001380 <HAL_GetTick>
 8003cae:	4602      	mov	r2, r0
 8003cb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cb2:	1ad3      	subs	r3, r2, r3
 8003cb4:	2b02      	cmp	r3, #2
 8003cb6:	d902      	bls.n	8003cbe <HAL_RCC_OscConfig+0x57e>
        {
          return HAL_TIMEOUT;
 8003cb8:	2303      	movs	r3, #3
 8003cba:	f000 bc16 	b.w	80044ea <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8003cbe:	4b8f      	ldr	r3, [pc, #572]	; (8003efc <HAL_RCC_OscConfig+0x7bc>)
 8003cc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cc2:	f003 0301 	and.w	r3, r3, #1
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d0ef      	beq.n	8003caa <HAL_RCC_OscConfig+0x56a>
        }
      }
    }
    /* Check the LSI State */
    if (pRCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	695b      	ldr	r3, [r3, #20]
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d05f      	beq.n	8003d92 <HAL_RCC_OscConfig+0x652>
    {
      uint32_t bdcr_temp = RCC->BDCR;
 8003cd2:	4b89      	ldr	r3, [pc, #548]	; (8003ef8 <HAL_RCC_OscConfig+0x7b8>)
 8003cd4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003cd8:	623b      	str	r3, [r7, #32]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(pRCC_OscInitStruct->LSIDiv));

      if (pRCC_OscInitStruct->LSIDiv != (bdcr_temp & RCC_BDCR_LSIPREDIV))
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	699a      	ldr	r2, [r3, #24]
 8003cde:	6a3b      	ldr	r3, [r7, #32]
 8003ce0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ce4:	429a      	cmp	r2, r3
 8003ce6:	d037      	beq.n	8003d58 <HAL_RCC_OscConfig+0x618>
      {
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 8003ce8:	6a3b      	ldr	r3, [r7, #32]
 8003cea:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d006      	beq.n	8003d00 <HAL_RCC_OscConfig+0x5c0>
            ((bdcr_temp & RCC_BDCR_LSION) != RCC_BDCR_LSION))
 8003cf2:	6a3b      	ldr	r3, [r7, #32]
 8003cf4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d101      	bne.n	8003d00 <HAL_RCC_OscConfig+0x5c0>
        {
          /* If LSIRDY is set while LSION is not enabled, LSIPREDIV can't be updated */
          /* The LSIPREDIV cannot be changed if the LSI is used by the IWDG or by the RTC */
          return HAL_ERROR;
 8003cfc:	2301      	movs	r3, #1
 8003cfe:	e3f4      	b.n	80044ea <HAL_RCC_OscConfig+0xdaa>
        }

        /* Turn off LSI before changing RCC_BDCR_LSIPREDIV */
        if ((bdcr_temp & RCC_BDCR_LSION) == RCC_BDCR_LSION)
 8003d00:	6a3b      	ldr	r3, [r7, #32]
 8003d02:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d01b      	beq.n	8003d42 <HAL_RCC_OscConfig+0x602>
        {
          __HAL_RCC_LSI_DISABLE();
 8003d0a:	4b7b      	ldr	r3, [pc, #492]	; (8003ef8 <HAL_RCC_OscConfig+0x7b8>)
 8003d0c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003d10:	4a79      	ldr	r2, [pc, #484]	; (8003ef8 <HAL_RCC_OscConfig+0x7b8>)
 8003d12:	f023 53a0 	bic.w	r3, r3, #335544320	; 0x14000000
 8003d16:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

          tickstart = HAL_GetTick();
 8003d1a:	f7fd fb31 	bl	8001380 <HAL_GetTick>
 8003d1e:	62b8      	str	r0, [r7, #40]	; 0x28

          /* Wait till LSI is disabled */
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8003d20:	e008      	b.n	8003d34 <HAL_RCC_OscConfig+0x5f4>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003d22:	f7fd fb2d 	bl	8001380 <HAL_GetTick>
 8003d26:	4602      	mov	r2, r0
 8003d28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d2a:	1ad3      	subs	r3, r2, r3
 8003d2c:	2b05      	cmp	r3, #5
 8003d2e:	d901      	bls.n	8003d34 <HAL_RCC_OscConfig+0x5f4>
            {
              return HAL_TIMEOUT;
 8003d30:	2303      	movs	r3, #3
 8003d32:	e3da      	b.n	80044ea <HAL_RCC_OscConfig+0xdaa>
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8003d34:	4b70      	ldr	r3, [pc, #448]	; (8003ef8 <HAL_RCC_OscConfig+0x7b8>)
 8003d36:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003d3a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d1ef      	bne.n	8003d22 <HAL_RCC_OscConfig+0x5e2>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->BDCR, RCC_BDCR_LSIPREDIV, pRCC_OscInitStruct->LSIDiv);
 8003d42:	4b6d      	ldr	r3, [pc, #436]	; (8003ef8 <HAL_RCC_OscConfig+0x7b8>)
 8003d44:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003d48:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	699b      	ldr	r3, [r3, #24]
 8003d50:	4969      	ldr	r1, [pc, #420]	; (8003ef8 <HAL_RCC_OscConfig+0x7b8>)
 8003d52:	4313      	orrs	r3, r2
 8003d54:	f8c1 30f0 	str.w	r3, [r1, #240]	; 0xf0
      }

      /* Enable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_ENABLE();
 8003d58:	4b67      	ldr	r3, [pc, #412]	; (8003ef8 <HAL_RCC_OscConfig+0x7b8>)
 8003d5a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003d5e:	4a66      	ldr	r2, [pc, #408]	; (8003ef8 <HAL_RCC_OscConfig+0x7b8>)
 8003d60:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003d64:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

      tickstart = HAL_GetTick();
 8003d68:	f7fd fb0a 	bl	8001380 <HAL_GetTick>
 8003d6c:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8003d6e:	e008      	b.n	8003d82 <HAL_RCC_OscConfig+0x642>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003d70:	f7fd fb06 	bl	8001380 <HAL_GetTick>
 8003d74:	4602      	mov	r2, r0
 8003d76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d78:	1ad3      	subs	r3, r2, r3
 8003d7a:	2b05      	cmp	r3, #5
 8003d7c:	d901      	bls.n	8003d82 <HAL_RCC_OscConfig+0x642>
        {
          return HAL_TIMEOUT;
 8003d7e:	2303      	movs	r3, #3
 8003d80:	e3b3      	b.n	80044ea <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8003d82:	4b5d      	ldr	r3, [pc, #372]	; (8003ef8 <HAL_RCC_OscConfig+0x7b8>)
 8003d84:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003d88:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d0ef      	beq.n	8003d70 <HAL_RCC_OscConfig+0x630>
 8003d90:	e01b      	b.n	8003dca <HAL_RCC_OscConfig+0x68a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_DISABLE();
 8003d92:	4b59      	ldr	r3, [pc, #356]	; (8003ef8 <HAL_RCC_OscConfig+0x7b8>)
 8003d94:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003d98:	4a57      	ldr	r2, [pc, #348]	; (8003ef8 <HAL_RCC_OscConfig+0x7b8>)
 8003d9a:	f023 53a0 	bic.w	r3, r3, #335544320	; 0x14000000
 8003d9e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

      tickstart = HAL_GetTick();
 8003da2:	f7fd faed 	bl	8001380 <HAL_GetTick>
 8003da6:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8003da8:	e008      	b.n	8003dbc <HAL_RCC_OscConfig+0x67c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003daa:	f7fd fae9 	bl	8001380 <HAL_GetTick>
 8003dae:	4602      	mov	r2, r0
 8003db0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003db2:	1ad3      	subs	r3, r2, r3
 8003db4:	2b05      	cmp	r3, #5
 8003db6:	d901      	bls.n	8003dbc <HAL_RCC_OscConfig+0x67c>
        {
          return HAL_TIMEOUT;
 8003db8:	2303      	movs	r3, #3
 8003dba:	e396      	b.n	80044ea <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8003dbc:	4b4e      	ldr	r3, [pc, #312]	; (8003ef8 <HAL_RCC_OscConfig+0x7b8>)
 8003dbe:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003dc2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d1ef      	bne.n	8003daa <HAL_RCC_OscConfig+0x66a>
        }
      }
    }
    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003dca:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8003dce:	2b01      	cmp	r3, #1
 8003dd0:	d107      	bne.n	8003de2 <HAL_RCC_OscConfig+0x6a2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003dd2:	4b49      	ldr	r3, [pc, #292]	; (8003ef8 <HAL_RCC_OscConfig+0x7b8>)
 8003dd4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003dd8:	4a47      	ldr	r2, [pc, #284]	; (8003ef8 <HAL_RCC_OscConfig+0x7b8>)
 8003dda:	f023 0304 	bic.w	r3, r3, #4
 8003dde:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	f003 0304 	and.w	r3, r3, #4
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	f000 8111 	beq.w	8004012 <HAL_RCC_OscConfig+0x8d2>
  {
    FlagStatus pwrclkchanged = RESET;
 8003df0:	2300      	movs	r3, #0
 8003df2:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pRCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003df6:	4b40      	ldr	r3, [pc, #256]	; (8003ef8 <HAL_RCC_OscConfig+0x7b8>)
 8003df8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003dfc:	f003 0304 	and.w	r3, r3, #4
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d111      	bne.n	8003e28 <HAL_RCC_OscConfig+0x6e8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003e04:	4b3c      	ldr	r3, [pc, #240]	; (8003ef8 <HAL_RCC_OscConfig+0x7b8>)
 8003e06:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003e0a:	4a3b      	ldr	r2, [pc, #236]	; (8003ef8 <HAL_RCC_OscConfig+0x7b8>)
 8003e0c:	f043 0304 	orr.w	r3, r3, #4
 8003e10:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8003e14:	4b38      	ldr	r3, [pc, #224]	; (8003ef8 <HAL_RCC_OscConfig+0x7b8>)
 8003e16:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003e1a:	f003 0304 	and.w	r3, r3, #4
 8003e1e:	613b      	str	r3, [r7, #16]
 8003e20:	693b      	ldr	r3, [r7, #16]
      pwrclkchanged = SET;
 8003e22:	2301      	movs	r3, #1
 8003e24:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8003e28:	4b34      	ldr	r3, [pc, #208]	; (8003efc <HAL_RCC_OscConfig+0x7bc>)
 8003e2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e2c:	f003 0301 	and.w	r3, r3, #1
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d118      	bne.n	8003e66 <HAL_RCC_OscConfig+0x726>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8003e34:	4b31      	ldr	r3, [pc, #196]	; (8003efc <HAL_RCC_OscConfig+0x7bc>)
 8003e36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e38:	4a30      	ldr	r2, [pc, #192]	; (8003efc <HAL_RCC_OscConfig+0x7bc>)
 8003e3a:	f043 0301 	orr.w	r3, r3, #1
 8003e3e:	6293      	str	r3, [r2, #40]	; 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003e40:	f7fd fa9e 	bl	8001380 <HAL_GetTick>
 8003e44:	62b8      	str	r0, [r7, #40]	; 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8003e46:	e008      	b.n	8003e5a <HAL_RCC_OscConfig+0x71a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e48:	f7fd fa9a 	bl	8001380 <HAL_GetTick>
 8003e4c:	4602      	mov	r2, r0
 8003e4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e50:	1ad3      	subs	r3, r2, r3
 8003e52:	2b02      	cmp	r3, #2
 8003e54:	d901      	bls.n	8003e5a <HAL_RCC_OscConfig+0x71a>
        {
          return HAL_TIMEOUT;
 8003e56:	2303      	movs	r3, #3
 8003e58:	e347      	b.n	80044ea <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8003e5a:	4b28      	ldr	r3, [pc, #160]	; (8003efc <HAL_RCC_OscConfig+0x7bc>)
 8003e5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e5e:	f003 0301 	and.w	r3, r3, #1
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d0f0      	beq.n	8003e48 <HAL_RCC_OscConfig+0x708>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	689b      	ldr	r3, [r3, #8]
 8003e6a:	f003 0301 	and.w	r3, r3, #1
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d01f      	beq.n	8003eb2 <HAL_RCC_OscConfig+0x772>
    {
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	689b      	ldr	r3, [r3, #8]
 8003e76:	f003 0304 	and.w	r3, r3, #4
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d010      	beq.n	8003ea0 <HAL_RCC_OscConfig+0x760>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8003e7e:	4b1e      	ldr	r3, [pc, #120]	; (8003ef8 <HAL_RCC_OscConfig+0x7b8>)
 8003e80:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003e84:	4a1c      	ldr	r2, [pc, #112]	; (8003ef8 <HAL_RCC_OscConfig+0x7b8>)
 8003e86:	f043 0304 	orr.w	r3, r3, #4
 8003e8a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003e8e:	4b1a      	ldr	r3, [pc, #104]	; (8003ef8 <HAL_RCC_OscConfig+0x7b8>)
 8003e90:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003e94:	4a18      	ldr	r2, [pc, #96]	; (8003ef8 <HAL_RCC_OscConfig+0x7b8>)
 8003e96:	f043 0301 	orr.w	r3, r3, #1
 8003e9a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8003e9e:	e018      	b.n	8003ed2 <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003ea0:	4b15      	ldr	r3, [pc, #84]	; (8003ef8 <HAL_RCC_OscConfig+0x7b8>)
 8003ea2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003ea6:	4a14      	ldr	r2, [pc, #80]	; (8003ef8 <HAL_RCC_OscConfig+0x7b8>)
 8003ea8:	f043 0301 	orr.w	r3, r3, #1
 8003eac:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8003eb0:	e00f      	b.n	8003ed2 <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003eb2:	4b11      	ldr	r3, [pc, #68]	; (8003ef8 <HAL_RCC_OscConfig+0x7b8>)
 8003eb4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003eb8:	4a0f      	ldr	r2, [pc, #60]	; (8003ef8 <HAL_RCC_OscConfig+0x7b8>)
 8003eba:	f023 0301 	bic.w	r3, r3, #1
 8003ebe:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8003ec2:	4b0d      	ldr	r3, [pc, #52]	; (8003ef8 <HAL_RCC_OscConfig+0x7b8>)
 8003ec4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003ec8:	4a0b      	ldr	r2, [pc, #44]	; (8003ef8 <HAL_RCC_OscConfig+0x7b8>)
 8003eca:	f023 0304 	bic.w	r3, r3, #4
 8003ece:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
    }

    /* Check the LSE State */
    if (pRCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	689b      	ldr	r3, [r3, #8]
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d057      	beq.n	8003f8a <HAL_RCC_OscConfig+0x84a>
    {
      tickstart = HAL_GetTick();
 8003eda:	f7fd fa51 	bl	8001380 <HAL_GetTick>
 8003ede:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003ee0:	e00e      	b.n	8003f00 <HAL_RCC_OscConfig+0x7c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ee2:	f7fd fa4d 	bl	8001380 <HAL_GetTick>
 8003ee6:	4602      	mov	r2, r0
 8003ee8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003eea:	1ad3      	subs	r3, r2, r3
 8003eec:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ef0:	4293      	cmp	r3, r2
 8003ef2:	d905      	bls.n	8003f00 <HAL_RCC_OscConfig+0x7c0>
        {
          return HAL_TIMEOUT;
 8003ef4:	2303      	movs	r3, #3
 8003ef6:	e2f8      	b.n	80044ea <HAL_RCC_OscConfig+0xdaa>
 8003ef8:	46020c00 	.word	0x46020c00
 8003efc:	46020800 	.word	0x46020800
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003f00:	4b9c      	ldr	r3, [pc, #624]	; (8004174 <HAL_RCC_OscConfig+0xa34>)
 8003f02:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003f06:	f003 0302 	and.w	r3, r3, #2
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d0e9      	beq.n	8003ee2 <HAL_RCC_OscConfig+0x7a2>
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	689b      	ldr	r3, [r3, #8]
 8003f12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d01b      	beq.n	8003f52 <HAL_RCC_OscConfig+0x812>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8003f1a:	4b96      	ldr	r3, [pc, #600]	; (8004174 <HAL_RCC_OscConfig+0xa34>)
 8003f1c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003f20:	4a94      	ldr	r2, [pc, #592]	; (8004174 <HAL_RCC_OscConfig+0xa34>)
 8003f22:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003f26:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8003f2a:	e00a      	b.n	8003f42 <HAL_RCC_OscConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f2c:	f7fd fa28 	bl	8001380 <HAL_GetTick>
 8003f30:	4602      	mov	r2, r0
 8003f32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f34:	1ad3      	subs	r3, r2, r3
 8003f36:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f3a:	4293      	cmp	r3, r2
 8003f3c:	d901      	bls.n	8003f42 <HAL_RCC_OscConfig+0x802>
          {
            return HAL_TIMEOUT;
 8003f3e:	2303      	movs	r3, #3
 8003f40:	e2d3      	b.n	80044ea <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8003f42:	4b8c      	ldr	r3, [pc, #560]	; (8004174 <HAL_RCC_OscConfig+0xa34>)
 8003f44:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003f48:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d0ed      	beq.n	8003f2c <HAL_RCC_OscConfig+0x7ec>
 8003f50:	e053      	b.n	8003ffa <HAL_RCC_OscConfig+0x8ba>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8003f52:	4b88      	ldr	r3, [pc, #544]	; (8004174 <HAL_RCC_OscConfig+0xa34>)
 8003f54:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003f58:	4a86      	ldr	r2, [pc, #536]	; (8004174 <HAL_RCC_OscConfig+0xa34>)
 8003f5a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003f5e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8003f62:	e00a      	b.n	8003f7a <HAL_RCC_OscConfig+0x83a>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f64:	f7fd fa0c 	bl	8001380 <HAL_GetTick>
 8003f68:	4602      	mov	r2, r0
 8003f6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f6c:	1ad3      	subs	r3, r2, r3
 8003f6e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f72:	4293      	cmp	r3, r2
 8003f74:	d901      	bls.n	8003f7a <HAL_RCC_OscConfig+0x83a>
          {
            return HAL_TIMEOUT;
 8003f76:	2303      	movs	r3, #3
 8003f78:	e2b7      	b.n	80044ea <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8003f7a:	4b7e      	ldr	r3, [pc, #504]	; (8004174 <HAL_RCC_OscConfig+0xa34>)
 8003f7c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003f80:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d1ed      	bne.n	8003f64 <HAL_RCC_OscConfig+0x824>
 8003f88:	e037      	b.n	8003ffa <HAL_RCC_OscConfig+0x8ba>
        }
      }
    }
    else
    {
      tickstart = HAL_GetTick();
 8003f8a:	f7fd f9f9 	bl	8001380 <HAL_GetTick>
 8003f8e:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003f90:	e00a      	b.n	8003fa8 <HAL_RCC_OscConfig+0x868>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f92:	f7fd f9f5 	bl	8001380 <HAL_GetTick>
 8003f96:	4602      	mov	r2, r0
 8003f98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f9a:	1ad3      	subs	r3, r2, r3
 8003f9c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003fa0:	4293      	cmp	r3, r2
 8003fa2:	d901      	bls.n	8003fa8 <HAL_RCC_OscConfig+0x868>
        {
          return HAL_TIMEOUT;
 8003fa4:	2303      	movs	r3, #3
 8003fa6:	e2a0      	b.n	80044ea <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003fa8:	4b72      	ldr	r3, [pc, #456]	; (8004174 <HAL_RCC_OscConfig+0xa34>)
 8003faa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003fae:	f003 0302 	and.w	r3, r3, #2
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d1ed      	bne.n	8003f92 <HAL_RCC_OscConfig+0x852>
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 8003fb6:	4b6f      	ldr	r3, [pc, #444]	; (8004174 <HAL_RCC_OscConfig+0xa34>)
 8003fb8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003fbc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d01a      	beq.n	8003ffa <HAL_RCC_OscConfig+0x8ba>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8003fc4:	4b6b      	ldr	r3, [pc, #428]	; (8004174 <HAL_RCC_OscConfig+0xa34>)
 8003fc6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003fca:	4a6a      	ldr	r2, [pc, #424]	; (8004174 <HAL_RCC_OscConfig+0xa34>)
 8003fcc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003fd0:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8003fd4:	e00a      	b.n	8003fec <HAL_RCC_OscConfig+0x8ac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003fd6:	f7fd f9d3 	bl	8001380 <HAL_GetTick>
 8003fda:	4602      	mov	r2, r0
 8003fdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fde:	1ad3      	subs	r3, r2, r3
 8003fe0:	f241 3288 	movw	r2, #5000	; 0x1388
 8003fe4:	4293      	cmp	r3, r2
 8003fe6:	d901      	bls.n	8003fec <HAL_RCC_OscConfig+0x8ac>
          {
            return HAL_TIMEOUT;
 8003fe8:	2303      	movs	r3, #3
 8003fea:	e27e      	b.n	80044ea <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8003fec:	4b61      	ldr	r3, [pc, #388]	; (8004174 <HAL_RCC_OscConfig+0xa34>)
 8003fee:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003ff2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d1ed      	bne.n	8003fd6 <HAL_RCC_OscConfig+0x896>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003ffa:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8003ffe:	2b01      	cmp	r3, #1
 8004000:	d107      	bne.n	8004012 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004002:	4b5c      	ldr	r3, [pc, #368]	; (8004174 <HAL_RCC_OscConfig+0xa34>)
 8004004:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004008:	4a5a      	ldr	r2, [pc, #360]	; (8004174 <HAL_RCC_OscConfig+0xa34>)
 800400a:	f023 0304 	bic.w	r3, r3, #4
 800400e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	f003 0320 	and.w	r3, r3, #32
 800401a:	2b00      	cmp	r3, #0
 800401c:	d036      	beq.n	800408c <HAL_RCC_OscConfig+0x94c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pRCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pRCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004022:	2b00      	cmp	r3, #0
 8004024:	d019      	beq.n	800405a <HAL_RCC_OscConfig+0x91a>
    {
      /* Enable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_ENABLE();
 8004026:	4b53      	ldr	r3, [pc, #332]	; (8004174 <HAL_RCC_OscConfig+0xa34>)
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	4a52      	ldr	r2, [pc, #328]	; (8004174 <HAL_RCC_OscConfig+0xa34>)
 800402c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004030:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8004032:	f7fd f9a5 	bl	8001380 <HAL_GetTick>
 8004036:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8004038:	e008      	b.n	800404c <HAL_RCC_OscConfig+0x90c>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800403a:	f7fd f9a1 	bl	8001380 <HAL_GetTick>
 800403e:	4602      	mov	r2, r0
 8004040:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004042:	1ad3      	subs	r3, r2, r3
 8004044:	2b02      	cmp	r3, #2
 8004046:	d901      	bls.n	800404c <HAL_RCC_OscConfig+0x90c>
        {
          return HAL_TIMEOUT;
 8004048:	2303      	movs	r3, #3
 800404a:	e24e      	b.n	80044ea <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 800404c:	4b49      	ldr	r3, [pc, #292]	; (8004174 <HAL_RCC_OscConfig+0xa34>)
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004054:	2b00      	cmp	r3, #0
 8004056:	d0f0      	beq.n	800403a <HAL_RCC_OscConfig+0x8fa>
 8004058:	e018      	b.n	800408c <HAL_RCC_OscConfig+0x94c>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_DISABLE();
 800405a:	4b46      	ldr	r3, [pc, #280]	; (8004174 <HAL_RCC_OscConfig+0xa34>)
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	4a45      	ldr	r2, [pc, #276]	; (8004174 <HAL_RCC_OscConfig+0xa34>)
 8004060:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004064:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8004066:	f7fd f98b 	bl	8001380 <HAL_GetTick>
 800406a:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 800406c:	e008      	b.n	8004080 <HAL_RCC_OscConfig+0x940>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800406e:	f7fd f987 	bl	8001380 <HAL_GetTick>
 8004072:	4602      	mov	r2, r0
 8004074:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004076:	1ad3      	subs	r3, r2, r3
 8004078:	2b02      	cmp	r3, #2
 800407a:	d901      	bls.n	8004080 <HAL_RCC_OscConfig+0x940>
        {
          return HAL_TIMEOUT;
 800407c:	2303      	movs	r3, #3
 800407e:	e234      	b.n	80044ea <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8004080:	4b3c      	ldr	r3, [pc, #240]	; (8004174 <HAL_RCC_OscConfig+0xa34>)
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004088:	2b00      	cmp	r3, #0
 800408a:	d1f0      	bne.n	800406e <HAL_RCC_OscConfig+0x92e>
      }
    }
  }

  /*------------------------------ SHSI Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_SHSI) == RCC_OSCILLATORTYPE_SHSI)
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004094:	2b00      	cmp	r3, #0
 8004096:	d036      	beq.n	8004106 <HAL_RCC_OscConfig+0x9c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SHSI(pRCC_OscInitStruct->SHSIState));

    /* Check the SHSI State */
    if (pRCC_OscInitStruct->SHSIState != RCC_SHSI_OFF)
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800409c:	2b00      	cmp	r3, #0
 800409e:	d019      	beq.n	80040d4 <HAL_RCC_OscConfig+0x994>
    {
      /* Enable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_ENABLE();
 80040a0:	4b34      	ldr	r3, [pc, #208]	; (8004174 <HAL_RCC_OscConfig+0xa34>)
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	4a33      	ldr	r2, [pc, #204]	; (8004174 <HAL_RCC_OscConfig+0xa34>)
 80040a6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80040aa:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 80040ac:	f7fd f968 	bl	8001380 <HAL_GetTick>
 80040b0:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till SHSI is ready */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 80040b2:	e008      	b.n	80040c6 <HAL_RCC_OscConfig+0x986>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 80040b4:	f7fd f964 	bl	8001380 <HAL_GetTick>
 80040b8:	4602      	mov	r2, r0
 80040ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040bc:	1ad3      	subs	r3, r2, r3
 80040be:	2b02      	cmp	r3, #2
 80040c0:	d901      	bls.n	80040c6 <HAL_RCC_OscConfig+0x986>
        {
          return HAL_TIMEOUT;
 80040c2:	2303      	movs	r3, #3
 80040c4:	e211      	b.n	80044ea <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 80040c6:	4b2b      	ldr	r3, [pc, #172]	; (8004174 <HAL_RCC_OscConfig+0xa34>)
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d0f0      	beq.n	80040b4 <HAL_RCC_OscConfig+0x974>
 80040d2:	e018      	b.n	8004106 <HAL_RCC_OscConfig+0x9c6>
      }
    }
    else
    {
      /* Disable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_DISABLE();
 80040d4:	4b27      	ldr	r3, [pc, #156]	; (8004174 <HAL_RCC_OscConfig+0xa34>)
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	4a26      	ldr	r2, [pc, #152]	; (8004174 <HAL_RCC_OscConfig+0xa34>)
 80040da:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80040de:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 80040e0:	f7fd f94e 	bl	8001380 <HAL_GetTick>
 80040e4:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till SHSI is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 80040e6:	e008      	b.n	80040fa <HAL_RCC_OscConfig+0x9ba>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 80040e8:	f7fd f94a 	bl	8001380 <HAL_GetTick>
 80040ec:	4602      	mov	r2, r0
 80040ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040f0:	1ad3      	subs	r3, r2, r3
 80040f2:	2b02      	cmp	r3, #2
 80040f4:	d901      	bls.n	80040fa <HAL_RCC_OscConfig+0x9ba>
        {
          return HAL_TIMEOUT;
 80040f6:	2303      	movs	r3, #3
 80040f8:	e1f7      	b.n	80044ea <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 80040fa:	4b1e      	ldr	r3, [pc, #120]	; (8004174 <HAL_RCC_OscConfig+0xa34>)
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004102:	2b00      	cmp	r3, #0
 8004104:	d1f0      	bne.n	80040e8 <HAL_RCC_OscConfig+0x9a8>
        }
      }
    }
  }
  /*------------------------------ MSIK Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSIK) == RCC_OSCILLATORTYPE_MSIK)
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800410e:	2b00      	cmp	r3, #0
 8004110:	d07f      	beq.n	8004212 <HAL_RCC_OscConfig+0xad2>
    assert_param(IS_RCC_MSIK(pRCC_OscInitStruct->MSIKState));
    assert_param(IS_RCC_MSIK_CLOCK_RANGE(pRCC_OscInitStruct->MSIKClockRange));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));

    /* Check the MSIK State */
    if (pRCC_OscInitStruct->MSIKState != RCC_MSIK_OFF)
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004116:	2b00      	cmp	r3, #0
 8004118:	d062      	beq.n	80041e0 <HAL_RCC_OscConfig+0xaa0>
    {

      /* Selects the Multiple Speed of kernel high speed oscillator (MSIK) clock range .*/
      __HAL_RCC_MSIK_RANGE_CONFIG(pRCC_OscInitStruct->MSIKClockRange);
 800411a:	4b16      	ldr	r3, [pc, #88]	; (8004174 <HAL_RCC_OscConfig+0xa34>)
 800411c:	689b      	ldr	r3, [r3, #8]
 800411e:	4a15      	ldr	r2, [pc, #84]	; (8004174 <HAL_RCC_OscConfig+0xa34>)
 8004120:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004124:	6093      	str	r3, [r2, #8]
 8004126:	4b13      	ldr	r3, [pc, #76]	; (8004174 <HAL_RCC_OscConfig+0xa34>)
 8004128:	689b      	ldr	r3, [r3, #8]
 800412a:	f023 6270 	bic.w	r2, r3, #251658240	; 0xf000000
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004132:	4910      	ldr	r1, [pc, #64]	; (8004174 <HAL_RCC_OscConfig+0xa34>)
 8004134:	4313      	orrs	r3, r2
 8004136:	608b      	str	r3, [r1, #8]
      /* Adjusts the Multiple Speed of kernel high speed oscillator (MSIK) calibration value.*/
      __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800413c:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8004140:	d309      	bcc.n	8004156 <HAL_RCC_OscConfig+0xa16>
 8004142:	4b0c      	ldr	r3, [pc, #48]	; (8004174 <HAL_RCC_OscConfig+0xa34>)
 8004144:	68db      	ldr	r3, [r3, #12]
 8004146:	f023 021f 	bic.w	r2, r3, #31
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	6a1b      	ldr	r3, [r3, #32]
 800414e:	4909      	ldr	r1, [pc, #36]	; (8004174 <HAL_RCC_OscConfig+0xa34>)
 8004150:	4313      	orrs	r3, r2
 8004152:	60cb      	str	r3, [r1, #12]
 8004154:	e02a      	b.n	80041ac <HAL_RCC_OscConfig+0xa6c>
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800415a:	2b00      	cmp	r3, #0
 800415c:	da0c      	bge.n	8004178 <HAL_RCC_OscConfig+0xa38>
 800415e:	4b05      	ldr	r3, [pc, #20]	; (8004174 <HAL_RCC_OscConfig+0xa34>)
 8004160:	68db      	ldr	r3, [r3, #12]
 8004162:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	6a1b      	ldr	r3, [r3, #32]
 800416a:	015b      	lsls	r3, r3, #5
 800416c:	4901      	ldr	r1, [pc, #4]	; (8004174 <HAL_RCC_OscConfig+0xa34>)
 800416e:	4313      	orrs	r3, r2
 8004170:	60cb      	str	r3, [r1, #12]
 8004172:	e01b      	b.n	80041ac <HAL_RCC_OscConfig+0xa6c>
 8004174:	46020c00 	.word	0x46020c00
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800417c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004180:	d30a      	bcc.n	8004198 <HAL_RCC_OscConfig+0xa58>
 8004182:	4ba1      	ldr	r3, [pc, #644]	; (8004408 <HAL_RCC_OscConfig+0xcc8>)
 8004184:	68db      	ldr	r3, [r3, #12]
 8004186:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	6a1b      	ldr	r3, [r3, #32]
 800418e:	029b      	lsls	r3, r3, #10
 8004190:	499d      	ldr	r1, [pc, #628]	; (8004408 <HAL_RCC_OscConfig+0xcc8>)
 8004192:	4313      	orrs	r3, r2
 8004194:	60cb      	str	r3, [r1, #12]
 8004196:	e009      	b.n	80041ac <HAL_RCC_OscConfig+0xa6c>
 8004198:	4b9b      	ldr	r3, [pc, #620]	; (8004408 <HAL_RCC_OscConfig+0xcc8>)
 800419a:	68db      	ldr	r3, [r3, #12]
 800419c:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	6a1b      	ldr	r3, [r3, #32]
 80041a4:	03db      	lsls	r3, r3, #15
 80041a6:	4998      	ldr	r1, [pc, #608]	; (8004408 <HAL_RCC_OscConfig+0xcc8>)
 80041a8:	4313      	orrs	r3, r2
 80041aa:	60cb      	str	r3, [r1, #12]
                                            (pRCC_OscInitStruct->MSIClockRange));

      /* Enable the Internal kernel High Speed oscillator (MSIK) */
      __HAL_RCC_MSIK_ENABLE();
 80041ac:	4b96      	ldr	r3, [pc, #600]	; (8004408 <HAL_RCC_OscConfig+0xcc8>)
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	4a95      	ldr	r2, [pc, #596]	; (8004408 <HAL_RCC_OscConfig+0xcc8>)
 80041b2:	f043 0310 	orr.w	r3, r3, #16
 80041b6:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 80041b8:	f7fd f8e2 	bl	8001380 <HAL_GetTick>
 80041bc:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till MSIK is ready */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 80041be:	e008      	b.n	80041d2 <HAL_RCC_OscConfig+0xa92>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 80041c0:	f7fd f8de 	bl	8001380 <HAL_GetTick>
 80041c4:	4602      	mov	r2, r0
 80041c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041c8:	1ad3      	subs	r3, r2, r3
 80041ca:	2b02      	cmp	r3, #2
 80041cc:	d901      	bls.n	80041d2 <HAL_RCC_OscConfig+0xa92>
        {
          return HAL_TIMEOUT;
 80041ce:	2303      	movs	r3, #3
 80041d0:	e18b      	b.n	80044ea <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 80041d2:	4b8d      	ldr	r3, [pc, #564]	; (8004408 <HAL_RCC_OscConfig+0xcc8>)
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	f003 0320 	and.w	r3, r3, #32
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d0f0      	beq.n	80041c0 <HAL_RCC_OscConfig+0xa80>
 80041de:	e018      	b.n	8004212 <HAL_RCC_OscConfig+0xad2>
      }
    }
    else
    {
      /* Disable the Internal High Speed Kernel oscillator (MSIK) */
      __HAL_RCC_MSIK_DISABLE();
 80041e0:	4b89      	ldr	r3, [pc, #548]	; (8004408 <HAL_RCC_OscConfig+0xcc8>)
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	4a88      	ldr	r2, [pc, #544]	; (8004408 <HAL_RCC_OscConfig+0xcc8>)
 80041e6:	f023 0310 	bic.w	r3, r3, #16
 80041ea:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 80041ec:	f7fd f8c8 	bl	8001380 <HAL_GetTick>
 80041f0:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till MSIK is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 80041f2:	e008      	b.n	8004206 <HAL_RCC_OscConfig+0xac6>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 80041f4:	f7fd f8c4 	bl	8001380 <HAL_GetTick>
 80041f8:	4602      	mov	r2, r0
 80041fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041fc:	1ad3      	subs	r3, r2, r3
 80041fe:	2b02      	cmp	r3, #2
 8004200:	d901      	bls.n	8004206 <HAL_RCC_OscConfig+0xac6>
        {
          return HAL_TIMEOUT;
 8004202:	2303      	movs	r3, #3
 8004204:	e171      	b.n	80044ea <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 8004206:	4b80      	ldr	r3, [pc, #512]	; (8004408 <HAL_RCC_OscConfig+0xcc8>)
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	f003 0320 	and.w	r3, r3, #32
 800420e:	2b00      	cmp	r3, #0
 8004210:	d1f0      	bne.n	80041f4 <HAL_RCC_OscConfig+0xab4>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pRCC_OscInitStruct->PLL.PLLState));

  if ((pRCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004216:	2b00      	cmp	r3, #0
 8004218:	f000 8166 	beq.w	80044e8 <HAL_RCC_OscConfig+0xda8>
  {
    FlagStatus  pwrclkchanged = RESET;
 800421c:	2300      	movs	r3, #0
 800421e:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34

    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004222:	4b79      	ldr	r3, [pc, #484]	; (8004408 <HAL_RCC_OscConfig+0xcc8>)
 8004224:	69db      	ldr	r3, [r3, #28]
 8004226:	f003 030c 	and.w	r3, r3, #12
 800422a:	2b0c      	cmp	r3, #12
 800422c:	f000 80f2 	beq.w	8004414 <HAL_RCC_OscConfig+0xcd4>
    {
      if ((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004234:	2b02      	cmp	r3, #2
 8004236:	f040 80c5 	bne.w	80043c4 <HAL_RCC_OscConfig+0xc84>
        assert_param(IS_RCC_PLLP_VALUE(pRCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(pRCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(pRCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 800423a:	4b73      	ldr	r3, [pc, #460]	; (8004408 <HAL_RCC_OscConfig+0xcc8>)
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	4a72      	ldr	r2, [pc, #456]	; (8004408 <HAL_RCC_OscConfig+0xcc8>)
 8004240:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004244:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8004246:	f7fd f89b 	bl	8001380 <HAL_GetTick>
 800424a:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 800424c:	e008      	b.n	8004260 <HAL_RCC_OscConfig+0xb20>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800424e:	f7fd f897 	bl	8001380 <HAL_GetTick>
 8004252:	4602      	mov	r2, r0
 8004254:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004256:	1ad3      	subs	r3, r2, r3
 8004258:	2b02      	cmp	r3, #2
 800425a:	d901      	bls.n	8004260 <HAL_RCC_OscConfig+0xb20>
          {
            return HAL_TIMEOUT;
 800425c:	2303      	movs	r3, #3
 800425e:	e144      	b.n	80044ea <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8004260:	4b69      	ldr	r3, [pc, #420]	; (8004408 <HAL_RCC_OscConfig+0xcc8>)
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004268:	2b00      	cmp	r3, #0
 800426a:	d1f0      	bne.n	800424e <HAL_RCC_OscConfig+0xb0e>
          }
        }

        /* Requires to enable write access to Backup Domain of necessary */
        if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800426c:	4b66      	ldr	r3, [pc, #408]	; (8004408 <HAL_RCC_OscConfig+0xcc8>)
 800426e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004272:	f003 0304 	and.w	r3, r3, #4
 8004276:	2b00      	cmp	r3, #0
 8004278:	d111      	bne.n	800429e <HAL_RCC_OscConfig+0xb5e>
        {
          __HAL_RCC_PWR_CLK_ENABLE();
 800427a:	4b63      	ldr	r3, [pc, #396]	; (8004408 <HAL_RCC_OscConfig+0xcc8>)
 800427c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004280:	4a61      	ldr	r2, [pc, #388]	; (8004408 <HAL_RCC_OscConfig+0xcc8>)
 8004282:	f043 0304 	orr.w	r3, r3, #4
 8004286:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 800428a:	4b5f      	ldr	r3, [pc, #380]	; (8004408 <HAL_RCC_OscConfig+0xcc8>)
 800428c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004290:	f003 0304 	and.w	r3, r3, #4
 8004294:	60fb      	str	r3, [r7, #12]
 8004296:	68fb      	ldr	r3, [r7, #12]
          pwrclkchanged = SET;
 8004298:	2301      	movs	r3, #1
 800429a:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
        }

        /*Disable EPOD to configure PLL1MBOOST*/
        if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) == PWR_VOSR_BOOSTEN)
 800429e:	4b5b      	ldr	r3, [pc, #364]	; (800440c <HAL_RCC_OscConfig+0xccc>)
 80042a0:	68db      	ldr	r3, [r3, #12]
 80042a2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80042a6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80042aa:	d102      	bne.n	80042b2 <HAL_RCC_OscConfig+0xb72>
        {
          pwrboosten = SET;
 80042ac:	2301      	movs	r3, #1
 80042ae:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
        }
        CLEAR_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 80042b2:	4b56      	ldr	r3, [pc, #344]	; (800440c <HAL_RCC_OscConfig+0xccc>)
 80042b4:	68db      	ldr	r3, [r3, #12]
 80042b6:	4a55      	ldr	r2, [pc, #340]	; (800440c <HAL_RCC_OscConfig+0xccc>)
 80042b8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80042bc:	60d3      	str	r3, [r2, #12]

        /* Configure the main PLL clock source, multiplication and division factors */
        __HAL_RCC_PLL_CONFIG(pRCC_OscInitStruct->PLL.PLLSource,
 80042be:	4b52      	ldr	r3, [pc, #328]	; (8004408 <HAL_RCC_OscConfig+0xcc8>)
 80042c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042c2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80042c6:	f023 0303 	bic.w	r3, r3, #3
 80042ca:	687a      	ldr	r2, [r7, #4]
 80042cc:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 80042ce:	687a      	ldr	r2, [r7, #4]
 80042d0:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80042d2:	3a01      	subs	r2, #1
 80042d4:	0212      	lsls	r2, r2, #8
 80042d6:	4311      	orrs	r1, r2
 80042d8:	687a      	ldr	r2, [r7, #4]
 80042da:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80042dc:	430a      	orrs	r2, r1
 80042de:	494a      	ldr	r1, [pc, #296]	; (8004408 <HAL_RCC_OscConfig+0xcc8>)
 80042e0:	4313      	orrs	r3, r2
 80042e2:	628b      	str	r3, [r1, #40]	; 0x28
 80042e4:	4b48      	ldr	r3, [pc, #288]	; (8004408 <HAL_RCC_OscConfig+0xcc8>)
 80042e6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80042e8:	4b49      	ldr	r3, [pc, #292]	; (8004410 <HAL_RCC_OscConfig+0xcd0>)
 80042ea:	4013      	ands	r3, r2
 80042ec:	687a      	ldr	r2, [r7, #4]
 80042ee:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80042f0:	3a01      	subs	r2, #1
 80042f2:	f3c2 0108 	ubfx	r1, r2, #0, #9
 80042f6:	687a      	ldr	r2, [r7, #4]
 80042f8:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80042fa:	3a01      	subs	r2, #1
 80042fc:	0252      	lsls	r2, r2, #9
 80042fe:	b292      	uxth	r2, r2
 8004300:	4311      	orrs	r1, r2
 8004302:	687a      	ldr	r2, [r7, #4]
 8004304:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004306:	3a01      	subs	r2, #1
 8004308:	0412      	lsls	r2, r2, #16
 800430a:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 800430e:	4311      	orrs	r1, r2
 8004310:	687a      	ldr	r2, [r7, #4]
 8004312:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8004314:	3a01      	subs	r2, #1
 8004316:	0612      	lsls	r2, r2, #24
 8004318:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 800431c:	430a      	orrs	r2, r1
 800431e:	493a      	ldr	r1, [pc, #232]	; (8004408 <HAL_RCC_OscConfig+0xcc8>)
 8004320:	4313      	orrs	r3, r2
 8004322:	634b      	str	r3, [r1, #52]	; 0x34
                             pRCC_OscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_DISABLE();
 8004324:	4b38      	ldr	r3, [pc, #224]	; (8004408 <HAL_RCC_OscConfig+0xcc8>)
 8004326:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004328:	4a37      	ldr	r2, [pc, #220]	; (8004408 <HAL_RCC_OscConfig+0xcc8>)
 800432a:	f023 0310 	bic.w	r3, r3, #16
 800432e:	6293      	str	r3, [r2, #40]	; 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004334:	4a34      	ldr	r2, [pc, #208]	; (8004408 <HAL_RCC_OscConfig+0xcc8>)
 8004336:	00db      	lsls	r3, r3, #3
 8004338:	6393      	str	r3, [r2, #56]	; 0x38

        /* Enable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_ENABLE();
 800433a:	4b33      	ldr	r3, [pc, #204]	; (8004408 <HAL_RCC_OscConfig+0xcc8>)
 800433c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800433e:	4a32      	ldr	r2, [pc, #200]	; (8004408 <HAL_RCC_OscConfig+0xcc8>)
 8004340:	f043 0310 	orr.w	r3, r3, #16
 8004344:	6293      	str	r3, [r2, #40]	; 0x28

        assert_param(IS_RCC_PLLRGE_VALUE(pRCC_OscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(pRCC_OscInitStruct->PLL.PLLRGE);
 8004346:	4b30      	ldr	r3, [pc, #192]	; (8004408 <HAL_RCC_OscConfig+0xcc8>)
 8004348:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800434a:	f023 020c 	bic.w	r2, r3, #12
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004352:	492d      	ldr	r1, [pc, #180]	; (8004408 <HAL_RCC_OscConfig+0xcc8>)
 8004354:	4313      	orrs	r3, r2
 8004356:	628b      	str	r3, [r1, #40]	; 0x28

        if (pwrboosten == SET)
 8004358:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800435c:	2b01      	cmp	r3, #1
 800435e:	d105      	bne.n	800436c <HAL_RCC_OscConfig+0xc2c>
        {
          /* Enable the EPOD to reach max frequency */
          SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8004360:	4b2a      	ldr	r3, [pc, #168]	; (800440c <HAL_RCC_OscConfig+0xccc>)
 8004362:	68db      	ldr	r3, [r3, #12]
 8004364:	4a29      	ldr	r2, [pc, #164]	; (800440c <HAL_RCC_OscConfig+0xccc>)
 8004366:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800436a:	60d3      	str	r3, [r2, #12]
        }

        /* Restore clock configuration if changed */
        if (pwrclkchanged == SET)
 800436c:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8004370:	2b01      	cmp	r3, #1
 8004372:	d107      	bne.n	8004384 <HAL_RCC_OscConfig+0xc44>
        {
          __HAL_RCC_PWR_CLK_DISABLE();
 8004374:	4b24      	ldr	r3, [pc, #144]	; (8004408 <HAL_RCC_OscConfig+0xcc8>)
 8004376:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800437a:	4a23      	ldr	r2, [pc, #140]	; (8004408 <HAL_RCC_OscConfig+0xcc8>)
 800437c:	f023 0304 	bic.w	r3, r3, #4
 8004380:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
        }

        /* Enable PLL System Clock output */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8004384:	4b20      	ldr	r3, [pc, #128]	; (8004408 <HAL_RCC_OscConfig+0xcc8>)
 8004386:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004388:	4a1f      	ldr	r2, [pc, #124]	; (8004408 <HAL_RCC_OscConfig+0xcc8>)
 800438a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800438e:	6293      	str	r3, [r2, #40]	; 0x28

        /* Enable the main PLL */
        __HAL_RCC_PLL_ENABLE();
 8004390:	4b1d      	ldr	r3, [pc, #116]	; (8004408 <HAL_RCC_OscConfig+0xcc8>)
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	4a1c      	ldr	r2, [pc, #112]	; (8004408 <HAL_RCC_OscConfig+0xcc8>)
 8004396:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800439a:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800439c:	f7fc fff0 	bl	8001380 <HAL_GetTick>
 80043a0:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 80043a2:	e008      	b.n	80043b6 <HAL_RCC_OscConfig+0xc76>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80043a4:	f7fc ffec 	bl	8001380 <HAL_GetTick>
 80043a8:	4602      	mov	r2, r0
 80043aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043ac:	1ad3      	subs	r3, r2, r3
 80043ae:	2b02      	cmp	r3, #2
 80043b0:	d901      	bls.n	80043b6 <HAL_RCC_OscConfig+0xc76>
          {
            return HAL_TIMEOUT;
 80043b2:	2303      	movs	r3, #3
 80043b4:	e099      	b.n	80044ea <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 80043b6:	4b14      	ldr	r3, [pc, #80]	; (8004408 <HAL_RCC_OscConfig+0xcc8>)
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d0f0      	beq.n	80043a4 <HAL_RCC_OscConfig+0xc64>
 80043c2:	e091      	b.n	80044e8 <HAL_RCC_OscConfig+0xda8>
        }
      }
      else
      {
        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 80043c4:	4b10      	ldr	r3, [pc, #64]	; (8004408 <HAL_RCC_OscConfig+0xcc8>)
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	4a0f      	ldr	r2, [pc, #60]	; (8004408 <HAL_RCC_OscConfig+0xcc8>)
 80043ca:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80043ce:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80043d0:	f7fc ffd6 	bl	8001380 <HAL_GetTick>
 80043d4:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80043d6:	e008      	b.n	80043ea <HAL_RCC_OscConfig+0xcaa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80043d8:	f7fc ffd2 	bl	8001380 <HAL_GetTick>
 80043dc:	4602      	mov	r2, r0
 80043de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043e0:	1ad3      	subs	r3, r2, r3
 80043e2:	2b02      	cmp	r3, #2
 80043e4:	d901      	bls.n	80043ea <HAL_RCC_OscConfig+0xcaa>
          {
            return HAL_TIMEOUT;
 80043e6:	2303      	movs	r3, #3
 80043e8:	e07f      	b.n	80044ea <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80043ea:	4b07      	ldr	r3, [pc, #28]	; (8004408 <HAL_RCC_OscConfig+0xcc8>)
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d1f0      	bne.n	80043d8 <HAL_RCC_OscConfig+0xc98>
          }
        }

        /* Unselect main PLL clock source and disable main PLL outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 80043f6:	4b04      	ldr	r3, [pc, #16]	; (8004408 <HAL_RCC_OscConfig+0xcc8>)
 80043f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043fa:	4a03      	ldr	r2, [pc, #12]	; (8004408 <HAL_RCC_OscConfig+0xcc8>)
 80043fc:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
 8004400:	f023 0303 	bic.w	r3, r3, #3
 8004404:	6293      	str	r3, [r2, #40]	; 0x28
 8004406:	e06f      	b.n	80044e8 <HAL_RCC_OscConfig+0xda8>
 8004408:	46020c00 	.word	0x46020c00
 800440c:	46020800 	.word	0x46020800
 8004410:	80800000 	.word	0x80800000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 8004414:	4b37      	ldr	r3, [pc, #220]	; (80044f4 <HAL_RCC_OscConfig+0xdb4>)
 8004416:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004418:	61fb      	str	r3, [r7, #28]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800441a:	4b36      	ldr	r3, [pc, #216]	; (80044f4 <HAL_RCC_OscConfig+0xdb4>)
 800441c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800441e:	61bb      	str	r3, [r7, #24]
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004424:	2b01      	cmp	r3, #1
 8004426:	d039      	beq.n	800449c <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 8004428:	69fb      	ldr	r3, [r7, #28]
 800442a:	f003 0203 	and.w	r2, r3, #3
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004432:	429a      	cmp	r2, r3
 8004434:	d132      	bne.n	800449c <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 8004436:	69fb      	ldr	r3, [r7, #28]
 8004438:	0a1b      	lsrs	r3, r3, #8
 800443a:	f003 020f 	and.w	r2, r3, #15
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004442:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 8004444:	429a      	cmp	r2, r3
 8004446:	d129      	bne.n	800449c <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 8004448:	69fb      	ldr	r3, [r7, #28]
 800444a:	f403 4270 	and.w	r2, r3, #61440	; 0xf000
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	6c5b      	ldr	r3, [r3, #68]	; 0x44
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 8004452:	429a      	cmp	r2, r3
 8004454:	d122      	bne.n	800449c <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004456:	69bb      	ldr	r3, [r7, #24]
 8004458:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004460:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 8004462:	429a      	cmp	r2, r3
 8004464:	d11a      	bne.n	800449c <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 8004466:	69bb      	ldr	r3, [r7, #24]
 8004468:	0a5b      	lsrs	r3, r3, #9
 800446a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004472:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004474:	429a      	cmp	r2, r3
 8004476:	d111      	bne.n	800449c <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 8004478:	69bb      	ldr	r3, [r7, #24]
 800447a:	0c1b      	lsrs	r3, r3, #16
 800447c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004484:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004486:	429a      	cmp	r2, r3
 8004488:	d108      	bne.n	800449c <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 800448a:	69bb      	ldr	r3, [r7, #24]
 800448c:	0e1b      	lsrs	r3, r3, #24
 800448e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pRCC_OscInitStruct->PLL.PLLR - 1U)))
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004496:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004498:	429a      	cmp	r2, r3
 800449a:	d001      	beq.n	80044a0 <HAL_RCC_OscConfig+0xd60>
      {
        return HAL_ERROR;
 800449c:	2301      	movs	r3, #1
 800449e:	e024      	b.n	80044ea <HAL_RCC_OscConfig+0xdaa>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 80044a0:	4b14      	ldr	r3, [pc, #80]	; (80044f4 <HAL_RCC_OscConfig+0xdb4>)
 80044a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044a4:	08db      	lsrs	r3, r3, #3
 80044a6:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pRCC_OscInitStruct->PLL.PLLFRACN))
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 80044ae:	429a      	cmp	r2, r3
 80044b0:	d01a      	beq.n	80044e8 <HAL_RCC_OscConfig+0xda8>
      {
        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN. */
        __HAL_RCC_PLL_FRACN_DISABLE();
 80044b2:	4b10      	ldr	r3, [pc, #64]	; (80044f4 <HAL_RCC_OscConfig+0xdb4>)
 80044b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044b6:	4a0f      	ldr	r2, [pc, #60]	; (80044f4 <HAL_RCC_OscConfig+0xdb4>)
 80044b8:	f023 0310 	bic.w	r3, r3, #16
 80044bc:	6293      	str	r3, [r2, #40]	; 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044be:	f7fc ff5f 	bl	8001380 <HAL_GetTick>
 80044c2:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait at least 2 CK_REF (PLL1 input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < PLL_FRAC_WAIT_VALUE)
 80044c4:	bf00      	nop
 80044c6:	f7fc ff5b 	bl	8001380 <HAL_GetTick>
 80044ca:	4602      	mov	r2, r0
 80044cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044ce:	4293      	cmp	r3, r2
 80044d0:	d0f9      	beq.n	80044c6 <HAL_RCC_OscConfig+0xd86>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80044d6:	4a07      	ldr	r2, [pc, #28]	; (80044f4 <HAL_RCC_OscConfig+0xdb4>)
 80044d8:	00db      	lsls	r3, r3, #3
 80044da:	6393      	str	r3, [r2, #56]	; 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL_FRACN_ENABLE();
 80044dc:	4b05      	ldr	r3, [pc, #20]	; (80044f4 <HAL_RCC_OscConfig+0xdb4>)
 80044de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044e0:	4a04      	ldr	r2, [pc, #16]	; (80044f4 <HAL_RCC_OscConfig+0xdb4>)
 80044e2:	f043 0310 	orr.w	r3, r3, #16
 80044e6:	6293      	str	r3, [r2, #40]	; 0x28
      }
    }
  }
  return HAL_OK;
 80044e8:	2300      	movs	r3, #0
}
 80044ea:	4618      	mov	r0, r3
 80044ec:	3738      	adds	r7, #56	; 0x38
 80044ee:	46bd      	mov	sp, r7
 80044f0:	bd80      	pop	{r7, pc}
 80044f2:	bf00      	nop
 80044f4:	46020c00 	.word	0x46020c00

080044f8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef   *const pRCC_ClkInitStruct, uint32_t FLatency)
{
 80044f8:	b580      	push	{r7, lr}
 80044fa:	b086      	sub	sp, #24
 80044fc:	af00      	add	r7, sp, #0
 80044fe:	6078      	str	r0, [r7, #4]
 8004500:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pRCC_ClkInitStruct == NULL)
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	2b00      	cmp	r3, #0
 8004506:	d101      	bne.n	800450c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004508:	2301      	movs	r3, #1
 800450a:	e1d9      	b.n	80048c0 <HAL_RCC_ClockConfig+0x3c8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
   must be correctly programmed according to the frequency of the CPU clock
   (HCLK) and the supply voltage of the device */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800450c:	4b9b      	ldr	r3, [pc, #620]	; (800477c <HAL_RCC_ClockConfig+0x284>)
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	f003 030f 	and.w	r3, r3, #15
 8004514:	683a      	ldr	r2, [r7, #0]
 8004516:	429a      	cmp	r2, r3
 8004518:	d910      	bls.n	800453c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800451a:	4b98      	ldr	r3, [pc, #608]	; (800477c <HAL_RCC_ClockConfig+0x284>)
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	f023 020f 	bic.w	r2, r3, #15
 8004522:	4996      	ldr	r1, [pc, #600]	; (800477c <HAL_RCC_ClockConfig+0x284>)
 8004524:	683b      	ldr	r3, [r7, #0]
 8004526:	4313      	orrs	r3, r2
 8004528:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800452a:	4b94      	ldr	r3, [pc, #592]	; (800477c <HAL_RCC_ClockConfig+0x284>)
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	f003 030f 	and.w	r3, r3, #15
 8004532:	683a      	ldr	r2, [r7, #0]
 8004534:	429a      	cmp	r2, r3
 8004536:	d001      	beq.n	800453c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004538:	2301      	movs	r3, #1
 800453a:	e1c1      	b.n	80048c0 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	f003 0310 	and.w	r3, r3, #16
 8004544:	2b00      	cmp	r3, #0
 8004546:	d010      	beq.n	800456a <HAL_RCC_ClockConfig+0x72>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) > (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	695a      	ldr	r2, [r3, #20]
 800454c:	4b8c      	ldr	r3, [pc, #560]	; (8004780 <HAL_RCC_ClockConfig+0x288>)
 800454e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004550:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004554:	429a      	cmp	r2, r3
 8004556:	d908      	bls.n	800456a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, pRCC_ClkInitStruct->APB3CLKDivider);
 8004558:	4b89      	ldr	r3, [pc, #548]	; (8004780 <HAL_RCC_ClockConfig+0x288>)
 800455a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800455c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	695b      	ldr	r3, [r3, #20]
 8004564:	4986      	ldr	r1, [pc, #536]	; (8004780 <HAL_RCC_ClockConfig+0x288>)
 8004566:	4313      	orrs	r3, r2
 8004568:	624b      	str	r3, [r1, #36]	; 0x24
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	f003 0308 	and.w	r3, r3, #8
 8004572:	2b00      	cmp	r3, #0
 8004574:	d012      	beq.n	800459c <HAL_RCC_ClockConfig+0xa4>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	691a      	ldr	r2, [r3, #16]
 800457a:	4b81      	ldr	r3, [pc, #516]	; (8004780 <HAL_RCC_ClockConfig+0x288>)
 800457c:	6a1b      	ldr	r3, [r3, #32]
 800457e:	091b      	lsrs	r3, r3, #4
 8004580:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004584:	429a      	cmp	r2, r3
 8004586:	d909      	bls.n	800459c <HAL_RCC_ClockConfig+0xa4>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 8004588:	4b7d      	ldr	r3, [pc, #500]	; (8004780 <HAL_RCC_ClockConfig+0x288>)
 800458a:	6a1b      	ldr	r3, [r3, #32]
 800458c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	691b      	ldr	r3, [r3, #16]
 8004594:	011b      	lsls	r3, r3, #4
 8004596:	497a      	ldr	r1, [pc, #488]	; (8004780 <HAL_RCC_ClockConfig+0x288>)
 8004598:	4313      	orrs	r3, r2
 800459a:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	f003 0304 	and.w	r3, r3, #4
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d010      	beq.n	80045ca <HAL_RCC_ClockConfig+0xd2>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	68da      	ldr	r2, [r3, #12]
 80045ac:	4b74      	ldr	r3, [pc, #464]	; (8004780 <HAL_RCC_ClockConfig+0x288>)
 80045ae:	6a1b      	ldr	r3, [r3, #32]
 80045b0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80045b4:	429a      	cmp	r2, r3
 80045b6:	d908      	bls.n	80045ca <HAL_RCC_ClockConfig+0xd2>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 80045b8:	4b71      	ldr	r3, [pc, #452]	; (8004780 <HAL_RCC_ClockConfig+0x288>)
 80045ba:	6a1b      	ldr	r3, [r3, #32]
 80045bc:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	68db      	ldr	r3, [r3, #12]
 80045c4:	496e      	ldr	r1, [pc, #440]	; (8004780 <HAL_RCC_ClockConfig+0x288>)
 80045c6:	4313      	orrs	r3, r2
 80045c8:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	f003 0302 	and.w	r3, r3, #2
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d010      	beq.n	80045f8 <HAL_RCC_ClockConfig+0x100>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	689a      	ldr	r2, [r3, #8]
 80045da:	4b69      	ldr	r3, [pc, #420]	; (8004780 <HAL_RCC_ClockConfig+0x288>)
 80045dc:	6a1b      	ldr	r3, [r3, #32]
 80045de:	f003 030f 	and.w	r3, r3, #15
 80045e2:	429a      	cmp	r2, r3
 80045e4:	d908      	bls.n	80045f8 <HAL_RCC_ClockConfig+0x100>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 80045e6:	4b66      	ldr	r3, [pc, #408]	; (8004780 <HAL_RCC_ClockConfig+0x288>)
 80045e8:	6a1b      	ldr	r3, [r3, #32]
 80045ea:	f023 020f 	bic.w	r2, r3, #15
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	689b      	ldr	r3, [r3, #8]
 80045f2:	4963      	ldr	r1, [pc, #396]	; (8004780 <HAL_RCC_ClockConfig+0x288>)
 80045f4:	4313      	orrs	r3, r2
 80045f6:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	f003 0301 	and.w	r3, r3, #1
 8004600:	2b00      	cmp	r3, #0
 8004602:	f000 80d2 	beq.w	80047aa <HAL_RCC_ClockConfig+0x2b2>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pRCC_ClkInitStruct->SYSCLKSource));
    FlagStatus  pwrclkchanged = RESET;
 8004606:	2300      	movs	r3, #0
 8004608:	75fb      	strb	r3, [r7, #23]

    /* PLL is selected as System Clock Source */
    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	685b      	ldr	r3, [r3, #4]
 800460e:	2b03      	cmp	r3, #3
 8004610:	d143      	bne.n	800469a <HAL_RCC_ClockConfig+0x1a2>
    {
      if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004612:	4b5b      	ldr	r3, [pc, #364]	; (8004780 <HAL_RCC_ClockConfig+0x288>)
 8004614:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004618:	f003 0304 	and.w	r3, r3, #4
 800461c:	2b00      	cmp	r3, #0
 800461e:	d110      	bne.n	8004642 <HAL_RCC_ClockConfig+0x14a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8004620:	4b57      	ldr	r3, [pc, #348]	; (8004780 <HAL_RCC_ClockConfig+0x288>)
 8004622:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004626:	4a56      	ldr	r2, [pc, #344]	; (8004780 <HAL_RCC_ClockConfig+0x288>)
 8004628:	f043 0304 	orr.w	r3, r3, #4
 800462c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8004630:	4b53      	ldr	r3, [pc, #332]	; (8004780 <HAL_RCC_ClockConfig+0x288>)
 8004632:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004636:	f003 0304 	and.w	r3, r3, #4
 800463a:	60bb      	str	r3, [r7, #8]
 800463c:	68bb      	ldr	r3, [r7, #8]
        pwrclkchanged = SET;
 800463e:	2301      	movs	r3, #1
 8004640:	75fb      	strb	r3, [r7, #23]
      }
      tickstart = HAL_GetTick();
 8004642:	f7fc fe9d 	bl	8001380 <HAL_GetTick>
 8004646:	6138      	str	r0, [r7, #16]
      /* Check if EPOD is enabled */
      if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) != 0U)
 8004648:	4b4e      	ldr	r3, [pc, #312]	; (8004784 <HAL_RCC_ClockConfig+0x28c>)
 800464a:	68db      	ldr	r3, [r3, #12]
 800464c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004650:	2b00      	cmp	r3, #0
 8004652:	d00f      	beq.n	8004674 <HAL_RCC_ClockConfig+0x17c>
      {
        /* Wait till BOOST is ready */
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 8004654:	e008      	b.n	8004668 <HAL_RCC_ClockConfig+0x170>
        {
          if ((HAL_GetTick() - tickstart) > EPOD_TIMEOUT_VALUE)
 8004656:	f7fc fe93 	bl	8001380 <HAL_GetTick>
 800465a:	4602      	mov	r2, r0
 800465c:	693b      	ldr	r3, [r7, #16]
 800465e:	1ad3      	subs	r3, r2, r3
 8004660:	2b02      	cmp	r3, #2
 8004662:	d901      	bls.n	8004668 <HAL_RCC_ClockConfig+0x170>
          {
            return HAL_TIMEOUT;
 8004664:	2303      	movs	r3, #3
 8004666:	e12b      	b.n	80048c0 <HAL_RCC_ClockConfig+0x3c8>
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 8004668:	4b46      	ldr	r3, [pc, #280]	; (8004784 <HAL_RCC_ClockConfig+0x28c>)
 800466a:	68db      	ldr	r3, [r3, #12]
 800466c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004670:	2b00      	cmp	r3, #0
 8004672:	d0f0      	beq.n	8004656 <HAL_RCC_ClockConfig+0x15e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8004674:	7dfb      	ldrb	r3, [r7, #23]
 8004676:	2b01      	cmp	r3, #1
 8004678:	d107      	bne.n	800468a <HAL_RCC_ClockConfig+0x192>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 800467a:	4b41      	ldr	r3, [pc, #260]	; (8004780 <HAL_RCC_ClockConfig+0x288>)
 800467c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004680:	4a3f      	ldr	r2, [pc, #252]	; (8004780 <HAL_RCC_ClockConfig+0x288>)
 8004682:	f023 0304 	bic.w	r3, r3, #4
 8004686:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      }

      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 800468a:	4b3d      	ldr	r3, [pc, #244]	; (8004780 <HAL_RCC_ClockConfig+0x288>)
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004692:	2b00      	cmp	r3, #0
 8004694:	d121      	bne.n	80046da <HAL_RCC_ClockConfig+0x1e2>
      {
        return HAL_ERROR;
 8004696:	2301      	movs	r3, #1
 8004698:	e112      	b.n	80048c0 <HAL_RCC_ClockConfig+0x3c8>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	685b      	ldr	r3, [r3, #4]
 800469e:	2b02      	cmp	r3, #2
 80046a0:	d107      	bne.n	80046b2 <HAL_RCC_ClockConfig+0x1ba>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80046a2:	4b37      	ldr	r3, [pc, #220]	; (8004780 <HAL_RCC_ClockConfig+0x288>)
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d115      	bne.n	80046da <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 80046ae:	2301      	movs	r3, #1
 80046b0:	e106      	b.n	80048c0 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	685b      	ldr	r3, [r3, #4]
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d107      	bne.n	80046ca <HAL_RCC_ClockConfig+0x1d2>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 80046ba:	4b31      	ldr	r3, [pc, #196]	; (8004780 <HAL_RCC_ClockConfig+0x288>)
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	f003 0304 	and.w	r3, r3, #4
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d109      	bne.n	80046da <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 80046c6:	2301      	movs	r3, #1
 80046c8:	e0fa      	b.n	80048c0 <HAL_RCC_ClockConfig+0x3c8>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80046ca:	4b2d      	ldr	r3, [pc, #180]	; (8004780 <HAL_RCC_ClockConfig+0x288>)
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d101      	bne.n	80046da <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 80046d6:	2301      	movs	r3, #1
 80046d8:	e0f2      	b.n	80048c0 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pRCC_ClkInitStruct->SYSCLKSource);
 80046da:	4b29      	ldr	r3, [pc, #164]	; (8004780 <HAL_RCC_ClockConfig+0x288>)
 80046dc:	69db      	ldr	r3, [r3, #28]
 80046de:	f023 0203 	bic.w	r2, r3, #3
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	685b      	ldr	r3, [r3, #4]
 80046e6:	4926      	ldr	r1, [pc, #152]	; (8004780 <HAL_RCC_ClockConfig+0x288>)
 80046e8:	4313      	orrs	r3, r2
 80046ea:	61cb      	str	r3, [r1, #28]

    tickstart = HAL_GetTick();
 80046ec:	f7fc fe48 	bl	8001380 <HAL_GetTick>
 80046f0:	6138      	str	r0, [r7, #16]

    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	685b      	ldr	r3, [r3, #4]
 80046f6:	2b03      	cmp	r3, #3
 80046f8:	d112      	bne.n	8004720 <HAL_RCC_ClockConfig+0x228>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80046fa:	e00a      	b.n	8004712 <HAL_RCC_ClockConfig+0x21a>
      {
        if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80046fc:	f7fc fe40 	bl	8001380 <HAL_GetTick>
 8004700:	4602      	mov	r2, r0
 8004702:	693b      	ldr	r3, [r7, #16]
 8004704:	1ad3      	subs	r3, r2, r3
 8004706:	f241 3288 	movw	r2, #5000	; 0x1388
 800470a:	4293      	cmp	r3, r2
 800470c:	d901      	bls.n	8004712 <HAL_RCC_ClockConfig+0x21a>
        {
          return HAL_TIMEOUT;
 800470e:	2303      	movs	r3, #3
 8004710:	e0d6      	b.n	80048c0 <HAL_RCC_ClockConfig+0x3c8>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004712:	4b1b      	ldr	r3, [pc, #108]	; (8004780 <HAL_RCC_ClockConfig+0x288>)
 8004714:	69db      	ldr	r3, [r3, #28]
 8004716:	f003 030c 	and.w	r3, r3, #12
 800471a:	2b0c      	cmp	r3, #12
 800471c:	d1ee      	bne.n	80046fc <HAL_RCC_ClockConfig+0x204>
 800471e:	e044      	b.n	80047aa <HAL_RCC_ClockConfig+0x2b2>
        }
      }
    }
    else
    {
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	685b      	ldr	r3, [r3, #4]
 8004724:	2b02      	cmp	r3, #2
 8004726:	d112      	bne.n	800474e <HAL_RCC_ClockConfig+0x256>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8004728:	e00a      	b.n	8004740 <HAL_RCC_ClockConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800472a:	f7fc fe29 	bl	8001380 <HAL_GetTick>
 800472e:	4602      	mov	r2, r0
 8004730:	693b      	ldr	r3, [r7, #16]
 8004732:	1ad3      	subs	r3, r2, r3
 8004734:	f241 3288 	movw	r2, #5000	; 0x1388
 8004738:	4293      	cmp	r3, r2
 800473a:	d901      	bls.n	8004740 <HAL_RCC_ClockConfig+0x248>
          {
            return HAL_TIMEOUT;
 800473c:	2303      	movs	r3, #3
 800473e:	e0bf      	b.n	80048c0 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8004740:	4b0f      	ldr	r3, [pc, #60]	; (8004780 <HAL_RCC_ClockConfig+0x288>)
 8004742:	69db      	ldr	r3, [r3, #28]
 8004744:	f003 030c 	and.w	r3, r3, #12
 8004748:	2b08      	cmp	r3, #8
 800474a:	d1ee      	bne.n	800472a <HAL_RCC_ClockConfig+0x232>
 800474c:	e02d      	b.n	80047aa <HAL_RCC_ClockConfig+0x2b2>
          }
        }
      }
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	685b      	ldr	r3, [r3, #4]
 8004752:	2b00      	cmp	r3, #0
 8004754:	d123      	bne.n	800479e <HAL_RCC_ClockConfig+0x2a6>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8004756:	e00a      	b.n	800476e <HAL_RCC_ClockConfig+0x276>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004758:	f7fc fe12 	bl	8001380 <HAL_GetTick>
 800475c:	4602      	mov	r2, r0
 800475e:	693b      	ldr	r3, [r7, #16]
 8004760:	1ad3      	subs	r3, r2, r3
 8004762:	f241 3288 	movw	r2, #5000	; 0x1388
 8004766:	4293      	cmp	r3, r2
 8004768:	d901      	bls.n	800476e <HAL_RCC_ClockConfig+0x276>
          {
            return HAL_TIMEOUT;
 800476a:	2303      	movs	r3, #3
 800476c:	e0a8      	b.n	80048c0 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 800476e:	4b04      	ldr	r3, [pc, #16]	; (8004780 <HAL_RCC_ClockConfig+0x288>)
 8004770:	69db      	ldr	r3, [r3, #28]
 8004772:	f003 030c 	and.w	r3, r3, #12
 8004776:	2b00      	cmp	r3, #0
 8004778:	d1ee      	bne.n	8004758 <HAL_RCC_ClockConfig+0x260>
 800477a:	e016      	b.n	80047aa <HAL_RCC_ClockConfig+0x2b2>
 800477c:	40022000 	.word	0x40022000
 8004780:	46020c00 	.word	0x46020c00
 8004784:	46020800 	.word	0x46020800
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004788:	f7fc fdfa 	bl	8001380 <HAL_GetTick>
 800478c:	4602      	mov	r2, r0
 800478e:	693b      	ldr	r3, [r7, #16]
 8004790:	1ad3      	subs	r3, r2, r3
 8004792:	f241 3288 	movw	r2, #5000	; 0x1388
 8004796:	4293      	cmp	r3, r2
 8004798:	d901      	bls.n	800479e <HAL_RCC_ClockConfig+0x2a6>
          {
            return HAL_TIMEOUT;
 800479a:	2303      	movs	r3, #3
 800479c:	e090      	b.n	80048c0 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800479e:	4b4a      	ldr	r3, [pc, #296]	; (80048c8 <HAL_RCC_ClockConfig+0x3d0>)
 80047a0:	69db      	ldr	r3, [r3, #28]
 80047a2:	f003 030c 	and.w	r3, r3, #12
 80047a6:	2b04      	cmp	r3, #4
 80047a8:	d1ee      	bne.n	8004788 <HAL_RCC_ClockConfig+0x290>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	f003 0302 	and.w	r3, r3, #2
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d010      	beq.n	80047d8 <HAL_RCC_ClockConfig+0x2e0>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	689a      	ldr	r2, [r3, #8]
 80047ba:	4b43      	ldr	r3, [pc, #268]	; (80048c8 <HAL_RCC_ClockConfig+0x3d0>)
 80047bc:	6a1b      	ldr	r3, [r3, #32]
 80047be:	f003 030f 	and.w	r3, r3, #15
 80047c2:	429a      	cmp	r2, r3
 80047c4:	d208      	bcs.n	80047d8 <HAL_RCC_ClockConfig+0x2e0>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 80047c6:	4b40      	ldr	r3, [pc, #256]	; (80048c8 <HAL_RCC_ClockConfig+0x3d0>)
 80047c8:	6a1b      	ldr	r3, [r3, #32]
 80047ca:	f023 020f 	bic.w	r2, r3, #15
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	689b      	ldr	r3, [r3, #8]
 80047d2:	493d      	ldr	r1, [pc, #244]	; (80048c8 <HAL_RCC_ClockConfig+0x3d0>)
 80047d4:	4313      	orrs	r3, r2
 80047d6:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80047d8:	4b3c      	ldr	r3, [pc, #240]	; (80048cc <HAL_RCC_ClockConfig+0x3d4>)
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	f003 030f 	and.w	r3, r3, #15
 80047e0:	683a      	ldr	r2, [r7, #0]
 80047e2:	429a      	cmp	r2, r3
 80047e4:	d210      	bcs.n	8004808 <HAL_RCC_ClockConfig+0x310>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80047e6:	4b39      	ldr	r3, [pc, #228]	; (80048cc <HAL_RCC_ClockConfig+0x3d4>)
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	f023 020f 	bic.w	r2, r3, #15
 80047ee:	4937      	ldr	r1, [pc, #220]	; (80048cc <HAL_RCC_ClockConfig+0x3d4>)
 80047f0:	683b      	ldr	r3, [r7, #0]
 80047f2:	4313      	orrs	r3, r2
 80047f4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80047f6:	4b35      	ldr	r3, [pc, #212]	; (80048cc <HAL_RCC_ClockConfig+0x3d4>)
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	f003 030f 	and.w	r3, r3, #15
 80047fe:	683a      	ldr	r2, [r7, #0]
 8004800:	429a      	cmp	r2, r3
 8004802:	d001      	beq.n	8004808 <HAL_RCC_ClockConfig+0x310>
    {
      return HAL_ERROR;
 8004804:	2301      	movs	r3, #1
 8004806:	e05b      	b.n	80048c0 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	f003 0304 	and.w	r3, r3, #4
 8004810:	2b00      	cmp	r3, #0
 8004812:	d010      	beq.n	8004836 <HAL_RCC_ClockConfig+0x33e>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	68da      	ldr	r2, [r3, #12]
 8004818:	4b2b      	ldr	r3, [pc, #172]	; (80048c8 <HAL_RCC_ClockConfig+0x3d0>)
 800481a:	6a1b      	ldr	r3, [r3, #32]
 800481c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004820:	429a      	cmp	r2, r3
 8004822:	d208      	bcs.n	8004836 <HAL_RCC_ClockConfig+0x33e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 8004824:	4b28      	ldr	r3, [pc, #160]	; (80048c8 <HAL_RCC_ClockConfig+0x3d0>)
 8004826:	6a1b      	ldr	r3, [r3, #32]
 8004828:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	68db      	ldr	r3, [r3, #12]
 8004830:	4925      	ldr	r1, [pc, #148]	; (80048c8 <HAL_RCC_ClockConfig+0x3d0>)
 8004832:	4313      	orrs	r3, r2
 8004834:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	f003 0308 	and.w	r3, r3, #8
 800483e:	2b00      	cmp	r3, #0
 8004840:	d012      	beq.n	8004868 <HAL_RCC_ClockConfig+0x370>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	691a      	ldr	r2, [r3, #16]
 8004846:	4b20      	ldr	r3, [pc, #128]	; (80048c8 <HAL_RCC_ClockConfig+0x3d0>)
 8004848:	6a1b      	ldr	r3, [r3, #32]
 800484a:	091b      	lsrs	r3, r3, #4
 800484c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004850:	429a      	cmp	r2, r3
 8004852:	d209      	bcs.n	8004868 <HAL_RCC_ClockConfig+0x370>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 8004854:	4b1c      	ldr	r3, [pc, #112]	; (80048c8 <HAL_RCC_ClockConfig+0x3d0>)
 8004856:	6a1b      	ldr	r3, [r3, #32]
 8004858:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	691b      	ldr	r3, [r3, #16]
 8004860:	011b      	lsls	r3, r3, #4
 8004862:	4919      	ldr	r1, [pc, #100]	; (80048c8 <HAL_RCC_ClockConfig+0x3d0>)
 8004864:	4313      	orrs	r3, r2
 8004866:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	f003 0310 	and.w	r3, r3, #16
 8004870:	2b00      	cmp	r3, #0
 8004872:	d010      	beq.n	8004896 <HAL_RCC_ClockConfig+0x39e>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) < (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	695a      	ldr	r2, [r3, #20]
 8004878:	4b13      	ldr	r3, [pc, #76]	; (80048c8 <HAL_RCC_ClockConfig+0x3d0>)
 800487a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800487c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004880:	429a      	cmp	r2, r3
 8004882:	d208      	bcs.n	8004896 <HAL_RCC_ClockConfig+0x39e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, (pRCC_ClkInitStruct->APB3CLKDivider));
 8004884:	4b10      	ldr	r3, [pc, #64]	; (80048c8 <HAL_RCC_ClockConfig+0x3d0>)
 8004886:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004888:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	695b      	ldr	r3, [r3, #20]
 8004890:	490d      	ldr	r1, [pc, #52]	; (80048c8 <HAL_RCC_ClockConfig+0x3d0>)
 8004892:	4313      	orrs	r3, r2
 8004894:	624b      	str	r3, [r1, #36]	; 0x24
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8004896:	f000 f821 	bl	80048dc <HAL_RCC_GetSysClockFreq>
 800489a:	4602      	mov	r2, r0
 800489c:	4b0a      	ldr	r3, [pc, #40]	; (80048c8 <HAL_RCC_ClockConfig+0x3d0>)
 800489e:	6a1b      	ldr	r3, [r3, #32]
 80048a0:	f003 030f 	and.w	r3, r3, #15
 80048a4:	490a      	ldr	r1, [pc, #40]	; (80048d0 <HAL_RCC_ClockConfig+0x3d8>)
 80048a6:	5ccb      	ldrb	r3, [r1, r3]
 80048a8:	fa22 f303 	lsr.w	r3, r2, r3
 80048ac:	4a09      	ldr	r2, [pc, #36]	; (80048d4 <HAL_RCC_ClockConfig+0x3dc>)
 80048ae:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80048b0:	4b09      	ldr	r3, [pc, #36]	; (80048d8 <HAL_RCC_ClockConfig+0x3e0>)
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	4618      	mov	r0, r3
 80048b6:	f7fc fd19 	bl	80012ec <HAL_InitTick>
 80048ba:	4603      	mov	r3, r0
 80048bc:	73fb      	strb	r3, [r7, #15]

  return status;
 80048be:	7bfb      	ldrb	r3, [r7, #15]
}
 80048c0:	4618      	mov	r0, r3
 80048c2:	3718      	adds	r7, #24
 80048c4:	46bd      	mov	sp, r7
 80048c6:	bd80      	pop	{r7, pc}
 80048c8:	46020c00 	.word	0x46020c00
 80048cc:	40022000 	.word	0x40022000
 80048d0:	08009f88 	.word	0x08009f88
 80048d4:	20000000 	.word	0x20000000
 80048d8:	20000004 	.word	0x20000004

080048dc <HAL_RCC_GetSysClockFreq>:
  * @note   Each time SYSCLK changes, this function must be called to update the
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80048dc:	b480      	push	{r7}
 80048de:	b08b      	sub	sp, #44	; 0x2c
 80048e0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 80048e2:	2300      	movs	r3, #0
 80048e4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pllsource;
  uint32_t pllr;
  uint32_t pllm;
  uint32_t pllfracen;
  uint32_t sysclockfreq = 0U;
 80048e6:	2300      	movs	r3, #0
 80048e8:	623b      	str	r3, [r7, #32]
  uint32_t sysclk_source;
  uint32_t pll_oscsource;
  float_t fracn1;
  float_t pllvco;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80048ea:	4b78      	ldr	r3, [pc, #480]	; (8004acc <HAL_RCC_GetSysClockFreq+0x1f0>)
 80048ec:	69db      	ldr	r3, [r3, #28]
 80048ee:	f003 030c 	and.w	r3, r3, #12
 80048f2:	61bb      	str	r3, [r7, #24]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80048f4:	4b75      	ldr	r3, [pc, #468]	; (8004acc <HAL_RCC_GetSysClockFreq+0x1f0>)
 80048f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048f8:	f003 0303 	and.w	r3, r3, #3
 80048fc:	617b      	str	r3, [r7, #20]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80048fe:	69bb      	ldr	r3, [r7, #24]
 8004900:	2b00      	cmp	r3, #0
 8004902:	d005      	beq.n	8004910 <HAL_RCC_GetSysClockFreq+0x34>
 8004904:	69bb      	ldr	r3, [r7, #24]
 8004906:	2b0c      	cmp	r3, #12
 8004908:	d121      	bne.n	800494e <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800490a:	697b      	ldr	r3, [r7, #20]
 800490c:	2b01      	cmp	r3, #1
 800490e:	d11e      	bne.n	800494e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->ICSCR1, RCC_ICSCR1_MSIRGSEL) == 0U)
 8004910:	4b6e      	ldr	r3, [pc, #440]	; (8004acc <HAL_RCC_GetSysClockFreq+0x1f0>)
 8004912:	689b      	ldr	r3, [r3, #8]
 8004914:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004918:	2b00      	cmp	r3, #0
 800491a:	d107      	bne.n	800492c <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = (RCC->CSR & RCC_CSR_MSISSRANGE) >> RCC_CSR_MSISSRANGE_Pos;
 800491c:	4b6b      	ldr	r3, [pc, #428]	; (8004acc <HAL_RCC_GetSysClockFreq+0x1f0>)
 800491e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004922:	0b1b      	lsrs	r3, r3, #12
 8004924:	f003 030f 	and.w	r3, r3, #15
 8004928:	627b      	str	r3, [r7, #36]	; 0x24
 800492a:	e005      	b.n	8004938 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = (RCC->ICSCR1 & RCC_ICSCR1_MSISRANGE) >> RCC_ICSCR1_MSISRANGE_Pos;
 800492c:	4b67      	ldr	r3, [pc, #412]	; (8004acc <HAL_RCC_GetSysClockFreq+0x1f0>)
 800492e:	689b      	ldr	r3, [r3, #8]
 8004930:	0f1b      	lsrs	r3, r3, #28
 8004932:	f003 030f 	and.w	r3, r3, #15
 8004936:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004938:	4a65      	ldr	r2, [pc, #404]	; (8004ad0 <HAL_RCC_GetSysClockFreq+0x1f4>)
 800493a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800493c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004940:	627b      	str	r3, [r7, #36]	; 0x24

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8004942:	69bb      	ldr	r3, [r7, #24]
 8004944:	2b00      	cmp	r3, #0
 8004946:	d110      	bne.n	800496a <HAL_RCC_GetSysClockFreq+0x8e>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004948:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800494a:	623b      	str	r3, [r7, #32]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800494c:	e00d      	b.n	800496a <HAL_RCC_GetSysClockFreq+0x8e>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800494e:	4b5f      	ldr	r3, [pc, #380]	; (8004acc <HAL_RCC_GetSysClockFreq+0x1f0>)
 8004950:	69db      	ldr	r3, [r3, #28]
 8004952:	f003 030c 	and.w	r3, r3, #12
 8004956:	2b04      	cmp	r3, #4
 8004958:	d102      	bne.n	8004960 <HAL_RCC_GetSysClockFreq+0x84>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800495a:	4b5e      	ldr	r3, [pc, #376]	; (8004ad4 <HAL_RCC_GetSysClockFreq+0x1f8>)
 800495c:	623b      	str	r3, [r7, #32]
 800495e:	e004      	b.n	800496a <HAL_RCC_GetSysClockFreq+0x8e>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004960:	69bb      	ldr	r3, [r7, #24]
 8004962:	2b08      	cmp	r3, #8
 8004964:	d101      	bne.n	800496a <HAL_RCC_GetSysClockFreq+0x8e>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004966:	4b5b      	ldr	r3, [pc, #364]	; (8004ad4 <HAL_RCC_GetSysClockFreq+0x1f8>)
 8004968:	623b      	str	r3, [r7, #32]
  else
  {
    /* Nothing to do */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800496a:	69bb      	ldr	r3, [r7, #24]
 800496c:	2b0c      	cmp	r3, #12
 800496e:	f040 80a5 	bne.w	8004abc <HAL_RCC_GetSysClockFreq+0x1e0>
  {
    /* PLL used as system clock  source
       PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
       SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8004972:	4b56      	ldr	r3, [pc, #344]	; (8004acc <HAL_RCC_GetSysClockFreq+0x1f0>)
 8004974:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004976:	f003 0303 	and.w	r3, r3, #3
 800497a:	613b      	str	r3, [r7, #16]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 800497c:	4b53      	ldr	r3, [pc, #332]	; (8004acc <HAL_RCC_GetSysClockFreq+0x1f0>)
 800497e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004980:	0a1b      	lsrs	r3, r3, #8
 8004982:	f003 030f 	and.w	r3, r3, #15
 8004986:	3301      	adds	r3, #1
 8004988:	60fb      	str	r3, [r7, #12]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 800498a:	4b50      	ldr	r3, [pc, #320]	; (8004acc <HAL_RCC_GetSysClockFreq+0x1f0>)
 800498c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800498e:	091b      	lsrs	r3, r3, #4
 8004990:	f003 0301 	and.w	r3, r3, #1
 8004994:	60bb      	str	r3, [r7, #8]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 8004996:	4b4d      	ldr	r3, [pc, #308]	; (8004acc <HAL_RCC_GetSysClockFreq+0x1f0>)
 8004998:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800499a:	08db      	lsrs	r3, r3, #3
 800499c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80049a0:	68ba      	ldr	r2, [r7, #8]
 80049a2:	fb02 f303 	mul.w	r3, r2, r3
 80049a6:	ee07 3a90 	vmov	s15, r3
 80049aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80049ae:	edc7 7a01 	vstr	s15, [r7, #4]
                                              RCC_PLL1FRACR_PLL1FRACN_Pos));

    switch (pllsource)
 80049b2:	693b      	ldr	r3, [r7, #16]
 80049b4:	2b02      	cmp	r3, #2
 80049b6:	d003      	beq.n	80049c0 <HAL_RCC_GetSysClockFreq+0xe4>
 80049b8:	693b      	ldr	r3, [r7, #16]
 80049ba:	2b03      	cmp	r3, #3
 80049bc:	d022      	beq.n	8004a04 <HAL_RCC_GetSysClockFreq+0x128>
 80049be:	e043      	b.n	8004a48 <HAL_RCC_GetSysClockFreq+0x16c>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	ee07 3a90 	vmov	s15, r3
 80049c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80049ca:	eddf 6a43 	vldr	s13, [pc, #268]	; 8004ad8 <HAL_RCC_GetSysClockFreq+0x1fc>
 80049ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80049d2:	4b3e      	ldr	r3, [pc, #248]	; (8004acc <HAL_RCC_GetSysClockFreq+0x1f0>)
 80049d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80049d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80049da:	ee07 3a90 	vmov	s15, r3
 80049de:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 80049e2:	ed97 6a01 	vldr	s12, [r7, #4]
 80049e6:	eddf 5a3d 	vldr	s11, [pc, #244]	; 8004adc <HAL_RCC_GetSysClockFreq+0x200>
 80049ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80049ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 80049f2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80049f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80049fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80049fe:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004a02:	e046      	b.n	8004a92 <HAL_RCC_GetSysClockFreq+0x1b6>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	ee07 3a90 	vmov	s15, r3
 8004a0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a0e:	eddf 6a32 	vldr	s13, [pc, #200]	; 8004ad8 <HAL_RCC_GetSysClockFreq+0x1fc>
 8004a12:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004a16:	4b2d      	ldr	r3, [pc, #180]	; (8004acc <HAL_RCC_GetSysClockFreq+0x1f0>)
 8004a18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a1a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a1e:	ee07 3a90 	vmov	s15, r3
 8004a22:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8004a26:	ed97 6a01 	vldr	s12, [r7, #4]
 8004a2a:	eddf 5a2c 	vldr	s11, [pc, #176]	; 8004adc <HAL_RCC_GetSysClockFreq+0x200>
 8004a2e:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004a32:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8004a36:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004a3a:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004a3e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004a42:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004a46:	e024      	b.n	8004a92 <HAL_RCC_GetSysClockFreq+0x1b6>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004a48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a4a:	ee07 3a90 	vmov	s15, r3
 8004a4e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	ee07 3a90 	vmov	s15, r3
 8004a58:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a5c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004a60:	4b1a      	ldr	r3, [pc, #104]	; (8004acc <HAL_RCC_GetSysClockFreq+0x1f0>)
 8004a62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a64:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a68:	ee07 3a90 	vmov	s15, r3
 8004a6c:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8004a70:	ed97 6a01 	vldr	s12, [r7, #4]
 8004a74:	eddf 5a19 	vldr	s11, [pc, #100]	; 8004adc <HAL_RCC_GetSysClockFreq+0x200>
 8004a78:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004a7c:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8004a80:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004a84:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004a88:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004a8c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004a90:	bf00      	nop
    }

    pllr = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + 1U);
 8004a92:	4b0e      	ldr	r3, [pc, #56]	; (8004acc <HAL_RCC_GetSysClockFreq+0x1f0>)
 8004a94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a96:	0e1b      	lsrs	r3, r3, #24
 8004a98:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004a9c:	3301      	adds	r3, #1
 8004a9e:	603b      	str	r3, [r7, #0]
    sysclockfreq = (uint32_t)(float_t)((float_t)pllvco / (float_t)pllr);
 8004aa0:	683b      	ldr	r3, [r7, #0]
 8004aa2:	ee07 3a90 	vmov	s15, r3
 8004aa6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004aaa:	edd7 6a07 	vldr	s13, [r7, #28]
 8004aae:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004ab2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004ab6:	ee17 3a90 	vmov	r3, s15
 8004aba:	623b      	str	r3, [r7, #32]
  }

  return sysclockfreq;
 8004abc:	6a3b      	ldr	r3, [r7, #32]
}
 8004abe:	4618      	mov	r0, r3
 8004ac0:	372c      	adds	r7, #44	; 0x2c
 8004ac2:	46bd      	mov	sp, r7
 8004ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac8:	4770      	bx	lr
 8004aca:	bf00      	nop
 8004acc:	46020c00 	.word	0x46020c00
 8004ad0:	08009fa0 	.word	0x08009fa0
 8004ad4:	00f42400 	.word	0x00f42400
 8004ad8:	4b742400 	.word	0x4b742400
 8004adc:	46000000 	.word	0x46000000

08004ae0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004ae0:	b580      	push	{r7, lr}
 8004ae2:	af00      	add	r7, sp, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8004ae4:	f7ff fefa 	bl	80048dc <HAL_RCC_GetSysClockFreq>
 8004ae8:	4602      	mov	r2, r0
 8004aea:	4b07      	ldr	r3, [pc, #28]	; (8004b08 <HAL_RCC_GetHCLKFreq+0x28>)
 8004aec:	6a1b      	ldr	r3, [r3, #32]
 8004aee:	f003 030f 	and.w	r3, r3, #15
 8004af2:	4906      	ldr	r1, [pc, #24]	; (8004b0c <HAL_RCC_GetHCLKFreq+0x2c>)
 8004af4:	5ccb      	ldrb	r3, [r1, r3]
 8004af6:	fa22 f303 	lsr.w	r3, r2, r3
 8004afa:	4a05      	ldr	r2, [pc, #20]	; (8004b10 <HAL_RCC_GetHCLKFreq+0x30>)
 8004afc:	6013      	str	r3, [r2, #0]
  return SystemCoreClock;
 8004afe:	4b04      	ldr	r3, [pc, #16]	; (8004b10 <HAL_RCC_GetHCLKFreq+0x30>)
 8004b00:	681b      	ldr	r3, [r3, #0]
}
 8004b02:	4618      	mov	r0, r3
 8004b04:	bd80      	pop	{r7, pc}
 8004b06:	bf00      	nop
 8004b08:	46020c00 	.word	0x46020c00
 8004b0c:	08009f88 	.word	0x08009f88
 8004b10:	20000000 	.word	0x20000000

08004b14 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004b14:	b580      	push	{r7, lr}
 8004b16:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]);
 8004b18:	f7ff ffe2 	bl	8004ae0 <HAL_RCC_GetHCLKFreq>
 8004b1c:	4602      	mov	r2, r0
 8004b1e:	4b05      	ldr	r3, [pc, #20]	; (8004b34 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004b20:	6a1b      	ldr	r3, [r3, #32]
 8004b22:	091b      	lsrs	r3, r3, #4
 8004b24:	f003 0307 	and.w	r3, r3, #7
 8004b28:	4903      	ldr	r1, [pc, #12]	; (8004b38 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004b2a:	5ccb      	ldrb	r3, [r1, r3]
 8004b2c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004b30:	4618      	mov	r0, r3
 8004b32:	bd80      	pop	{r7, pc}
 8004b34:	46020c00 	.word	0x46020c00
 8004b38:	08009f98 	.word	0x08009f98

08004b3c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004b3c:	b580      	push	{r7, lr}
 8004b3e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]);
 8004b40:	f7ff ffce 	bl	8004ae0 <HAL_RCC_GetHCLKFreq>
 8004b44:	4602      	mov	r2, r0
 8004b46:	4b05      	ldr	r3, [pc, #20]	; (8004b5c <HAL_RCC_GetPCLK2Freq+0x20>)
 8004b48:	6a1b      	ldr	r3, [r3, #32]
 8004b4a:	0a1b      	lsrs	r3, r3, #8
 8004b4c:	f003 0307 	and.w	r3, r3, #7
 8004b50:	4903      	ldr	r1, [pc, #12]	; (8004b60 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004b52:	5ccb      	ldrb	r3, [r1, r3]
 8004b54:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004b58:	4618      	mov	r0, r3
 8004b5a:	bd80      	pop	{r7, pc}
 8004b5c:	46020c00 	.word	0x46020c00
 8004b60:	08009f98 	.word	0x08009f98

08004b64 <HAL_RCC_GetPCLK3Freq>:
  * @note   Each time PCLK3 changes, this function must be called to update the
  *         right PCLK3 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK3 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK3Freq(void)
{
 8004b64:	b580      	push	{r7, lr}
 8004b66:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR3 & RCC_CFGR3_PPRE3) >> RCC_CFGR3_PPRE3_Pos]);
 8004b68:	f7ff ffba 	bl	8004ae0 <HAL_RCC_GetHCLKFreq>
 8004b6c:	4602      	mov	r2, r0
 8004b6e:	4b05      	ldr	r3, [pc, #20]	; (8004b84 <HAL_RCC_GetPCLK3Freq+0x20>)
 8004b70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b72:	091b      	lsrs	r3, r3, #4
 8004b74:	f003 0307 	and.w	r3, r3, #7
 8004b78:	4903      	ldr	r1, [pc, #12]	; (8004b88 <HAL_RCC_GetPCLK3Freq+0x24>)
 8004b7a:	5ccb      	ldrb	r3, [r1, r3]
 8004b7c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004b80:	4618      	mov	r0, r3
 8004b82:	bd80      	pop	{r7, pc}
 8004b84:	46020c00 	.word	0x46020c00
 8004b88:	08009f98 	.word	0x08009f98

08004b8c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_15
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004b8c:	b580      	push	{r7, lr}
 8004b8e:	b086      	sub	sp, #24
 8004b90:	af00      	add	r7, sp, #0
 8004b92:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency;  /* default value 0WS */

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004b94:	4b3e      	ldr	r3, [pc, #248]	; (8004c90 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8004b96:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004b9a:	f003 0304 	and.w	r3, r3, #4
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d003      	beq.n	8004baa <RCC_SetFlashLatencyFromMSIRange+0x1e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004ba2:	f7fe fd4f 	bl	8003644 <HAL_PWREx_GetVoltageRange>
 8004ba6:	6178      	str	r0, [r7, #20]
 8004ba8:	e019      	b.n	8004bde <RCC_SetFlashLatencyFromMSIRange+0x52>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004baa:	4b39      	ldr	r3, [pc, #228]	; (8004c90 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8004bac:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004bb0:	4a37      	ldr	r2, [pc, #220]	; (8004c90 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8004bb2:	f043 0304 	orr.w	r3, r3, #4
 8004bb6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8004bba:	4b35      	ldr	r3, [pc, #212]	; (8004c90 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8004bbc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004bc0:	f003 0304 	and.w	r3, r3, #4
 8004bc4:	60fb      	str	r3, [r7, #12]
 8004bc6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004bc8:	f7fe fd3c 	bl	8003644 <HAL_PWREx_GetVoltageRange>
 8004bcc:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004bce:	4b30      	ldr	r3, [pc, #192]	; (8004c90 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8004bd0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004bd4:	4a2e      	ldr	r2, [pc, #184]	; (8004c90 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8004bd6:	f023 0304 	bic.w	r3, r3, #4
 8004bda:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE1) || (vos == PWR_REGULATOR_VOLTAGE_SCALE2))
 8004bde:	697b      	ldr	r3, [r7, #20]
 8004be0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004be4:	d003      	beq.n	8004bee <RCC_SetFlashLatencyFromMSIRange+0x62>
 8004be6:	697b      	ldr	r3, [r7, #20]
 8004be8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004bec:	d109      	bne.n	8004c02 <RCC_SetFlashLatencyFromMSIRange+0x76>
  {

    if (msirange < RCC_MSIRANGE_1)
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004bf4:	d202      	bcs.n	8004bfc <RCC_SetFlashLatencyFromMSIRange+0x70>
    {
      /* MSI = 48Mhz */
      latency = FLASH_LATENCY_1; /* 1WS */
 8004bf6:	2301      	movs	r3, #1
 8004bf8:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 8004bfa:	e033      	b.n	8004c64 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
    else
    {
      /*  MSI < 48Mhz */
      latency = FLASH_LATENCY_0; /* 0WS */
 8004bfc:	2300      	movs	r3, #0
 8004bfe:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 8004c00:	e030      	b.n	8004c64 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
  }
  else
  {
    if (msirange < RCC_MSIRANGE_1)
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004c08:	d208      	bcs.n	8004c1c <RCC_SetFlashLatencyFromMSIRange+0x90>
    {
      /* MSI = 48Mhz */
      if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 8004c0a:	697b      	ldr	r3, [r7, #20]
 8004c0c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c10:	d102      	bne.n	8004c18 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        latency = FLASH_LATENCY_3; /* 3WS */
 8004c12:	2303      	movs	r3, #3
 8004c14:	613b      	str	r3, [r7, #16]
 8004c16:	e025      	b.n	8004c64 <RCC_SetFlashLatencyFromMSIRange+0xd8>
      }
      else
      {
        return HAL_ERROR;
 8004c18:	2301      	movs	r3, #1
 8004c1a:	e035      	b.n	8004c88 <RCC_SetFlashLatencyFromMSIRange+0xfc>
      }
    }
    else
    {
      if (msirange > RCC_MSIRANGE_2)
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004c22:	d90f      	bls.n	8004c44 <RCC_SetFlashLatencyFromMSIRange+0xb8>
      {
        if (vos == PWR_REGULATOR_VOLTAGE_SCALE4)
 8004c24:	697b      	ldr	r3, [r7, #20]
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d109      	bne.n	8004c3e <RCC_SetFlashLatencyFromMSIRange+0xb2>
        {
          if (msirange > RCC_MSIRANGE_3)
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004c30:	d902      	bls.n	8004c38 <RCC_SetFlashLatencyFromMSIRange+0xac>
          {
            latency = FLASH_LATENCY_0; /* 1WS */
 8004c32:	2300      	movs	r3, #0
 8004c34:	613b      	str	r3, [r7, #16]
 8004c36:	e015      	b.n	8004c64 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_1; /* 0WS */
 8004c38:	2301      	movs	r3, #1
 8004c3a:	613b      	str	r3, [r7, #16]
 8004c3c:	e012      	b.n	8004c64 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_0; /* 0WS */
 8004c3e:	2300      	movs	r3, #0
 8004c40:	613b      	str	r3, [r7, #16]
 8004c42:	e00f      	b.n	8004c64 <RCC_SetFlashLatencyFromMSIRange+0xd8>
        }
      }
      else
      {
        if (msirange == RCC_MSIRANGE_1)
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004c4a:	d109      	bne.n	8004c60 <RCC_SetFlashLatencyFromMSIRange+0xd4>
        {
          if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 8004c4c:	697b      	ldr	r3, [r7, #20]
 8004c4e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c52:	d102      	bne.n	8004c5a <RCC_SetFlashLatencyFromMSIRange+0xce>
          {
            latency = FLASH_LATENCY_1; /* 1WS */
 8004c54:	2301      	movs	r3, #1
 8004c56:	613b      	str	r3, [r7, #16]
 8004c58:	e004      	b.n	8004c64 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_2; /* 2WS */
 8004c5a:	2302      	movs	r3, #2
 8004c5c:	613b      	str	r3, [r7, #16]
 8004c5e:	e001      	b.n	8004c64 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_1; /* 1WS */
 8004c60:	2301      	movs	r3, #1
 8004c62:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004c64:	4b0b      	ldr	r3, [pc, #44]	; (8004c94 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	f023 020f 	bic.w	r2, r3, #15
 8004c6c:	4909      	ldr	r1, [pc, #36]	; (8004c94 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8004c6e:	693b      	ldr	r3, [r7, #16]
 8004c70:	4313      	orrs	r3, r2
 8004c72:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
  memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 8004c74:	4b07      	ldr	r3, [pc, #28]	; (8004c94 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	f003 030f 	and.w	r3, r3, #15
 8004c7c:	693a      	ldr	r2, [r7, #16]
 8004c7e:	429a      	cmp	r2, r3
 8004c80:	d001      	beq.n	8004c86 <RCC_SetFlashLatencyFromMSIRange+0xfa>
  {
    return HAL_ERROR;
 8004c82:	2301      	movs	r3, #1
 8004c84:	e000      	b.n	8004c88 <RCC_SetFlashLatencyFromMSIRange+0xfc>
  }

  return HAL_OK;
 8004c86:	2300      	movs	r3, #0
}
 8004c88:	4618      	mov	r0, r3
 8004c8a:	3718      	adds	r7, #24
 8004c8c:	46bd      	mov	sp, r7
 8004c8e:	bd80      	pop	{r7, pc}
 8004c90:	46020c00 	.word	0x46020c00
 8004c94:	40022000 	.word	0x40022000

08004c98 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  *
  *         (*) value not defined in all devices.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 8004c98:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004c9c:	b0b6      	sub	sp, #216	; 0xd8
 8004c9e:	af00      	add	r7, sp, #0
 8004ca0:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004ca4:	2300      	movs	r3, #0
 8004ca6:	f887 30d3 	strb.w	r3, [r7, #211]	; 0xd3
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004caa:	2300      	movs	r3, #0
 8004cac:	f887 30d2 	strb.w	r3, [r7, #210]	; 0xd2

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004cb0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004cb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cb8:	f002 0401 	and.w	r4, r2, #1
 8004cbc:	2500      	movs	r5, #0
 8004cbe:	ea54 0305 	orrs.w	r3, r4, r5
 8004cc2:	d00b      	beq.n	8004cdc <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 8004cc4:	4bc5      	ldr	r3, [pc, #788]	; (8004fdc <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8004cc6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004cca:	f023 0103 	bic.w	r1, r3, #3
 8004cce:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004cd2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004cd4:	4ac1      	ldr	r2, [pc, #772]	; (8004fdc <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8004cd6:	430b      	orrs	r3, r1
 8004cd8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
    __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
  }
#endif /* USART2 */

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004cdc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004ce0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ce4:	f002 0804 	and.w	r8, r2, #4
 8004ce8:	f04f 0900 	mov.w	r9, #0
 8004cec:	ea58 0309 	orrs.w	r3, r8, r9
 8004cf0:	d00b      	beq.n	8004d0a <HAL_RCCEx_PeriphCLKConfig+0x72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 8004cf2:	4bba      	ldr	r3, [pc, #744]	; (8004fdc <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8004cf4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004cf8:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8004cfc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004d00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d02:	4ab6      	ldr	r2, [pc, #728]	; (8004fdc <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8004d04:	430b      	orrs	r3, r1
 8004d06:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004d0a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004d0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d12:	f002 0a08 	and.w	sl, r2, #8
 8004d16:	f04f 0b00 	mov.w	fp, #0
 8004d1a:	ea5a 030b 	orrs.w	r3, sl, fp
 8004d1e:	d00b      	beq.n	8004d38 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(pPeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(pPeriphClkInit->Uart4ClockSelection);
 8004d20:	4bae      	ldr	r3, [pc, #696]	; (8004fdc <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8004d22:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004d26:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004d2a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004d2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d30:	4aaa      	ldr	r2, [pc, #680]	; (8004fdc <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8004d32:	430b      	orrs	r3, r1
 8004d34:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004d38:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004d3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d40:	f002 0310 	and.w	r3, r2, #16
 8004d44:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004d48:	2300      	movs	r3, #0
 8004d4a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8004d4e:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 8004d52:	460b      	mov	r3, r1
 8004d54:	4313      	orrs	r3, r2
 8004d56:	d00b      	beq.n	8004d70 <HAL_RCCEx_PeriphCLKConfig+0xd8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(pPeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(pPeriphClkInit->Uart5ClockSelection);
 8004d58:	4ba0      	ldr	r3, [pc, #640]	; (8004fdc <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8004d5a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004d5e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004d62:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004d66:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d68:	4a9c      	ldr	r2, [pc, #624]	; (8004fdc <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8004d6a:	430b      	orrs	r3, r1
 8004d6c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
    __HAL_RCC_USART6_CONFIG(pPeriphClkInit->Usart6ClockSelection);
  }
#endif /* USART6 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004d70:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004d74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d78:	f002 0320 	and.w	r3, r2, #32
 8004d7c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004d80:	2300      	movs	r3, #0
 8004d82:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004d86:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8004d8a:	460b      	mov	r3, r1
 8004d8c:	4313      	orrs	r3, r2
 8004d8e:	d00b      	beq.n	8004da8 <HAL_RCCEx_PeriphCLKConfig+0x110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 8004d90:	4b92      	ldr	r3, [pc, #584]	; (8004fdc <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8004d92:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004d96:	f023 0107 	bic.w	r1, r3, #7
 8004d9a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004d9e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004da0:	4a8e      	ldr	r2, [pc, #568]	; (8004fdc <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8004da2:	430b      	orrs	r3, r1
 8004da4:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004da8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004dac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004db0:	f002 0340 	and.w	r3, r2, #64	; 0x40
 8004db4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004db8:	2300      	movs	r3, #0
 8004dba:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004dbe:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004dc2:	460b      	mov	r3, r1
 8004dc4:	4313      	orrs	r3, r2
 8004dc6:	d00b      	beq.n	8004de0 <HAL_RCCEx_PeriphCLKConfig+0x148>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 8004dc8:	4b84      	ldr	r3, [pc, #528]	; (8004fdc <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8004dca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004dce:	f423 6140 	bic.w	r1, r3, #3072	; 0xc00
 8004dd2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004dd6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004dd8:	4a80      	ldr	r2, [pc, #512]	; (8004fdc <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8004dda:	430b      	orrs	r3, r1
 8004ddc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004de0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004de4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004de8:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8004dec:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004df0:	2300      	movs	r3, #0
 8004df2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8004df6:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8004dfa:	460b      	mov	r3, r1
 8004dfc:	4313      	orrs	r3, r2
 8004dfe:	d00b      	beq.n	8004e18 <HAL_RCCEx_PeriphCLKConfig+0x180>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 8004e00:	4b76      	ldr	r3, [pc, #472]	; (8004fdc <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8004e02:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004e06:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004e0a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004e0e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004e10:	4a72      	ldr	r2, [pc, #456]	; (8004fdc <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8004e12:	430b      	orrs	r3, r1
 8004e14:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004e18:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004e1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e20:	f402 7380 	and.w	r3, r2, #256	; 0x100
 8004e24:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004e28:	2300      	movs	r3, #0
 8004e2a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004e2e:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 8004e32:	460b      	mov	r3, r1
 8004e34:	4313      	orrs	r3, r2
 8004e36:	d00b      	beq.n	8004e50 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(pPeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(pPeriphClkInit->I2c3ClockSelection);
 8004e38:	4b68      	ldr	r3, [pc, #416]	; (8004fdc <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8004e3a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004e3e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004e42:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004e46:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004e48:	4a64      	ldr	r2, [pc, #400]	; (8004fdc <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8004e4a:	430b      	orrs	r3, r1
 8004e4c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004e50:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004e54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e58:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8004e5c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004e60:	2300      	movs	r3, #0
 8004e62:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004e66:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 8004e6a:	460b      	mov	r3, r1
 8004e6c:	4313      	orrs	r3, r2
 8004e6e:	d00b      	beq.n	8004e88 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(pPeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(pPeriphClkInit->I2c4ClockSelection);
 8004e70:	4b5a      	ldr	r3, [pc, #360]	; (8004fdc <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8004e72:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004e76:	f423 4140 	bic.w	r1, r3, #49152	; 0xc000
 8004e7a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004e7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e80:	4a56      	ldr	r2, [pc, #344]	; (8004fdc <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8004e82:	430b      	orrs	r3, r1
 8004e84:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
    __HAL_RCC_I2C6_CONFIG(pPeriphClkInit->I2c6ClockSelection);
  }
#endif /* I2C6 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004e88:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004e8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e90:	f402 7300 	and.w	r3, r2, #512	; 0x200
 8004e94:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004e98:	2300      	movs	r3, #0
 8004e9a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8004e9e:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 8004ea2:	460b      	mov	r3, r1
 8004ea4:	4313      	orrs	r3, r2
 8004ea6:	d00b      	beq.n	8004ec0 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 8004ea8:	4b4c      	ldr	r3, [pc, #304]	; (8004fdc <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8004eaa:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004eae:	f423 6140 	bic.w	r1, r3, #3072	; 0xc00
 8004eb2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004eb6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004eb8:	4a48      	ldr	r2, [pc, #288]	; (8004fdc <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8004eba:	430b      	orrs	r3, r1
 8004ebc:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004ec0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004ec4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ec8:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 8004ecc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004ed0:	2300      	movs	r3, #0
 8004ed2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004ed6:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 8004eda:	460b      	mov	r3, r1
 8004edc:	4313      	orrs	r3, r2
 8004ede:	d00b      	beq.n	8004ef8 <HAL_RCCEx_PeriphCLKConfig+0x260>
  {
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 8004ee0:	4b3e      	ldr	r3, [pc, #248]	; (8004fdc <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8004ee2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004ee6:	f423 2140 	bic.w	r1, r3, #786432	; 0xc0000
 8004eea:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004eee:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004ef0:	4a3a      	ldr	r2, [pc, #232]	; (8004fdc <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8004ef2:	430b      	orrs	r3, r1
 8004ef4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- LPTIM34 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM34) == (RCC_PERIPHCLK_LPTIM34))
 8004ef8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004efc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f00:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8004f04:	67bb      	str	r3, [r7, #120]	; 0x78
 8004f06:	2300      	movs	r3, #0
 8004f08:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004f0a:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8004f0e:	460b      	mov	r3, r1
 8004f10:	4313      	orrs	r3, r2
 8004f12:	d00b      	beq.n	8004f2c <HAL_RCCEx_PeriphCLKConfig+0x294>
  {
    assert_param(IS_RCC_LPTIM34CLK(pPeriphClkInit->Lptim34ClockSelection));
    __HAL_RCC_LPTIM34_CONFIG(pPeriphClkInit->Lptim34ClockSelection);
 8004f14:	4b31      	ldr	r3, [pc, #196]	; (8004fdc <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8004f16:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004f1a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004f1e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004f22:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004f24:	4a2d      	ldr	r2, [pc, #180]	; (8004fdc <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8004f26:	430b      	orrs	r3, r1
 8004f28:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004f2c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004f30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f34:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 8004f38:	673b      	str	r3, [r7, #112]	; 0x70
 8004f3a:	2300      	movs	r3, #0
 8004f3c:	677b      	str	r3, [r7, #116]	; 0x74
 8004f3e:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8004f42:	460b      	mov	r3, r1
 8004f44:	4313      	orrs	r3, r2
 8004f46:	d04f      	beq.n	8004fe8 <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(pPeriphClkInit->Sai1ClockSelection));

    switch (pPeriphClkInit->Sai1ClockSelection)
 8004f48:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004f4c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004f50:	2b80      	cmp	r3, #128	; 0x80
 8004f52:	d02d      	beq.n	8004fb0 <HAL_RCCEx_PeriphCLKConfig+0x318>
 8004f54:	2b80      	cmp	r3, #128	; 0x80
 8004f56:	d827      	bhi.n	8004fa8 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8004f58:	2b60      	cmp	r3, #96	; 0x60
 8004f5a:	d02b      	beq.n	8004fb4 <HAL_RCCEx_PeriphCLKConfig+0x31c>
 8004f5c:	2b60      	cmp	r3, #96	; 0x60
 8004f5e:	d823      	bhi.n	8004fa8 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8004f60:	2b40      	cmp	r3, #64	; 0x40
 8004f62:	d006      	beq.n	8004f72 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8004f64:	2b40      	cmp	r3, #64	; 0x40
 8004f66:	d81f      	bhi.n	8004fa8 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d009      	beq.n	8004f80 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
 8004f6c:	2b20      	cmp	r3, #32
 8004f6e:	d011      	beq.n	8004f94 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 8004f70:	e01a      	b.n	8004fa8 <HAL_RCCEx_PeriphCLKConfig+0x310>
    {
      case RCC_SAI1CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8004f72:	4b1a      	ldr	r3, [pc, #104]	; (8004fdc <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8004f74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f76:	4a19      	ldr	r2, [pc, #100]	; (8004fdc <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8004f78:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004f7c:	6293      	str	r3, [r2, #40]	; 0x28
        /* SAI1 clock source config set later after clock selection check */
        break;
 8004f7e:	e01a      	b.n	8004fb6 <HAL_RCCEx_PeriphCLKConfig+0x31e>

      case RCC_SAI1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for SAI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004f80:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004f84:	3308      	adds	r3, #8
 8004f86:	4618      	mov	r0, r3
 8004f88:	f002 f914 	bl	80071b4 <RCCEx_PLL2_Config>
 8004f8c:	4603      	mov	r3, r0
 8004f8e:	f887 30d3 	strb.w	r3, [r7, #211]	; 0xd3
        /* SAI1 clock source config set later after clock selection check */
        break;
 8004f92:	e010      	b.n	8004fb6 <HAL_RCCEx_PeriphCLKConfig+0x31e>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        /* PLL3 P input clock, parameters M, N & P configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004f94:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004f98:	332c      	adds	r3, #44	; 0x2c
 8004f9a:	4618      	mov	r0, r3
 8004f9c:	f002 f9a2 	bl	80072e4 <RCCEx_PLL3_Config>
 8004fa0:	4603      	mov	r3, r0
 8004fa2:	f887 30d3 	strb.w	r3, [r7, #211]	; 0xd3
        /* SAI1 clock source config set later after clock selection check */
        break;
 8004fa6:	e006      	b.n	8004fb6 <HAL_RCCEx_PeriphCLKConfig+0x31e>
      case RCC_SAI1CLKSOURCE_HSI:      /* HSI is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004fa8:	2301      	movs	r3, #1
 8004faa:	f887 30d3 	strb.w	r3, [r7, #211]	; 0xd3
        break;
 8004fae:	e002      	b.n	8004fb6 <HAL_RCCEx_PeriphCLKConfig+0x31e>
        break;
 8004fb0:	bf00      	nop
 8004fb2:	e000      	b.n	8004fb6 <HAL_RCCEx_PeriphCLKConfig+0x31e>
        break;
 8004fb4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004fb6:	f897 30d3 	ldrb.w	r3, [r7, #211]	; 0xd3
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d110      	bne.n	8004fe0 <HAL_RCCEx_PeriphCLKConfig+0x348>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(pPeriphClkInit->Sai1ClockSelection);
 8004fbe:	4b07      	ldr	r3, [pc, #28]	; (8004fdc <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8004fc0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8004fc4:	f023 01e0 	bic.w	r1, r3, #224	; 0xe0
 8004fc8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004fcc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004fd0:	4a02      	ldr	r2, [pc, #8]	; (8004fdc <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8004fd2:	430b      	orrs	r3, r1
 8004fd4:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8004fd8:	e006      	b.n	8004fe8 <HAL_RCCEx_PeriphCLKConfig+0x350>
 8004fda:	bf00      	nop
 8004fdc:	46020c00 	.word	0x46020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004fe0:	f897 30d3 	ldrb.w	r3, [r7, #211]	; 0xd3
 8004fe4:	f887 30d2 	strb.w	r3, [r7, #210]	; 0xd2
    }
  }
#endif /* SAI2 */

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 8004fe8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004fec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ff0:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8004ff4:	66bb      	str	r3, [r7, #104]	; 0x68
 8004ff6:	2300      	movs	r3, #0
 8004ff8:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004ffa:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 8004ffe:	460b      	mov	r3, r1
 8005000:	4313      	orrs	r3, r2
 8005002:	d046      	beq.n	8005092 <HAL_RCCEx_PeriphCLKConfig+0x3fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 8005004:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005008:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800500c:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8005010:	d028      	beq.n	8005064 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 8005012:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8005016:	d821      	bhi.n	800505c <HAL_RCCEx_PeriphCLKConfig+0x3c4>
 8005018:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800501c:	d022      	beq.n	8005064 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 800501e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005022:	d81b      	bhi.n	800505c <HAL_RCCEx_PeriphCLKConfig+0x3c4>
 8005024:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005028:	d01c      	beq.n	8005064 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 800502a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800502e:	d815      	bhi.n	800505c <HAL_RCCEx_PeriphCLKConfig+0x3c4>
 8005030:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005034:	d008      	beq.n	8005048 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
 8005036:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800503a:	d80f      	bhi.n	800505c <HAL_RCCEx_PeriphCLKConfig+0x3c4>
 800503c:	2b00      	cmp	r3, #0
 800503e:	d011      	beq.n	8005064 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 8005040:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005044:	d00e      	beq.n	8005064 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 8005046:	e009      	b.n	800505c <HAL_RCCEx_PeriphCLKConfig+0x3c4>
    {
      case RCC_ADCDACCLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P, & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005048:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800504c:	3308      	adds	r3, #8
 800504e:	4618      	mov	r0, r3
 8005050:	f002 f8b0 	bl	80071b4 <RCCEx_PLL2_Config>
 8005054:	4603      	mov	r3, r0
 8005056:	f887 30d3 	strb.w	r3, [r7, #211]	; 0xd3
        break;
 800505a:	e004      	b.n	8005066 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
      case RCC_ADCDACCLKSOURCE_HSE:
      case RCC_ADCDACCLKSOURCE_HSI:
      case RCC_ADCDACCLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 800505c:	2301      	movs	r3, #1
 800505e:	f887 30d3 	strb.w	r3, [r7, #211]	; 0xd3
        break;
 8005062:	e000      	b.n	8005066 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
        break;
 8005064:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005066:	f897 30d3 	ldrb.w	r3, [r7, #211]	; 0xd3
 800506a:	2b00      	cmp	r3, #0
 800506c:	d10d      	bne.n	800508a <HAL_RCCEx_PeriphCLKConfig+0x3f2>
    {
      /* Configure the ADC1 interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 800506e:	4bb6      	ldr	r3, [pc, #728]	; (8005348 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 8005070:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005074:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8005078:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800507c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8005080:	4ab1      	ldr	r2, [pc, #708]	; (8005348 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 8005082:	430b      	orrs	r3, r1
 8005084:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8005088:	e003      	b.n	8005092 <HAL_RCCEx_PeriphCLKConfig+0x3fa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800508a:	f897 30d3 	ldrb.w	r3, [r7, #211]	; 0xd3
 800508e:	f887 30d2 	strb.w	r3, [r7, #210]	; 0xd2
    }
  }

  /*-------------------------- MDF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_MDF1) == RCC_PERIPHCLK_MDF1)
 8005092:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005096:	e9d3 2300 	ldrd	r2, r3, [r3]
 800509a:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 800509e:	663b      	str	r3, [r7, #96]	; 0x60
 80050a0:	2300      	movs	r3, #0
 80050a2:	667b      	str	r3, [r7, #100]	; 0x64
 80050a4:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 80050a8:	460b      	mov	r3, r1
 80050aa:	4313      	orrs	r3, r2
 80050ac:	d03e      	beq.n	800512c <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_MDF1CLKSOURCE(pPeriphClkInit->Mdf1ClockSelection));

    switch (pPeriphClkInit->Mdf1ClockSelection)
 80050ae:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80050b2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80050b6:	2b04      	cmp	r3, #4
 80050b8:	d81d      	bhi.n	80050f6 <HAL_RCCEx_PeriphCLKConfig+0x45e>
 80050ba:	a201      	add	r2, pc, #4	; (adr r2, 80050c0 <HAL_RCCEx_PeriphCLKConfig+0x428>)
 80050bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050c0:	080050ff 	.word	0x080050ff
 80050c4:	080050d5 	.word	0x080050d5
 80050c8:	080050e3 	.word	0x080050e3
 80050cc:	080050ff 	.word	0x080050ff
 80050d0:	080050ff 	.word	0x080050ff
    {
      case RCC_MDF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80050d4:	4b9c      	ldr	r3, [pc, #624]	; (8005348 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 80050d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050d8:	4a9b      	ldr	r2, [pc, #620]	; (8005348 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 80050da:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80050de:	6293      	str	r3, [r2, #40]	; 0x28
        break;
 80050e0:	e00e      	b.n	8005100 <HAL_RCCEx_PeriphCLKConfig+0x468>
      case RCC_MDF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80050e2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80050e6:	332c      	adds	r3, #44	; 0x2c
 80050e8:	4618      	mov	r0, r3
 80050ea:	f002 f8fb 	bl	80072e4 <RCCEx_PLL3_Config>
 80050ee:	4603      	mov	r3, r0
 80050f0:	f887 30d3 	strb.w	r3, [r7, #211]	; 0xd3
        break;
 80050f4:	e004      	b.n	8005100 <HAL_RCCEx_PeriphCLKConfig+0x468>
      case RCC_MDF1CLKSOURCE_PIN:
        break;
      case RCC_MDF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 80050f6:	2301      	movs	r3, #1
 80050f8:	f887 30d3 	strb.w	r3, [r7, #211]	; 0xd3
        break;
 80050fc:	e000      	b.n	8005100 <HAL_RCCEx_PeriphCLKConfig+0x468>
        break;
 80050fe:	bf00      	nop
    }
    if (ret == HAL_OK)
 8005100:	f897 30d3 	ldrb.w	r3, [r7, #211]	; 0xd3
 8005104:	2b00      	cmp	r3, #0
 8005106:	d10d      	bne.n	8005124 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Configure the MDF1 interface clock source */
      __HAL_RCC_MDF1_CONFIG(pPeriphClkInit->Mdf1ClockSelection);
 8005108:	4b8f      	ldr	r3, [pc, #572]	; (8005348 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 800510a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800510e:	f023 0107 	bic.w	r1, r3, #7
 8005112:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005116:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800511a:	4a8b      	ldr	r2, [pc, #556]	; (8005348 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 800511c:	430b      	orrs	r3, r1
 800511e:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8005122:	e003      	b.n	800512c <HAL_RCCEx_PeriphCLKConfig+0x494>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005124:	f897 30d3 	ldrb.w	r3, [r7, #211]	; 0xd3
 8005128:	f887 30d2 	strb.w	r3, [r7, #210]	; 0xd2
    }
  }

  /*-------------------------- ADF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADF1) == RCC_PERIPHCLK_ADF1)
 800512c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005130:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005134:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 8005138:	65bb      	str	r3, [r7, #88]	; 0x58
 800513a:	2300      	movs	r3, #0
 800513c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800513e:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 8005142:	460b      	mov	r3, r1
 8005144:	4313      	orrs	r3, r2
 8005146:	d04a      	beq.n	80051de <HAL_RCCEx_PeriphCLKConfig+0x546>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADF1CLKSOURCE(pPeriphClkInit->Adf1ClockSelection));
    switch (pPeriphClkInit->Adf1ClockSelection)
 8005148:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800514c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005150:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005154:	d028      	beq.n	80051a8 <HAL_RCCEx_PeriphCLKConfig+0x510>
 8005156:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800515a:	d821      	bhi.n	80051a0 <HAL_RCCEx_PeriphCLKConfig+0x508>
 800515c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005160:	d024      	beq.n	80051ac <HAL_RCCEx_PeriphCLKConfig+0x514>
 8005162:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005166:	d81b      	bhi.n	80051a0 <HAL_RCCEx_PeriphCLKConfig+0x508>
 8005168:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800516c:	d00e      	beq.n	800518c <HAL_RCCEx_PeriphCLKConfig+0x4f4>
 800516e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005172:	d815      	bhi.n	80051a0 <HAL_RCCEx_PeriphCLKConfig+0x508>
 8005174:	2b00      	cmp	r3, #0
 8005176:	d01b      	beq.n	80051b0 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8005178:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800517c:	d110      	bne.n	80051a0 <HAL_RCCEx_PeriphCLKConfig+0x508>
    {
      case RCC_ADF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800517e:	4b72      	ldr	r3, [pc, #456]	; (8005348 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 8005180:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005182:	4a71      	ldr	r2, [pc, #452]	; (8005348 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 8005184:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005188:	6293      	str	r3, [r2, #40]	; 0x28
        break;
 800518a:	e012      	b.n	80051b2 <HAL_RCCEx_PeriphCLKConfig+0x51a>
      case RCC_ADF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800518c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005190:	332c      	adds	r3, #44	; 0x2c
 8005192:	4618      	mov	r0, r3
 8005194:	f002 f8a6 	bl	80072e4 <RCCEx_PLL3_Config>
 8005198:	4603      	mov	r3, r0
 800519a:	f887 30d3 	strb.w	r3, [r7, #211]	; 0xd3
        break;
 800519e:	e008      	b.n	80051b2 <HAL_RCCEx_PeriphCLKConfig+0x51a>
      case RCC_ADF1CLKSOURCE_PIN:
        break;
      case RCC_ADF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 80051a0:	2301      	movs	r3, #1
 80051a2:	f887 30d3 	strb.w	r3, [r7, #211]	; 0xd3
        break;
 80051a6:	e004      	b.n	80051b2 <HAL_RCCEx_PeriphCLKConfig+0x51a>
        break;
 80051a8:	bf00      	nop
 80051aa:	e002      	b.n	80051b2 <HAL_RCCEx_PeriphCLKConfig+0x51a>
        break;
 80051ac:	bf00      	nop
 80051ae:	e000      	b.n	80051b2 <HAL_RCCEx_PeriphCLKConfig+0x51a>
        break;
 80051b0:	bf00      	nop
    }
    if (ret == HAL_OK)
 80051b2:	f897 30d3 	ldrb.w	r3, [r7, #211]	; 0xd3
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d10d      	bne.n	80051d6 <HAL_RCCEx_PeriphCLKConfig+0x53e>
    {
      /* Configure the ADF1 interface clock source */
      __HAL_RCC_ADF1_CONFIG(pPeriphClkInit->Adf1ClockSelection);
 80051ba:	4b63      	ldr	r3, [pc, #396]	; (8005348 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 80051bc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80051c0:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 80051c4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80051c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051cc:	4a5e      	ldr	r2, [pc, #376]	; (8005348 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 80051ce:	430b      	orrs	r3, r1
 80051d0:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80051d4:	e003      	b.n	80051de <HAL_RCCEx_PeriphCLKConfig+0x546>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80051d6:	f897 30d3 	ldrb.w	r3, [r7, #211]	; 0xd3
 80051da:	f887 30d2 	strb.w	r3, [r7, #210]	; 0xd2
    }
  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((pPeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80051de:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80051e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051e6:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 80051ea:	653b      	str	r3, [r7, #80]	; 0x50
 80051ec:	2300      	movs	r3, #0
 80051ee:	657b      	str	r3, [r7, #84]	; 0x54
 80051f0:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 80051f4:	460b      	mov	r3, r1
 80051f6:	4313      	orrs	r3, r2
 80051f8:	f000 80ba 	beq.w	8005370 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80051fc:	2300      	movs	r3, #0
 80051fe:	f887 30d1 	strb.w	r3, [r7, #209]	; 0xd1
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));
    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005202:	4b51      	ldr	r3, [pc, #324]	; (8005348 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 8005204:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005208:	f003 0304 	and.w	r3, r3, #4
 800520c:	2b00      	cmp	r3, #0
 800520e:	d113      	bne.n	8005238 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005210:	4b4d      	ldr	r3, [pc, #308]	; (8005348 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 8005212:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005216:	4a4c      	ldr	r2, [pc, #304]	; (8005348 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 8005218:	f043 0304 	orr.w	r3, r3, #4
 800521c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8005220:	4b49      	ldr	r3, [pc, #292]	; (8005348 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 8005222:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005226:	f003 0304 	and.w	r3, r3, #4
 800522a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800522e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
      pwrclkchanged = SET;
 8005232:	2301      	movs	r3, #1
 8005234:	f887 30d1 	strb.w	r3, [r7, #209]	; 0xd1
    }
    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8005238:	4b44      	ldr	r3, [pc, #272]	; (800534c <HAL_RCCEx_PeriphCLKConfig+0x6b4>)
 800523a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800523c:	4a43      	ldr	r2, [pc, #268]	; (800534c <HAL_RCCEx_PeriphCLKConfig+0x6b4>)
 800523e:	f043 0301 	orr.w	r3, r3, #1
 8005242:	6293      	str	r3, [r2, #40]	; 0x28

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005244:	f7fc f89c 	bl	8001380 <HAL_GetTick>
 8005248:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc

    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800524c:	e00b      	b.n	8005266 <HAL_RCCEx_PeriphCLKConfig+0x5ce>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800524e:	f7fc f897 	bl	8001380 <HAL_GetTick>
 8005252:	4602      	mov	r2, r0
 8005254:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005258:	1ad3      	subs	r3, r2, r3
 800525a:	2b02      	cmp	r3, #2
 800525c:	d903      	bls.n	8005266 <HAL_RCCEx_PeriphCLKConfig+0x5ce>
      {
        ret = HAL_TIMEOUT;
 800525e:	2303      	movs	r3, #3
 8005260:	f887 30d3 	strb.w	r3, [r7, #211]	; 0xd3
        break;
 8005264:	e005      	b.n	8005272 <HAL_RCCEx_PeriphCLKConfig+0x5da>
    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8005266:	4b39      	ldr	r3, [pc, #228]	; (800534c <HAL_RCCEx_PeriphCLKConfig+0x6b4>)
 8005268:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800526a:	f003 0301 	and.w	r3, r3, #1
 800526e:	2b00      	cmp	r3, #0
 8005270:	d0ed      	beq.n	800524e <HAL_RCCEx_PeriphCLKConfig+0x5b6>
      }
    }

    if (ret == HAL_OK)
 8005272:	f897 30d3 	ldrb.w	r3, [r7, #211]	; 0xd3
 8005276:	2b00      	cmp	r3, #0
 8005278:	d16a      	bne.n	8005350 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800527a:	4b33      	ldr	r3, [pc, #204]	; (8005348 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 800527c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005280:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005284:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 8005288:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800528c:	2b00      	cmp	r3, #0
 800528e:	d023      	beq.n	80052d8 <HAL_RCCEx_PeriphCLKConfig+0x640>
 8005290:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005294:	f8d3 20b8 	ldr.w	r2, [r3, #184]	; 0xb8
 8005298:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800529c:	4293      	cmp	r3, r2
 800529e:	d01b      	beq.n	80052d8 <HAL_RCCEx_PeriphCLKConfig+0x640>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80052a0:	4b29      	ldr	r3, [pc, #164]	; (8005348 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 80052a2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80052a6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80052aa:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80052ae:	4b26      	ldr	r3, [pc, #152]	; (8005348 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 80052b0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80052b4:	4a24      	ldr	r2, [pc, #144]	; (8005348 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 80052b6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80052ba:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 80052be:	4b22      	ldr	r3, [pc, #136]	; (8005348 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 80052c0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80052c4:	4a20      	ldr	r2, [pc, #128]	; (8005348 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 80052c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80052ca:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80052ce:	4a1e      	ldr	r2, [pc, #120]	; (8005348 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 80052d0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80052d4:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80052d8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80052dc:	f003 0301 	and.w	r3, r3, #1
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d019      	beq.n	8005318 <HAL_RCCEx_PeriphCLKConfig+0x680>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80052e4:	f7fc f84c 	bl	8001380 <HAL_GetTick>
 80052e8:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80052ec:	e00d      	b.n	800530a <HAL_RCCEx_PeriphCLKConfig+0x672>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80052ee:	f7fc f847 	bl	8001380 <HAL_GetTick>
 80052f2:	4602      	mov	r2, r0
 80052f4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80052f8:	1ad2      	subs	r2, r2, r3
 80052fa:	f241 3388 	movw	r3, #5000	; 0x1388
 80052fe:	429a      	cmp	r2, r3
 8005300:	d903      	bls.n	800530a <HAL_RCCEx_PeriphCLKConfig+0x672>
          {
            ret = HAL_TIMEOUT;
 8005302:	2303      	movs	r3, #3
 8005304:	f887 30d3 	strb.w	r3, [r7, #211]	; 0xd3
            break;
 8005308:	e006      	b.n	8005318 <HAL_RCCEx_PeriphCLKConfig+0x680>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800530a:	4b0f      	ldr	r3, [pc, #60]	; (8005348 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 800530c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005310:	f003 0302 	and.w	r3, r3, #2
 8005314:	2b00      	cmp	r3, #0
 8005316:	d0ea      	beq.n	80052ee <HAL_RCCEx_PeriphCLKConfig+0x656>
          }
        }
      }

      if (ret == HAL_OK)
 8005318:	f897 30d3 	ldrb.w	r3, [r7, #211]	; 0xd3
 800531c:	2b00      	cmp	r3, #0
 800531e:	d10d      	bne.n	800533c <HAL_RCCEx_PeriphCLKConfig+0x6a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 8005320:	4b09      	ldr	r3, [pc, #36]	; (8005348 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 8005322:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005326:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800532a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800532e:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8005332:	4a05      	ldr	r2, [pc, #20]	; (8005348 <HAL_RCCEx_PeriphCLKConfig+0x6b0>)
 8005334:	430b      	orrs	r3, r1
 8005336:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800533a:	e00d      	b.n	8005358 <HAL_RCCEx_PeriphCLKConfig+0x6c0>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800533c:	f897 30d3 	ldrb.w	r3, [r7, #211]	; 0xd3
 8005340:	f887 30d2 	strb.w	r3, [r7, #210]	; 0xd2
 8005344:	e008      	b.n	8005358 <HAL_RCCEx_PeriphCLKConfig+0x6c0>
 8005346:	bf00      	nop
 8005348:	46020c00 	.word	0x46020c00
 800534c:	46020800 	.word	0x46020800
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005350:	f897 30d3 	ldrb.w	r3, [r7, #211]	; 0xd3
 8005354:	f887 30d2 	strb.w	r3, [r7, #210]	; 0xd2
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005358:	f897 30d1 	ldrb.w	r3, [r7, #209]	; 0xd1
 800535c:	2b01      	cmp	r3, #1
 800535e:	d107      	bne.n	8005370 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005360:	4bb2      	ldr	r3, [pc, #712]	; (800562c <HAL_RCCEx_PeriphCLKConfig+0x994>)
 8005362:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005366:	4ab1      	ldr	r2, [pc, #708]	; (800562c <HAL_RCCEx_PeriphCLKConfig+0x994>)
 8005368:	f023 0304 	bic.w	r3, r3, #4
 800536c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
    }
  }

  /*-------------------------------------- ICLK Configuration -----------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ICLK) == RCC_PERIPHCLK_ICLK)
 8005370:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005374:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005378:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 800537c:	64bb      	str	r3, [r7, #72]	; 0x48
 800537e:	2300      	movs	r3, #0
 8005380:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005382:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8005386:	460b      	mov	r3, r1
 8005388:	4313      	orrs	r3, r2
 800538a:	d042      	beq.n	8005412 <HAL_RCCEx_PeriphCLKConfig+0x77a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ICLKCLKSOURCE(pPeriphClkInit->IclkClockSelection));

    switch (pPeriphClkInit->IclkClockSelection)
 800538c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005390:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005394:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8005398:	d022      	beq.n	80053e0 <HAL_RCCEx_PeriphCLKConfig+0x748>
 800539a:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800539e:	d81b      	bhi.n	80053d8 <HAL_RCCEx_PeriphCLKConfig+0x740>
 80053a0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80053a4:	d011      	beq.n	80053ca <HAL_RCCEx_PeriphCLKConfig+0x732>
 80053a6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80053aa:	d815      	bhi.n	80053d8 <HAL_RCCEx_PeriphCLKConfig+0x740>
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d019      	beq.n	80053e4 <HAL_RCCEx_PeriphCLKConfig+0x74c>
 80053b0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80053b4:	d110      	bne.n	80053d8 <HAL_RCCEx_PeriphCLKConfig+0x740>
    {
      case RCC_ICLK_CLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P,Q & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80053b6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80053ba:	3308      	adds	r3, #8
 80053bc:	4618      	mov	r0, r3
 80053be:	f001 fef9 	bl	80071b4 <RCCEx_PLL2_Config>
 80053c2:	4603      	mov	r3, r0
 80053c4:	f887 30d3 	strb.w	r3, [r7, #211]	; 0xd3
        break;
 80053c8:	e00d      	b.n	80053e6 <HAL_RCCEx_PeriphCLKConfig+0x74e>
      case RCC_ICLK_CLKSOURCE_PLL1:
        /* Enable ICLK Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80053ca:	4b98      	ldr	r3, [pc, #608]	; (800562c <HAL_RCCEx_PeriphCLKConfig+0x994>)
 80053cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053ce:	4a97      	ldr	r2, [pc, #604]	; (800562c <HAL_RCCEx_PeriphCLKConfig+0x994>)
 80053d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80053d4:	6293      	str	r3, [r2, #40]	; 0x28
        break;
 80053d6:	e006      	b.n	80053e6 <HAL_RCCEx_PeriphCLKConfig+0x74e>
      case RCC_ICLK_CLKSOURCE_HSI48:
        break;
      case RCC_ICLK_CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 80053d8:	2301      	movs	r3, #1
 80053da:	f887 30d3 	strb.w	r3, [r7, #211]	; 0xd3
        break;
 80053de:	e002      	b.n	80053e6 <HAL_RCCEx_PeriphCLKConfig+0x74e>
        break;
 80053e0:	bf00      	nop
 80053e2:	e000      	b.n	80053e6 <HAL_RCCEx_PeriphCLKConfig+0x74e>
        break;
 80053e4:	bf00      	nop
    }
    if (ret == HAL_OK)
 80053e6:	f897 30d3 	ldrb.w	r3, [r7, #211]	; 0xd3
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d10d      	bne.n	800540a <HAL_RCCEx_PeriphCLKConfig+0x772>
    {
      /* Configure the CLK48 source */
      __HAL_RCC_CLK48_CONFIG(pPeriphClkInit->IclkClockSelection);
 80053ee:	4b8f      	ldr	r3, [pc, #572]	; (800562c <HAL_RCCEx_PeriphCLKConfig+0x994>)
 80053f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80053f4:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 80053f8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80053fc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005400:	4a8a      	ldr	r2, [pc, #552]	; (800562c <HAL_RCCEx_PeriphCLKConfig+0x994>)
 8005402:	430b      	orrs	r3, r1
 8005404:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8005408:	e003      	b.n	8005412 <HAL_RCCEx_PeriphCLKConfig+0x77a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800540a:	f897 30d3 	ldrb.w	r3, [r7, #211]	; 0xd3
 800540e:	f887 30d2 	strb.w	r3, [r7, #210]	; 0xd2
    }
  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8005412:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005416:	e9d3 2300 	ldrd	r2, r3, [r3]
 800541a:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 800541e:	643b      	str	r3, [r7, #64]	; 0x40
 8005420:	2300      	movs	r3, #0
 8005422:	647b      	str	r3, [r7, #68]	; 0x44
 8005424:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8005428:	460b      	mov	r3, r1
 800542a:	4313      	orrs	r3, r2
 800542c:	d02d      	beq.n	800548a <HAL_RCCEx_PeriphCLKConfig+0x7f2>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 800542e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005432:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005436:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800543a:	d00b      	beq.n	8005454 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
 800543c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005440:	d804      	bhi.n	800544c <HAL_RCCEx_PeriphCLKConfig+0x7b4>
 8005442:	2b00      	cmp	r3, #0
 8005444:	d008      	beq.n	8005458 <HAL_RCCEx_PeriphCLKConfig+0x7c0>
 8005446:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800544a:	d007      	beq.n	800545c <HAL_RCCEx_PeriphCLKConfig+0x7c4>
      case RCC_RNGCLKSOURCE_HSI48:
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;
      default:
        ret = HAL_ERROR;
 800544c:	2301      	movs	r3, #1
 800544e:	f887 30d3 	strb.w	r3, [r7, #211]	; 0xd3
        break;
 8005452:	e004      	b.n	800545e <HAL_RCCEx_PeriphCLKConfig+0x7c6>
        break;
 8005454:	bf00      	nop
 8005456:	e002      	b.n	800545e <HAL_RCCEx_PeriphCLKConfig+0x7c6>
        break;
 8005458:	bf00      	nop
 800545a:	e000      	b.n	800545e <HAL_RCCEx_PeriphCLKConfig+0x7c6>
        break;
 800545c:	bf00      	nop
    }
    if (ret == HAL_OK)
 800545e:	f897 30d3 	ldrb.w	r3, [r7, #211]	; 0xd3
 8005462:	2b00      	cmp	r3, #0
 8005464:	d10d      	bne.n	8005482 <HAL_RCCEx_PeriphCLKConfig+0x7ea>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 8005466:	4b71      	ldr	r3, [pc, #452]	; (800562c <HAL_RCCEx_PeriphCLKConfig+0x994>)
 8005468:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800546c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005470:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005474:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005478:	4a6c      	ldr	r2, [pc, #432]	; (800562c <HAL_RCCEx_PeriphCLKConfig+0x994>)
 800547a:	430b      	orrs	r3, r1
 800547c:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8005480:	e003      	b.n	800548a <HAL_RCCEx_PeriphCLKConfig+0x7f2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005482:	f897 30d3 	ldrb.w	r3, [r7, #211]	; 0xd3
 8005486:	f887 30d2 	strb.w	r3, [r7, #210]	; 0xd2
    }
  }

#if defined(SAES)
  /*-------------------------- SAES clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAES) == RCC_PERIPHCLK_SAES)
 800548a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800548e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005492:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8005496:	63bb      	str	r3, [r7, #56]	; 0x38
 8005498:	2300      	movs	r3, #0
 800549a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800549c:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 80054a0:	460b      	mov	r3, r1
 80054a2:	4313      	orrs	r3, r2
 80054a4:	d00c      	beq.n	80054c0 <HAL_RCCEx_PeriphCLKConfig+0x828>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAESCLKSOURCE(pPeriphClkInit->SaesClockSelection));

    /* Configure the SAES clock source */
    __HAL_RCC_SAES_CONFIG(pPeriphClkInit->SaesClockSelection);
 80054a6:	4b61      	ldr	r3, [pc, #388]	; (800562c <HAL_RCCEx_PeriphCLKConfig+0x994>)
 80054a8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80054ac:	f423 6100 	bic.w	r1, r3, #2048	; 0x800
 80054b0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80054b4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80054b8:	4a5c      	ldr	r2, [pc, #368]	; (800562c <HAL_RCCEx_PeriphCLKConfig+0x994>)
 80054ba:	430b      	orrs	r3, r1
 80054bc:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
  }
#endif /* SAES */

  /*-------------------------- SDMMC1/2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == (RCC_PERIPHCLK_SDMMC))
 80054c0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80054c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054c8:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 80054cc:	633b      	str	r3, [r7, #48]	; 0x30
 80054ce:	2300      	movs	r3, #0
 80054d0:	637b      	str	r3, [r7, #52]	; 0x34
 80054d2:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 80054d6:	460b      	mov	r3, r1
 80054d8:	4313      	orrs	r3, r2
 80054da:	d019      	beq.n	8005510 <HAL_RCCEx_PeriphCLKConfig+0x878>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMCCLKSOURCE(pPeriphClkInit->SdmmcClockSelection));

    if (pPeriphClkInit->SdmmcClockSelection == RCC_SDMMCCLKSOURCE_PLL1)
 80054dc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80054e0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80054e4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80054e8:	d105      	bne.n	80054f6 <HAL_RCCEx_PeriphCLKConfig+0x85e>
    {
      /* Enable PLL1 P CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80054ea:	4b50      	ldr	r3, [pc, #320]	; (800562c <HAL_RCCEx_PeriphCLKConfig+0x994>)
 80054ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054ee:	4a4f      	ldr	r2, [pc, #316]	; (800562c <HAL_RCCEx_PeriphCLKConfig+0x994>)
 80054f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80054f4:	6293      	str	r3, [r2, #40]	; 0x28
    }

    /* Configure the SDMMC1/2 clock source */
    __HAL_RCC_SDMMC_CONFIG(pPeriphClkInit->SdmmcClockSelection);
 80054f6:	4b4d      	ldr	r3, [pc, #308]	; (800562c <HAL_RCCEx_PeriphCLKConfig+0x994>)
 80054f8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80054fc:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 8005500:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005504:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005508:	4a48      	ldr	r2, [pc, #288]	; (800562c <HAL_RCCEx_PeriphCLKConfig+0x994>)
 800550a:	430b      	orrs	r3, r1
 800550c:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
  }

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 8005510:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005514:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005518:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 800551c:	62bb      	str	r3, [r7, #40]	; 0x28
 800551e:	2300      	movs	r3, #0
 8005520:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005522:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8005526:	460b      	mov	r3, r1
 8005528:	4313      	orrs	r3, r2
 800552a:	d00c      	beq.n	8005546 <HAL_RCCEx_PeriphCLKConfig+0x8ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    /* Configure the SPI1 clock source */
    __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 800552c:	4b3f      	ldr	r3, [pc, #252]	; (800562c <HAL_RCCEx_PeriphCLKConfig+0x994>)
 800552e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005532:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005536:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800553a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800553e:	493b      	ldr	r1, [pc, #236]	; (800562c <HAL_RCCEx_PeriphCLKConfig+0x994>)
 8005540:	4313      	orrs	r3, r2
 8005542:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 8005546:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800554a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800554e:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8005552:	623b      	str	r3, [r7, #32]
 8005554:	2300      	movs	r3, #0
 8005556:	627b      	str	r3, [r7, #36]	; 0x24
 8005558:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800555c:	460b      	mov	r3, r1
 800555e:	4313      	orrs	r3, r2
 8005560:	d00c      	beq.n	800557c <HAL_RCCEx_PeriphCLKConfig+0x8e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    /* Configure the SPI2 clock source */
    __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 8005562:	4b32      	ldr	r3, [pc, #200]	; (800562c <HAL_RCCEx_PeriphCLKConfig+0x994>)
 8005564:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005568:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800556c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005570:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005574:	492d      	ldr	r1, [pc, #180]	; (800562c <HAL_RCCEx_PeriphCLKConfig+0x994>)
 8005576:	4313      	orrs	r3, r2
 8005578:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 800557c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005580:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005584:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8005588:	61bb      	str	r3, [r7, #24]
 800558a:	2300      	movs	r3, #0
 800558c:	61fb      	str	r3, [r7, #28]
 800558e:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8005592:	460b      	mov	r3, r1
 8005594:	4313      	orrs	r3, r2
 8005596:	d00c      	beq.n	80055b2 <HAL_RCCEx_PeriphCLKConfig+0x91a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    /* Configure the SPI3 clock source */
    __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 8005598:	4b24      	ldr	r3, [pc, #144]	; (800562c <HAL_RCCEx_PeriphCLKConfig+0x994>)
 800559a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800559e:	f023 0218 	bic.w	r2, r3, #24
 80055a2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80055a6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80055aa:	4920      	ldr	r1, [pc, #128]	; (800562c <HAL_RCCEx_PeriphCLKConfig+0x994>)
 80055ac:	4313      	orrs	r3, r2
 80055ae:	f8c1 30e8 	str.w	r3, [r1, #232]	; 0xe8
  }

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80055b2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80055b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055ba:	f002 6380 	and.w	r3, r2, #67108864	; 0x4000000
 80055be:	613b      	str	r3, [r7, #16]
 80055c0:	2300      	movs	r3, #0
 80055c2:	617b      	str	r3, [r7, #20]
 80055c4:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80055c8:	460b      	mov	r3, r1
 80055ca:	4313      	orrs	r3, r2
 80055cc:	d034      	beq.n	8005638 <HAL_RCCEx_PeriphCLKConfig+0x9a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(pPeriphClkInit->OspiClockSelection));

    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL1)
 80055ce:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80055d2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80055d6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80055da:	d105      	bne.n	80055e8 <HAL_RCCEx_PeriphCLKConfig+0x950>
    {
      /* Enable PLL1 Q CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80055dc:	4b13      	ldr	r3, [pc, #76]	; (800562c <HAL_RCCEx_PeriphCLKConfig+0x994>)
 80055de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055e0:	4a12      	ldr	r2, [pc, #72]	; (800562c <HAL_RCCEx_PeriphCLKConfig+0x994>)
 80055e2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80055e6:	6293      	str	r3, [r2, #40]	; 0x28
    }
    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL2)
 80055e8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80055ec:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80055f0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80055f4:	d108      	bne.n	8005608 <HAL_RCCEx_PeriphCLKConfig+0x970>
    {
      /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
      ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80055f6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80055fa:	3308      	adds	r3, #8
 80055fc:	4618      	mov	r0, r3
 80055fe:	f001 fdd9 	bl	80071b4 <RCCEx_PLL2_Config>
 8005602:	4603      	mov	r3, r0
 8005604:	f887 30d3 	strb.w	r3, [r7, #211]	; 0xd3
    }
    if (ret == HAL_OK)
 8005608:	f897 30d3 	ldrb.w	r3, [r7, #211]	; 0xd3
 800560c:	2b00      	cmp	r3, #0
 800560e:	d10f      	bne.n	8005630 <HAL_RCCEx_PeriphCLKConfig+0x998>
    {
      /* Configure the OctoSPI clock source */
      __HAL_RCC_OSPI_CONFIG(pPeriphClkInit->OspiClockSelection);
 8005610:	4b06      	ldr	r3, [pc, #24]	; (800562c <HAL_RCCEx_PeriphCLKConfig+0x994>)
 8005612:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8005616:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800561a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800561e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8005622:	4902      	ldr	r1, [pc, #8]	; (800562c <HAL_RCCEx_PeriphCLKConfig+0x994>)
 8005624:	4313      	orrs	r3, r2
 8005626:	f8c1 30e4 	str.w	r3, [r1, #228]	; 0xe4
 800562a:	e005      	b.n	8005638 <HAL_RCCEx_PeriphCLKConfig+0x9a0>
 800562c:	46020c00 	.word	0x46020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005630:	f897 30d3 	ldrb.w	r3, [r7, #211]	; 0xd3
 8005634:	f887 30d2 	strb.w	r3, [r7, #210]	; 0xd2
    }
  }
#endif /* defined(HSPI1) */

  /*-------------------------- FDCAN1 kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN1) == (RCC_PERIPHCLK_FDCAN1))
 8005638:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800563c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005640:	f002 6300 	and.w	r3, r2, #134217728	; 0x8000000
 8005644:	60bb      	str	r3, [r7, #8]
 8005646:	2300      	movs	r3, #0
 8005648:	60fb      	str	r3, [r7, #12]
 800564a:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800564e:	460b      	mov	r3, r1
 8005650:	4313      	orrs	r3, r2
 8005652:	d03a      	beq.n	80056ca <HAL_RCCEx_PeriphCLKConfig+0xa32>
  {
    assert_param(IS_RCC_FDCAN1CLK(pPeriphClkInit->Fdcan1ClockSelection));

    switch (pPeriphClkInit->Fdcan1ClockSelection)
 8005654:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005658:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800565c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005660:	d00e      	beq.n	8005680 <HAL_RCCEx_PeriphCLKConfig+0x9e8>
 8005662:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005666:	d815      	bhi.n	8005694 <HAL_RCCEx_PeriphCLKConfig+0x9fc>
 8005668:	2b00      	cmp	r3, #0
 800566a:	d017      	beq.n	800569c <HAL_RCCEx_PeriphCLKConfig+0xa04>
 800566c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005670:	d110      	bne.n	8005694 <HAL_RCCEx_PeriphCLKConfig+0x9fc>
      case RCC_FDCAN1CLKSOURCE_HSE:      /* HSE is used as source of FDCAN1 kernel clock*/
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
      case RCC_FDCAN1CLKSOURCE_PLL1:      /* PLL1 is used as clock source for FDCAN1 kernel clock*/
        /* Enable 48M2 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005672:	4b27      	ldr	r3, [pc, #156]	; (8005710 <HAL_RCCEx_PeriphCLKConfig+0xa78>)
 8005674:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005676:	4a26      	ldr	r2, [pc, #152]	; (8005710 <HAL_RCCEx_PeriphCLKConfig+0xa78>)
 8005678:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800567c:	6293      	str	r3, [r2, #40]	; 0x28
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 800567e:	e00e      	b.n	800569e <HAL_RCCEx_PeriphCLKConfig+0xa06>
      case RCC_FDCAN1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for FDCAN1 kernel clock*/
        /* PLL2 input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005680:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005684:	3308      	adds	r3, #8
 8005686:	4618      	mov	r0, r3
 8005688:	f001 fd94 	bl	80071b4 <RCCEx_PLL2_Config>
 800568c:	4603      	mov	r3, r0
 800568e:	f887 30d3 	strb.w	r3, [r7, #211]	; 0xd3
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 8005692:	e004      	b.n	800569e <HAL_RCCEx_PeriphCLKConfig+0xa06>
      default:
        ret = HAL_ERROR;
 8005694:	2301      	movs	r3, #1
 8005696:	f887 30d3 	strb.w	r3, [r7, #211]	; 0xd3
        break;
 800569a:	e000      	b.n	800569e <HAL_RCCEx_PeriphCLKConfig+0xa06>
        break;
 800569c:	bf00      	nop
    }
    if (ret == HAL_OK)
 800569e:	f897 30d3 	ldrb.w	r3, [r7, #211]	; 0xd3
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d10d      	bne.n	80056c2 <HAL_RCCEx_PeriphCLKConfig+0xa2a>
    {
      /* Set the source of FDCAN1 kernel clock*/
      __HAL_RCC_FDCAN1_CONFIG(pPeriphClkInit->Fdcan1ClockSelection);
 80056a6:	4b1a      	ldr	r3, [pc, #104]	; (8005710 <HAL_RCCEx_PeriphCLKConfig+0xa78>)
 80056a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80056ac:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80056b0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80056b4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80056b8:	4915      	ldr	r1, [pc, #84]	; (8005710 <HAL_RCCEx_PeriphCLKConfig+0xa78>)
 80056ba:	4313      	orrs	r3, r2
 80056bc:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
 80056c0:	e003      	b.n	80056ca <HAL_RCCEx_PeriphCLKConfig+0xa32>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80056c2:	f897 30d3 	ldrb.w	r3, [r7, #211]	; 0xd3
 80056c6:	f887 30d2 	strb.w	r3, [r7, #210]	; 0xd2
    }
  }

  /*-------------------------- DAC1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC1) == RCC_PERIPHCLK_DAC1)
 80056ca:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80056ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056d2:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 80056d6:	603b      	str	r3, [r7, #0]
 80056d8:	2300      	movs	r3, #0
 80056da:	607b      	str	r3, [r7, #4]
 80056dc:	e9d7 1200 	ldrd	r1, r2, [r7]
 80056e0:	460b      	mov	r3, r1
 80056e2:	4313      	orrs	r3, r2
 80056e4:	d00c      	beq.n	8005700 <HAL_RCCEx_PeriphCLKConfig+0xa68>

    /* Check the parameters */
    assert_param(IS_RCC_DAC1CLKSOURCE(pPeriphClkInit->Dac1ClockSelection));

    /* Configure the DAC1 clock source */
    __HAL_RCC_DAC1_CONFIG(pPeriphClkInit->Dac1ClockSelection);
 80056e6:	4b0a      	ldr	r3, [pc, #40]	; (8005710 <HAL_RCCEx_PeriphCLKConfig+0xa78>)
 80056e8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80056ec:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 80056f0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80056f4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80056f8:	4905      	ldr	r1, [pc, #20]	; (8005710 <HAL_RCCEx_PeriphCLKConfig+0xa78>)
 80056fa:	4313      	orrs	r3, r2
 80056fc:	f8c1 30e8 	str.w	r3, [r1, #232]	; 0xe8
    }
  }

#endif /* defined(USB_OTG_HS) */

  return status;
 8005700:	f897 30d2 	ldrb.w	r3, [r7, #210]	; 0xd2
}
 8005704:	4618      	mov	r0, r3
 8005706:	37d8      	adds	r7, #216	; 0xd8
 8005708:	46bd      	mov	sp, r7
 800570a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800570e:	bf00      	nop
 8005710:	46020c00 	.word	0x46020c00

08005714 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8005714:	b480      	push	{r7}
 8005716:	b089      	sub	sp, #36	; 0x24
 8005718:	af00      	add	r7, sp, #0
 800571a:	6078      	str	r0, [r7, #4]
  uint32_t pll1n;
  uint32_t pll1fracen;
  float_t fracn1;
  float_t pll1vco;

  pll1n = (RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N);
 800571c:	4ba6      	ldr	r3, [pc, #664]	; (80059b8 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800571e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005720:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005724:	61bb      	str	r3, [r7, #24]
  pll1source = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8005726:	4ba4      	ldr	r3, [pc, #656]	; (80059b8 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8005728:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800572a:	f003 0303 	and.w	r3, r3, #3
 800572e:	617b      	str	r3, [r7, #20]
  pll1m = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 8005730:	4ba1      	ldr	r3, [pc, #644]	; (80059b8 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8005732:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005734:	0a1b      	lsrs	r3, r3, #8
 8005736:	f003 030f 	and.w	r3, r3, #15
 800573a:	3301      	adds	r3, #1
 800573c:	613b      	str	r3, [r7, #16]
  pll1fracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 800573e:	4b9e      	ldr	r3, [pc, #632]	; (80059b8 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8005740:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005742:	091b      	lsrs	r3, r3, #4
 8005744:	f003 0301 	and.w	r3, r3, #1
 8005748:	60fb      	str	r3, [r7, #12]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 800574a:	4b9b      	ldr	r3, [pc, #620]	; (80059b8 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800574c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800574e:	08db      	lsrs	r3, r3, #3
 8005750:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005754:	68fa      	ldr	r2, [r7, #12]
 8005756:	fb02 f303 	mul.w	r3, r2, r3
 800575a:	ee07 3a90 	vmov	s15, r3
 800575e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005762:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL1FRACR_PLL1FRACN_Pos));

  switch (pll1source)
 8005766:	697b      	ldr	r3, [r7, #20]
 8005768:	2b03      	cmp	r3, #3
 800576a:	d062      	beq.n	8005832 <HAL_RCCEx_GetPLL1ClockFreq+0x11e>
 800576c:	697b      	ldr	r3, [r7, #20]
 800576e:	2b03      	cmp	r3, #3
 8005770:	f200 8081 	bhi.w	8005876 <HAL_RCCEx_GetPLL1ClockFreq+0x162>
 8005774:	697b      	ldr	r3, [r7, #20]
 8005776:	2b01      	cmp	r3, #1
 8005778:	d024      	beq.n	80057c4 <HAL_RCCEx_GetPLL1ClockFreq+0xb0>
 800577a:	697b      	ldr	r3, [r7, #20]
 800577c:	2b02      	cmp	r3, #2
 800577e:	d17a      	bne.n	8005876 <HAL_RCCEx_GetPLL1ClockFreq+0x162>
  {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005780:	693b      	ldr	r3, [r7, #16]
 8005782:	ee07 3a90 	vmov	s15, r3
 8005786:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800578a:	eddf 6a8c 	vldr	s13, [pc, #560]	; 80059bc <HAL_RCCEx_GetPLL1ClockFreq+0x2a8>
 800578e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005792:	4b89      	ldr	r3, [pc, #548]	; (80059b8 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8005794:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005796:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800579a:	ee07 3a90 	vmov	s15, r3
 800579e:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 80057a2:	ed97 6a02 	vldr	s12, [r7, #8]
 80057a6:	eddf 5a86 	vldr	s11, [pc, #536]	; 80059c0 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 80057aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80057ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 80057b2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80057b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80057ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80057be:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80057c2:	e08f      	b.n	80058e4 <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 80057c4:	4b7c      	ldr	r3, [pc, #496]	; (80059b8 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80057c6:	689b      	ldr	r3, [r3, #8]
 80057c8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d005      	beq.n	80057dc <HAL_RCCEx_GetPLL1ClockFreq+0xc8>
 80057d0:	4b79      	ldr	r3, [pc, #484]	; (80059b8 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80057d2:	689b      	ldr	r3, [r3, #8]
 80057d4:	0f1b      	lsrs	r3, r3, #28
 80057d6:	f003 030f 	and.w	r3, r3, #15
 80057da:	e006      	b.n	80057ea <HAL_RCCEx_GetPLL1ClockFreq+0xd6>
 80057dc:	4b76      	ldr	r3, [pc, #472]	; (80059b8 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80057de:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80057e2:	041b      	lsls	r3, r3, #16
 80057e4:	0f1b      	lsrs	r3, r3, #28
 80057e6:	f003 030f 	and.w	r3, r3, #15
 80057ea:	4a76      	ldr	r2, [pc, #472]	; (80059c4 <HAL_RCCEx_GetPLL1ClockFreq+0x2b0>)
 80057ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80057f0:	ee07 3a90 	vmov	s15, r3
 80057f4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80057f8:	693b      	ldr	r3, [r7, #16]
 80057fa:	ee07 3a90 	vmov	s15, r3
 80057fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005802:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005806:	69bb      	ldr	r3, [r7, #24]
 8005808:	ee07 3a90 	vmov	s15, r3
 800580c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005810:	ed97 6a02 	vldr	s12, [r7, #8]
 8005814:	eddf 5a6a 	vldr	s11, [pc, #424]	; 80059c0 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 8005818:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800581c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005820:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005824:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8005828:	ee67 7a27 	vmul.f32	s15, s14, s15
 800582c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005830:	e058      	b.n	80058e4 <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005832:	693b      	ldr	r3, [r7, #16]
 8005834:	ee07 3a90 	vmov	s15, r3
 8005838:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800583c:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80059bc <HAL_RCCEx_GetPLL1ClockFreq+0x2a8>
 8005840:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005844:	4b5c      	ldr	r3, [pc, #368]	; (80059b8 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8005846:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005848:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800584c:	ee07 3a90 	vmov	s15, r3
 8005850:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 8005854:	ed97 6a02 	vldr	s12, [r7, #8]
 8005858:	eddf 5a59 	vldr	s11, [pc, #356]	; 80059c0 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 800585c:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005860:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 8005864:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005868:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800586c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005870:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005874:	e036      	b.n	80058e4 <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    default:
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8005876:	4b50      	ldr	r3, [pc, #320]	; (80059b8 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8005878:	689b      	ldr	r3, [r3, #8]
 800587a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800587e:	2b00      	cmp	r3, #0
 8005880:	d005      	beq.n	800588e <HAL_RCCEx_GetPLL1ClockFreq+0x17a>
 8005882:	4b4d      	ldr	r3, [pc, #308]	; (80059b8 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8005884:	689b      	ldr	r3, [r3, #8]
 8005886:	0f1b      	lsrs	r3, r3, #28
 8005888:	f003 030f 	and.w	r3, r3, #15
 800588c:	e006      	b.n	800589c <HAL_RCCEx_GetPLL1ClockFreq+0x188>
 800588e:	4b4a      	ldr	r3, [pc, #296]	; (80059b8 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8005890:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005894:	041b      	lsls	r3, r3, #16
 8005896:	0f1b      	lsrs	r3, r3, #28
 8005898:	f003 030f 	and.w	r3, r3, #15
 800589c:	4a49      	ldr	r2, [pc, #292]	; (80059c4 <HAL_RCCEx_GetPLL1ClockFreq+0x2b0>)
 800589e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80058a2:	ee07 3a90 	vmov	s15, r3
 80058a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80058aa:	693b      	ldr	r3, [r7, #16]
 80058ac:	ee07 3a90 	vmov	s15, r3
 80058b0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80058b4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 80058b8:	69bb      	ldr	r3, [r7, #24]
 80058ba:	ee07 3a90 	vmov	s15, r3
 80058be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80058c2:	ed97 6a02 	vldr	s12, [r7, #8]
 80058c6:	eddf 5a3e 	vldr	s11, [pc, #248]	; 80059c0 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 80058ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80058ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80058d2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80058d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 80058da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80058de:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80058e2:	bf00      	nop
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVP) != 0U)
 80058e4:	4b34      	ldr	r3, [pc, #208]	; (80059b8 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80058e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058e8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d017      	beq.n	8005920 <HAL_RCCEx_GetPLL1ClockFreq+0x20c>
  {
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 80058f0:	4b31      	ldr	r3, [pc, #196]	; (80059b8 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80058f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80058f4:	0a5b      	lsrs	r3, r3, #9
 80058f6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80058fa:	ee07 3a90 	vmov	s15, r3
 80058fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + \
 8005902:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005906:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800590a:	edd7 6a07 	vldr	s13, [r7, #28]
 800590e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005912:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005916:	ee17 2a90 	vmov	r2, s15
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	601a      	str	r2, [r3, #0]
 800591e:	e002      	b.n	8005926 <HAL_RCCEx_GetPLL1ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	2200      	movs	r2, #0
 8005924:	601a      	str	r2, [r3, #0]
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVQ) != 0U)
 8005926:	4b24      	ldr	r3, [pc, #144]	; (80059b8 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8005928:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800592a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800592e:	2b00      	cmp	r3, #0
 8005930:	d017      	beq.n	8005962 <HAL_RCCEx_GetPLL1ClockFreq+0x24e>
  {
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8005932:	4b21      	ldr	r3, [pc, #132]	; (80059b8 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8005934:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005936:	0c1b      	lsrs	r3, r3, #16
 8005938:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800593c:	ee07 3a90 	vmov	s15, r3
 8005940:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1Q) >> RCC_PLL1DIVR_PLL1Q_Pos) + \
 8005944:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005948:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800594c:	edd7 6a07 	vldr	s13, [r7, #28]
 8005950:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005954:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005958:	ee17 2a90 	vmov	r2, s15
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	605a      	str	r2, [r3, #4]
 8005960:	e002      	b.n	8005968 <HAL_RCCEx_GetPLL1ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	2200      	movs	r2, #0
 8005966:	605a      	str	r2, [r3, #4]
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVR) != 0U)
 8005968:	4b13      	ldr	r3, [pc, #76]	; (80059b8 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800596a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800596c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005970:	2b00      	cmp	r3, #0
 8005972:	d017      	beq.n	80059a4 <HAL_RCCEx_GetPLL1ClockFreq+0x290>
  {
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8005974:	4b10      	ldr	r3, [pc, #64]	; (80059b8 <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8005976:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005978:	0e1b      	lsrs	r3, r3, #24
 800597a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800597e:	ee07 3a90 	vmov	s15, r3
 8005982:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + \
 8005986:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800598a:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800598e:	edd7 6a07 	vldr	s13, [r7, #28]
 8005992:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005996:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800599a:	ee17 2a90 	vmov	r2, s15
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	609a      	str	r2, [r3, #8]
  else
  {
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 80059a2:	e002      	b.n	80059aa <HAL_RCCEx_GetPLL1ClockFreq+0x296>
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	2200      	movs	r2, #0
 80059a8:	609a      	str	r2, [r3, #8]
}
 80059aa:	bf00      	nop
 80059ac:	3724      	adds	r7, #36	; 0x24
 80059ae:	46bd      	mov	sp, r7
 80059b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b4:	4770      	bx	lr
 80059b6:	bf00      	nop
 80059b8:	46020c00 	.word	0x46020c00
 80059bc:	4b742400 	.word	0x4b742400
 80059c0:	46000000 	.word	0x46000000
 80059c4:	08009fa0 	.word	0x08009fa0

080059c8 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 80059c8:	b480      	push	{r7}
 80059ca:	b089      	sub	sp, #36	; 0x24
 80059cc:	af00      	add	r7, sp, #0
 80059ce:	6078      	str	r0, [r7, #4]
  float_t fracn2;
  float_t pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x */
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 80059d0:	4ba6      	ldr	r3, [pc, #664]	; (8005c6c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80059d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80059d4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80059d8:	61bb      	str	r3, [r7, #24]
  pll2source = (RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2SRC);
 80059da:	4ba4      	ldr	r3, [pc, #656]	; (8005c6c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80059dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059de:	f003 0303 	and.w	r3, r3, #3
 80059e2:	617b      	str	r3, [r7, #20]
  pll2m = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2M) >> RCC_PLL2CFGR_PLL2M_Pos) + 1U;
 80059e4:	4ba1      	ldr	r3, [pc, #644]	; (8005c6c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80059e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059e8:	0a1b      	lsrs	r3, r3, #8
 80059ea:	f003 030f 	and.w	r3, r3, #15
 80059ee:	3301      	adds	r3, #1
 80059f0:	613b      	str	r3, [r7, #16]
  pll2fracen = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2FRACEN) >> RCC_PLL2CFGR_PLL2FRACEN_Pos);
 80059f2:	4b9e      	ldr	r3, [pc, #632]	; (8005c6c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80059f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059f6:	091b      	lsrs	r3, r3, #4
 80059f8:	f003 0301 	and.w	r3, r3, #1
 80059fc:	60fb      	str	r3, [r7, #12]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 80059fe:	4b9b      	ldr	r3, [pc, #620]	; (8005c6c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8005a00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a02:	08db      	lsrs	r3, r3, #3
 8005a04:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005a08:	68fa      	ldr	r2, [r7, #12]
 8005a0a:	fb02 f303 	mul.w	r3, r2, r3
 8005a0e:	ee07 3a90 	vmov	s15, r3
 8005a12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005a16:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL2FRACR_PLL2FRACN_Pos));

  switch (pll2source)
 8005a1a:	697b      	ldr	r3, [r7, #20]
 8005a1c:	2b03      	cmp	r3, #3
 8005a1e:	d062      	beq.n	8005ae6 <HAL_RCCEx_GetPLL2ClockFreq+0x11e>
 8005a20:	697b      	ldr	r3, [r7, #20]
 8005a22:	2b03      	cmp	r3, #3
 8005a24:	f200 8081 	bhi.w	8005b2a <HAL_RCCEx_GetPLL2ClockFreq+0x162>
 8005a28:	697b      	ldr	r3, [r7, #20]
 8005a2a:	2b01      	cmp	r3, #1
 8005a2c:	d024      	beq.n	8005a78 <HAL_RCCEx_GetPLL2ClockFreq+0xb0>
 8005a2e:	697b      	ldr	r3, [r7, #20]
 8005a30:	2b02      	cmp	r3, #2
 8005a32:	d17a      	bne.n	8005b2a <HAL_RCCEx_GetPLL2ClockFreq+0x162>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8005a34:	693b      	ldr	r3, [r7, #16]
 8005a36:	ee07 3a90 	vmov	s15, r3
 8005a3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005a3e:	eddf 6a8c 	vldr	s13, [pc, #560]	; 8005c70 <HAL_RCCEx_GetPLL2ClockFreq+0x2a8>
 8005a42:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005a46:	4b89      	ldr	r3, [pc, #548]	; (8005c6c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8005a48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a4a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005a4e:	ee07 3a90 	vmov	s15, r3
 8005a52:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 8005a56:	ed97 6a02 	vldr	s12, [r7, #8]
 8005a5a:	eddf 5a86 	vldr	s11, [pc, #536]	; 8005c74 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 8005a5e:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8005a62:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 8005a66:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005a6a:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8005a6e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005a72:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005a76:	e08f      	b.n	8005b98 <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 8005a78:	4b7c      	ldr	r3, [pc, #496]	; (8005c6c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8005a7a:	689b      	ldr	r3, [r3, #8]
 8005a7c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d005      	beq.n	8005a90 <HAL_RCCEx_GetPLL2ClockFreq+0xc8>
 8005a84:	4b79      	ldr	r3, [pc, #484]	; (8005c6c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8005a86:	689b      	ldr	r3, [r3, #8]
 8005a88:	0f1b      	lsrs	r3, r3, #28
 8005a8a:	f003 030f 	and.w	r3, r3, #15
 8005a8e:	e006      	b.n	8005a9e <HAL_RCCEx_GetPLL2ClockFreq+0xd6>
 8005a90:	4b76      	ldr	r3, [pc, #472]	; (8005c6c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8005a92:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005a96:	041b      	lsls	r3, r3, #16
 8005a98:	0f1b      	lsrs	r3, r3, #28
 8005a9a:	f003 030f 	and.w	r3, r3, #15
 8005a9e:	4a76      	ldr	r2, [pc, #472]	; (8005c78 <HAL_RCCEx_GetPLL2ClockFreq+0x2b0>)
 8005aa0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005aa4:	ee07 3a90 	vmov	s15, r3
 8005aa8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005aac:	693b      	ldr	r3, [r7, #16]
 8005aae:	ee07 3a90 	vmov	s15, r3
 8005ab2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005ab6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005aba:	69bb      	ldr	r3, [r7, #24]
 8005abc:	ee07 3a90 	vmov	s15, r3
 8005ac0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005ac4:	ed97 6a02 	vldr	s12, [r7, #8]
 8005ac8:	eddf 5a6a 	vldr	s11, [pc, #424]	; 8005c74 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 8005acc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005ad0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005ad4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005ad8:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 8005adc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005ae0:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005ae4:	e058      	b.n	8005b98 <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8005ae6:	693b      	ldr	r3, [r7, #16]
 8005ae8:	ee07 3a90 	vmov	s15, r3
 8005aec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005af0:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8005c70 <HAL_RCCEx_GetPLL2ClockFreq+0x2a8>
 8005af4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005af8:	4b5c      	ldr	r3, [pc, #368]	; (8005c6c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8005afa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005afc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005b00:	ee07 3a90 	vmov	s15, r3
 8005b04:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 8005b08:	ed97 6a02 	vldr	s12, [r7, #8]
 8005b0c:	eddf 5a59 	vldr	s11, [pc, #356]	; 8005c74 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 8005b10:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8005b14:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 8005b18:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005b1c:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8005b20:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005b24:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005b28:	e036      	b.n	8005b98 <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    default:
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 8005b2a:	4b50      	ldr	r3, [pc, #320]	; (8005c6c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8005b2c:	689b      	ldr	r3, [r3, #8]
 8005b2e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d005      	beq.n	8005b42 <HAL_RCCEx_GetPLL2ClockFreq+0x17a>
 8005b36:	4b4d      	ldr	r3, [pc, #308]	; (8005c6c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8005b38:	689b      	ldr	r3, [r3, #8]
 8005b3a:	0f1b      	lsrs	r3, r3, #28
 8005b3c:	f003 030f 	and.w	r3, r3, #15
 8005b40:	e006      	b.n	8005b50 <HAL_RCCEx_GetPLL2ClockFreq+0x188>
 8005b42:	4b4a      	ldr	r3, [pc, #296]	; (8005c6c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8005b44:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005b48:	041b      	lsls	r3, r3, #16
 8005b4a:	0f1b      	lsrs	r3, r3, #28
 8005b4c:	f003 030f 	and.w	r3, r3, #15
 8005b50:	4a49      	ldr	r2, [pc, #292]	; (8005c78 <HAL_RCCEx_GetPLL2ClockFreq+0x2b0>)
 8005b52:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005b56:	ee07 3a90 	vmov	s15, r3
 8005b5a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005b5e:	693b      	ldr	r3, [r7, #16]
 8005b60:	ee07 3a90 	vmov	s15, r3
 8005b64:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005b68:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                * ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005b6c:	69bb      	ldr	r3, [r7, #24]
 8005b6e:	ee07 3a90 	vmov	s15, r3
 8005b72:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005b76:	ed97 6a02 	vldr	s12, [r7, #8]
 8005b7a:	eddf 5a3e 	vldr	s11, [pc, #248]	; 8005c74 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 8005b7e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005b82:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005b86:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005b8a:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 8005b8e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005b92:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005b96:	bf00      	nop
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVP) != 0U)
 8005b98:	4b34      	ldr	r3, [pc, #208]	; (8005c6c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8005b9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b9c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d017      	beq.n	8005bd4 <HAL_RCCEx_GetPLL2ClockFreq+0x20c>
  {
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8005ba4:	4b31      	ldr	r3, [pc, #196]	; (8005c6c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8005ba6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ba8:	0a5b      	lsrs	r3, r3, #9
 8005baa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005bae:	ee07 3a90 	vmov	s15, r3
 8005bb2:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2P) >> RCC_PLL2DIVR_PLL2P_Pos) + \
 8005bb6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005bba:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8005bbe:	edd7 6a07 	vldr	s13, [r7, #28]
 8005bc2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005bc6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005bca:	ee17 2a90 	vmov	r2, s15
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	601a      	str	r2, [r3, #0]
 8005bd2:	e002      	b.n	8005bda <HAL_RCCEx_GetPLL2ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	2200      	movs	r2, #0
 8005bd8:	601a      	str	r2, [r3, #0]
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVQ) != 0U)
 8005bda:	4b24      	ldr	r3, [pc, #144]	; (8005c6c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8005bdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d017      	beq.n	8005c16 <HAL_RCCEx_GetPLL2ClockFreq+0x24e>
  {
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8005be6:	4b21      	ldr	r3, [pc, #132]	; (8005c6c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8005be8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005bea:	0c1b      	lsrs	r3, r3, #16
 8005bec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005bf0:	ee07 3a90 	vmov	s15, r3
 8005bf4:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2Q) >> RCC_PLL2DIVR_PLL2Q_Pos) + \
 8005bf8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005bfc:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8005c00:	edd7 6a07 	vldr	s13, [r7, #28]
 8005c04:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005c08:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005c0c:	ee17 2a90 	vmov	r2, s15
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	605a      	str	r2, [r3, #4]
 8005c14:	e002      	b.n	8005c1c <HAL_RCCEx_GetPLL2ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	2200      	movs	r2, #0
 8005c1a:	605a      	str	r2, [r3, #4]
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVR) != 0U)
 8005c1c:	4b13      	ldr	r3, [pc, #76]	; (8005c6c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8005c1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c20:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d017      	beq.n	8005c58 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
  {
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8005c28:	4b10      	ldr	r3, [pc, #64]	; (8005c6c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8005c2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c2c:	0e1b      	lsrs	r3, r3, #24
 8005c2e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005c32:	ee07 3a90 	vmov	s15, r3
 8005c36:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2R) >> RCC_PLL2DIVR_PLL2R_Pos) + \
 8005c3a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005c3e:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8005c42:	edd7 6a07 	vldr	s13, [r7, #28]
 8005c46:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005c4a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005c4e:	ee17 2a90 	vmov	r2, s15
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	609a      	str	r2, [r3, #8]
  }
  else
  {
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8005c56:	e002      	b.n	8005c5e <HAL_RCCEx_GetPLL2ClockFreq+0x296>
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	2200      	movs	r2, #0
 8005c5c:	609a      	str	r2, [r3, #8]
}
 8005c5e:	bf00      	nop
 8005c60:	3724      	adds	r7, #36	; 0x24
 8005c62:	46bd      	mov	sp, r7
 8005c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c68:	4770      	bx	lr
 8005c6a:	bf00      	nop
 8005c6c:	46020c00 	.word	0x46020c00
 8005c70:	4b742400 	.word	0x4b742400
 8005c74:	46000000 	.word	0x46000000
 8005c78:	08009fa0 	.word	0x08009fa0

08005c7c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8005c7c:	b480      	push	{r7}
 8005c7e:	b089      	sub	sp, #36	; 0x24
 8005c80:	af00      	add	r7, sp, #0
 8005c82:	6078      	str	r0, [r7, #4]

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
  PLL3xCLK = PLL3_VCO / PLLxR
  */

  pll3n = (RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N);
 8005c84:	4ba6      	ldr	r3, [pc, #664]	; (8005f20 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8005c86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c88:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005c8c:	61bb      	str	r3, [r7, #24]
  pll3source = (RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3SRC);
 8005c8e:	4ba4      	ldr	r3, [pc, #656]	; (8005f20 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8005c90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c92:	f003 0303 	and.w	r3, r3, #3
 8005c96:	617b      	str	r3, [r7, #20]
  pll3m = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3M) >> RCC_PLL3CFGR_PLL3M_Pos) + 1U;
 8005c98:	4ba1      	ldr	r3, [pc, #644]	; (8005f20 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8005c9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c9c:	0a1b      	lsrs	r3, r3, #8
 8005c9e:	f003 030f 	and.w	r3, r3, #15
 8005ca2:	3301      	adds	r3, #1
 8005ca4:	613b      	str	r3, [r7, #16]
  pll3fracen = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3FRACEN) >> RCC_PLL3CFGR_PLL3FRACEN_Pos);
 8005ca6:	4b9e      	ldr	r3, [pc, #632]	; (8005f20 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8005ca8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005caa:	091b      	lsrs	r3, r3, #4
 8005cac:	f003 0301 	and.w	r3, r3, #1
 8005cb0:	60fb      	str	r3, [r7, #12]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_PLL3FRACN) >> \
 8005cb2:	4b9b      	ldr	r3, [pc, #620]	; (8005f20 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8005cb4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005cb6:	08db      	lsrs	r3, r3, #3
 8005cb8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005cbc:	68fa      	ldr	r2, [r7, #12]
 8005cbe:	fb02 f303 	mul.w	r3, r2, r3
 8005cc2:	ee07 3a90 	vmov	s15, r3
 8005cc6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005cca:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL3FRACR_PLL3FRACN_Pos));

  switch (pll3source)
 8005cce:	697b      	ldr	r3, [r7, #20]
 8005cd0:	2b03      	cmp	r3, #3
 8005cd2:	d062      	beq.n	8005d9a <HAL_RCCEx_GetPLL3ClockFreq+0x11e>
 8005cd4:	697b      	ldr	r3, [r7, #20]
 8005cd6:	2b03      	cmp	r3, #3
 8005cd8:	f200 8081 	bhi.w	8005dde <HAL_RCCEx_GetPLL3ClockFreq+0x162>
 8005cdc:	697b      	ldr	r3, [r7, #20]
 8005cde:	2b01      	cmp	r3, #1
 8005ce0:	d024      	beq.n	8005d2c <HAL_RCCEx_GetPLL3ClockFreq+0xb0>
 8005ce2:	697b      	ldr	r3, [r7, #20]
 8005ce4:	2b02      	cmp	r3, #2
 8005ce6:	d17a      	bne.n	8005dde <HAL_RCCEx_GetPLL3ClockFreq+0x162>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8005ce8:	693b      	ldr	r3, [r7, #16]
 8005cea:	ee07 3a90 	vmov	s15, r3
 8005cee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005cf2:	eddf 6a8c 	vldr	s13, [pc, #560]	; 8005f24 <HAL_RCCEx_GetPLL3ClockFreq+0x2a8>
 8005cf6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005cfa:	4b89      	ldr	r3, [pc, #548]	; (8005f20 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8005cfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005cfe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005d02:	ee07 3a90 	vmov	s15, r3
 8005d06:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 8005d0a:	ed97 6a02 	vldr	s12, [r7, #8]
 8005d0e:	eddf 5a86 	vldr	s11, [pc, #536]	; 8005f28 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 8005d12:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8005d16:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 8005d1a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005d1e:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8005d22:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005d26:	edc7 7a07 	vstr	s15, [r7, #28]

      break;
 8005d2a:	e08f      	b.n	8005e4c <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>
    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8005d2c:	4b7c      	ldr	r3, [pc, #496]	; (8005f20 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8005d2e:	689b      	ldr	r3, [r3, #8]
 8005d30:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d005      	beq.n	8005d44 <HAL_RCCEx_GetPLL3ClockFreq+0xc8>
 8005d38:	4b79      	ldr	r3, [pc, #484]	; (8005f20 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8005d3a:	689b      	ldr	r3, [r3, #8]
 8005d3c:	0f1b      	lsrs	r3, r3, #28
 8005d3e:	f003 030f 	and.w	r3, r3, #15
 8005d42:	e006      	b.n	8005d52 <HAL_RCCEx_GetPLL3ClockFreq+0xd6>
 8005d44:	4b76      	ldr	r3, [pc, #472]	; (8005f20 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8005d46:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005d4a:	041b      	lsls	r3, r3, #16
 8005d4c:	0f1b      	lsrs	r3, r3, #28
 8005d4e:	f003 030f 	and.w	r3, r3, #15
 8005d52:	4a76      	ldr	r2, [pc, #472]	; (8005f2c <HAL_RCCEx_GetPLL3ClockFreq+0x2b0>)
 8005d54:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005d58:	ee07 3a90 	vmov	s15, r3
 8005d5c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005d60:	693b      	ldr	r3, [r7, #16]
 8005d62:	ee07 3a90 	vmov	s15, r3
 8005d66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d6a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005d6e:	69bb      	ldr	r3, [r7, #24]
 8005d70:	ee07 3a90 	vmov	s15, r3
 8005d74:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005d78:	ed97 6a02 	vldr	s12, [r7, #8]
 8005d7c:	eddf 5a6a 	vldr	s11, [pc, #424]	; 8005f28 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 8005d80:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005d84:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005d88:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005d8c:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8005d90:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005d94:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005d98:	e058      	b.n	8005e4c <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8005d9a:	693b      	ldr	r3, [r7, #16]
 8005d9c:	ee07 3a90 	vmov	s15, r3
 8005da0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005da4:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8005f24 <HAL_RCCEx_GetPLL3ClockFreq+0x2a8>
 8005da8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005dac:	4b5c      	ldr	r3, [pc, #368]	; (8005f20 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8005dae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005db0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005db4:	ee07 3a90 	vmov	s15, r3
 8005db8:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 8005dbc:	ed97 6a02 	vldr	s12, [r7, #8]
 8005dc0:	eddf 5a59 	vldr	s11, [pc, #356]	; 8005f28 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 8005dc4:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8005dc8:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 8005dcc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005dd0:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8005dd4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005dd8:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005ddc:	e036      	b.n	8005e4c <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>

    default:
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8005dde:	4b50      	ldr	r3, [pc, #320]	; (8005f20 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8005de0:	689b      	ldr	r3, [r3, #8]
 8005de2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d005      	beq.n	8005df6 <HAL_RCCEx_GetPLL3ClockFreq+0x17a>
 8005dea:	4b4d      	ldr	r3, [pc, #308]	; (8005f20 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8005dec:	689b      	ldr	r3, [r3, #8]
 8005dee:	0f1b      	lsrs	r3, r3, #28
 8005df0:	f003 030f 	and.w	r3, r3, #15
 8005df4:	e006      	b.n	8005e04 <HAL_RCCEx_GetPLL3ClockFreq+0x188>
 8005df6:	4b4a      	ldr	r3, [pc, #296]	; (8005f20 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8005df8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005dfc:	041b      	lsls	r3, r3, #16
 8005dfe:	0f1b      	lsrs	r3, r3, #28
 8005e00:	f003 030f 	and.w	r3, r3, #15
 8005e04:	4a49      	ldr	r2, [pc, #292]	; (8005f2c <HAL_RCCEx_GetPLL3ClockFreq+0x2b0>)
 8005e06:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005e0a:	ee07 3a90 	vmov	s15, r3
 8005e0e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005e12:	693b      	ldr	r3, [r7, #16]
 8005e14:	ee07 3a90 	vmov	s15, r3
 8005e18:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e1c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005e20:	69bb      	ldr	r3, [r7, #24]
 8005e22:	ee07 3a90 	vmov	s15, r3
 8005e26:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005e2a:	ed97 6a02 	vldr	s12, [r7, #8]
 8005e2e:	eddf 5a3e 	vldr	s11, [pc, #248]	; 8005f28 <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 8005e32:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005e36:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005e3a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005e3e:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8005e42:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005e46:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005e4a:	bf00      	nop
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVP) != 0U)
 8005e4c:	4b34      	ldr	r3, [pc, #208]	; (8005f20 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8005e4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e50:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d017      	beq.n	8005e88 <HAL_RCCEx_GetPLL3ClockFreq+0x20c>
  {
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8005e58:	4b31      	ldr	r3, [pc, #196]	; (8005f20 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8005e5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e5c:	0a5b      	lsrs	r3, r3, #9
 8005e5e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005e62:	ee07 3a90 	vmov	s15, r3
 8005e66:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3P) >> RCC_PLL3DIVR_PLL3P_Pos) + \
 8005e6a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005e6e:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8005e72:	edd7 6a07 	vldr	s13, [r7, #28]
 8005e76:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005e7a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005e7e:	ee17 2a90 	vmov	r2, s15
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	601a      	str	r2, [r3, #0]
 8005e86:	e002      	b.n	8005e8e <HAL_RCCEx_GetPLL3ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	2200      	movs	r2, #0
 8005e8c:	601a      	str	r2, [r3, #0]
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVQ) != 0U)
 8005e8e:	4b24      	ldr	r3, [pc, #144]	; (8005f20 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8005e90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d017      	beq.n	8005eca <HAL_RCCEx_GetPLL3ClockFreq+0x24e>
  {
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8005e9a:	4b21      	ldr	r3, [pc, #132]	; (8005f20 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8005e9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e9e:	0c1b      	lsrs	r3, r3, #16
 8005ea0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005ea4:	ee07 3a90 	vmov	s15, r3
 8005ea8:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3Q) >> RCC_PLL3DIVR_PLL3Q_Pos) + \
 8005eac:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005eb0:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8005eb4:	edd7 6a07 	vldr	s13, [r7, #28]
 8005eb8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005ebc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005ec0:	ee17 2a90 	vmov	r2, s15
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	605a      	str	r2, [r3, #4]
 8005ec8:	e002      	b.n	8005ed0 <HAL_RCCEx_GetPLL3ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	2200      	movs	r2, #0
 8005ece:	605a      	str	r2, [r3, #4]
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVR) != 0U)
 8005ed0:	4b13      	ldr	r3, [pc, #76]	; (8005f20 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8005ed2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ed4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d017      	beq.n	8005f0c <HAL_RCCEx_GetPLL3ClockFreq+0x290>
  {
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8005edc:	4b10      	ldr	r3, [pc, #64]	; (8005f20 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8005ede:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ee0:	0e1b      	lsrs	r3, r3, #24
 8005ee2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005ee6:	ee07 3a90 	vmov	s15, r3
 8005eea:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3R) >> RCC_PLL3DIVR_PLL3R_Pos) + \
 8005eee:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005ef2:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8005ef6:	edd7 6a07 	vldr	s13, [r7, #28]
 8005efa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005efe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005f02:	ee17 2a90 	vmov	r2, s15
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	609a      	str	r2, [r3, #8]
  else
  {
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8005f0a:	e002      	b.n	8005f12 <HAL_RCCEx_GetPLL3ClockFreq+0x296>
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	2200      	movs	r2, #0
 8005f10:	609a      	str	r2, [r3, #8]
}
 8005f12:	bf00      	nop
 8005f14:	3724      	adds	r7, #36	; 0x24
 8005f16:	46bd      	mov	sp, r7
 8005f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f1c:	4770      	bx	lr
 8005f1e:	bf00      	nop
 8005f20:	46020c00 	.word	0x46020c00
 8005f24:	4b742400 	.word	0x4b742400
 8005f28:	46000000 	.word	0x46000000
 8005f2c:	08009fa0 	.word	0x08009fa0

08005f30 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in Hz
  *
  *        (*) value not defined in all devices.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8005f30:	b580      	push	{r7, lr}
 8005f32:	b08e      	sub	sp, #56	; 0x38
 8005f34:	af00      	add	r7, sp, #0
 8005f36:	e9c7 0100 	strd	r0, r1, [r7]
  uint32_t srcclk;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 8005f3a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005f3e:	f5a2 2180 	sub.w	r1, r2, #262144	; 0x40000
 8005f42:	430b      	orrs	r3, r1
 8005f44:	d145      	bne.n	8005fd2 <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8005f46:	4b9b      	ldr	r3, [pc, #620]	; (80061b4 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 8005f48:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005f4c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005f50:	633b      	str	r3, [r7, #48]	; 0x30

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 8005f52:	4b98      	ldr	r3, [pc, #608]	; (80061b4 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 8005f54:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005f58:	f003 0302 	and.w	r3, r3, #2
 8005f5c:	2b02      	cmp	r3, #2
 8005f5e:	d108      	bne.n	8005f72 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
 8005f60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f62:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005f66:	d104      	bne.n	8005f72 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
    {
      frequency = LSE_VALUE;
 8005f68:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005f6c:	637b      	str	r3, [r7, #52]	; 0x34
 8005f6e:	f001 b912 	b.w	8007196 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 8005f72:	4b90      	ldr	r3, [pc, #576]	; (80061b4 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 8005f74:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005f78:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005f7c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005f80:	d114      	bne.n	8005fac <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
 8005f82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f84:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005f88:	d110      	bne.n	8005fac <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8005f8a:	4b8a      	ldr	r3, [pc, #552]	; (80061b4 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 8005f8c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005f90:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005f94:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005f98:	d103      	bne.n	8005fa2 <HAL_RCCEx_GetPeriphCLKFreq+0x72>
      {
        frequency = LSI_VALUE / 128U;
 8005f9a:	23fa      	movs	r3, #250	; 0xfa
 8005f9c:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8005f9e:	f001 b8fa 	b.w	8007196 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
      }
      else
      {
        frequency = LSI_VALUE;
 8005fa2:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8005fa6:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8005fa8:	f001 b8f5 	b.w	8007196 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
      }
    }
    /* Check if HSE is ready  and if RTC clock selection is HSI_DIV32*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIV32))
 8005fac:	4b81      	ldr	r3, [pc, #516]	; (80061b4 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005fb4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005fb8:	d107      	bne.n	8005fca <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
 8005fba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fbc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005fc0:	d103      	bne.n	8005fca <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
    {
      frequency = HSE_VALUE / 32U;
 8005fc2:	4b7d      	ldr	r3, [pc, #500]	; (80061b8 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8005fc4:	637b      	str	r3, [r7, #52]	; 0x34
 8005fc6:	f001 b8e6 	b.w	8007196 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    /* Clock not enabled for RTC*/
    else
    {
      frequency = 0U;
 8005fca:	2300      	movs	r3, #0
 8005fcc:	637b      	str	r3, [r7, #52]	; 0x34
 8005fce:	f001 b8e2 	b.w	8007196 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8005fd2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005fd6:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 8005fda:	430b      	orrs	r3, r1
 8005fdc:	d151      	bne.n	8006082 <HAL_RCCEx_GetPeriphCLKFreq+0x152>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 8005fde:	4b75      	ldr	r3, [pc, #468]	; (80061b4 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 8005fe0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8005fe4:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 8005fe8:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 8005fea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fec:	2b80      	cmp	r3, #128	; 0x80
 8005fee:	d035      	beq.n	800605c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
 8005ff0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ff2:	2b80      	cmp	r3, #128	; 0x80
 8005ff4:	d841      	bhi.n	800607a <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 8005ff6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ff8:	2b60      	cmp	r3, #96	; 0x60
 8005ffa:	d02a      	beq.n	8006052 <HAL_RCCEx_GetPeriphCLKFreq+0x122>
 8005ffc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ffe:	2b60      	cmp	r3, #96	; 0x60
 8006000:	d83b      	bhi.n	800607a <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 8006002:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006004:	2b40      	cmp	r3, #64	; 0x40
 8006006:	d009      	beq.n	800601c <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 8006008:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800600a:	2b40      	cmp	r3, #64	; 0x40
 800600c:	d835      	bhi.n	800607a <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 800600e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006010:	2b00      	cmp	r3, #0
 8006012:	d00c      	beq.n	800602e <HAL_RCCEx_GetPeriphCLKFreq+0xfe>
 8006014:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006016:	2b20      	cmp	r3, #32
 8006018:	d012      	beq.n	8006040 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 800601a:	e02e      	b.n	800607a <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
    {
      case RCC_SAI1CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800601c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006020:	4618      	mov	r0, r3
 8006022:	f7ff fb77 	bl	8005714 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 8006026:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006028:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800602a:	f001 b8b4 	b.w	8007196 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800602e:	f107 0318 	add.w	r3, r7, #24
 8006032:	4618      	mov	r0, r3
 8006034:	f7ff fcc8 	bl	80059c8 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 8006038:	69bb      	ldr	r3, [r7, #24]
 800603a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800603c:	f001 b8ab 	b.w	8007196 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_SAI1CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006040:	f107 030c 	add.w	r3, r7, #12
 8006044:	4618      	mov	r0, r3
 8006046:	f7ff fe19 	bl	8005c7c <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800604e:	f001 b8a2 	b.w	8007196 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_SAI1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8006052:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8006056:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006058:	f001 b89d 	b.w	8007196 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_SAI1CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800605c:	4b55      	ldr	r3, [pc, #340]	; (80061b4 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006064:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006068:	d103      	bne.n	8006072 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        {
          frequency = HSI_VALUE;
 800606a:	4b54      	ldr	r3, [pc, #336]	; (80061bc <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 800606c:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800606e:	f001 b892 	b.w	8007196 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
          frequency = 0U;
 8006072:	2300      	movs	r3, #0
 8006074:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006076:	f001 b88e 	b.w	8007196 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      default :
      {
        frequency = 0U;
 800607a:	2300      	movs	r3, #0
 800607c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800607e:	f001 b88a 	b.w	8007196 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
        break;
    }
  }
#endif /* SAI2 */
#if defined(SAES)
  else if (PeriphClk == RCC_PERIPHCLK_SAES)
 8006082:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006086:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 800608a:	430b      	orrs	r3, r1
 800608c:	d126      	bne.n	80060dc <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
  {
    /* Get the current SAES source */
    srcclk = __HAL_RCC_GET_SAES_SOURCE();
 800608e:	4b49      	ldr	r3, [pc, #292]	; (80061b4 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 8006090:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8006094:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006098:	633b      	str	r3, [r7, #48]	; 0x30

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (srcclk == RCC_SAESCLKSOURCE_SHSI))
 800609a:	4b46      	ldr	r3, [pc, #280]	; (80061b4 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80060a2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80060a6:	d106      	bne.n	80060b6 <HAL_RCCEx_GetPeriphCLKFreq+0x186>
 80060a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d103      	bne.n	80060b6 <HAL_RCCEx_GetPeriphCLKFreq+0x186>
    {
      frequency = HSI_VALUE;
 80060ae:	4b43      	ldr	r3, [pc, #268]	; (80061bc <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 80060b0:	637b      	str	r3, [r7, #52]	; 0x34
 80060b2:	f001 b870 	b.w	8007196 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (srcclk == RCC_SAESCLKSOURCE_SHSI_DIV2))
 80060b6:	4b3f      	ldr	r3, [pc, #252]	; (80061b4 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80060be:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80060c2:	d107      	bne.n	80060d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>
 80060c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060c6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80060ca:	d103      	bne.n	80060d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>
    {
      frequency = HSI_VALUE >> 1U;
 80060cc:	4b3c      	ldr	r3, [pc, #240]	; (80061c0 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 80060ce:	637b      	str	r3, [r7, #52]	; 0x34
 80060d0:	f001 b861 	b.w	8007196 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    /* Clock not enabled for SAES */
    else
    {
      frequency = 0U;
 80060d4:	2300      	movs	r3, #0
 80060d6:	637b      	str	r3, [r7, #52]	; 0x34
 80060d8:	f001 b85d 	b.w	8007196 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
  }
#endif /* SAES */
  else if (PeriphClk == RCC_PERIPHCLK_ICLK)
 80060dc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80060e0:	f5a2 1180 	sub.w	r1, r2, #1048576	; 0x100000
 80060e4:	430b      	orrs	r3, r1
 80060e6:	d171      	bne.n	80061cc <HAL_RCCEx_GetPeriphCLKFreq+0x29c>
  {
    srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 80060e8:	4b32      	ldr	r3, [pc, #200]	; (80061b4 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 80060ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80060ee:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 80060f2:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 80060f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060f6:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80060fa:	d034      	beq.n	8006166 <HAL_RCCEx_GetPeriphCLKFreq+0x236>
 80060fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060fe:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8006102:	d853      	bhi.n	80061ac <HAL_RCCEx_GetPeriphCLKFreq+0x27c>
 8006104:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006106:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800610a:	d00b      	beq.n	8006124 <HAL_RCCEx_GetPeriphCLKFreq+0x1f4>
 800610c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800610e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006112:	d84b      	bhi.n	80061ac <HAL_RCCEx_GetPeriphCLKFreq+0x27c>
 8006114:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006116:	2b00      	cmp	r3, #0
 8006118:	d016      	beq.n	8006148 <HAL_RCCEx_GetPeriphCLKFreq+0x218>
 800611a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800611c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006120:	d009      	beq.n	8006136 <HAL_RCCEx_GetPeriphCLKFreq+0x206>
 8006122:	e043      	b.n	80061ac <HAL_RCCEx_GetPeriphCLKFreq+0x27c>
    {
      case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006124:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006128:	4618      	mov	r0, r3
 800612a:	f7ff faf3 	bl	8005714 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 800612e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006130:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006132:	f001 b830 	b.w	8007196 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006136:	f107 0318 	add.w	r3, r7, #24
 800613a:	4618      	mov	r0, r3
 800613c:	f7ff fc44 	bl	80059c8 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 8006140:	69fb      	ldr	r3, [r7, #28]
 8006142:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006144:	f001 b827 	b.w	8007196 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 8006148:	4b1a      	ldr	r3, [pc, #104]	; (80061b4 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006150:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006154:	d103      	bne.n	800615e <HAL_RCCEx_GetPeriphCLKFreq+0x22e>
        {
          frequency = HSI48_VALUE;
 8006156:	4b1b      	ldr	r3, [pc, #108]	; (80061c4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8006158:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800615a:	f001 b81c 	b.w	8007196 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
          frequency = 0U;
 800615e:	2300      	movs	r3, #0
 8006160:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006162:	f001 b818 	b.w	8007196 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8006166:	4b13      	ldr	r3, [pc, #76]	; (80061b4 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	f003 0320 	and.w	r3, r3, #32
 800616e:	2b20      	cmp	r3, #32
 8006170:	d118      	bne.n	80061a4 <HAL_RCCEx_GetPeriphCLKFreq+0x274>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8006172:	4b10      	ldr	r3, [pc, #64]	; (80061b4 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 8006174:	689b      	ldr	r3, [r3, #8]
 8006176:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800617a:	2b00      	cmp	r3, #0
 800617c:	d005      	beq.n	800618a <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 800617e:	4b0d      	ldr	r3, [pc, #52]	; (80061b4 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 8006180:	689b      	ldr	r3, [r3, #8]
 8006182:	0e1b      	lsrs	r3, r3, #24
 8006184:	f003 030f 	and.w	r3, r3, #15
 8006188:	e006      	b.n	8006198 <HAL_RCCEx_GetPeriphCLKFreq+0x268>
 800618a:	4b0a      	ldr	r3, [pc, #40]	; (80061b4 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 800618c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006190:	041b      	lsls	r3, r3, #16
 8006192:	0e1b      	lsrs	r3, r3, #24
 8006194:	f003 030f 	and.w	r3, r3, #15
 8006198:	4a0b      	ldr	r2, [pc, #44]	; (80061c8 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800619a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800619e:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80061a0:	f000 bff9 	b.w	8007196 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
          frequency = 0U;
 80061a4:	2300      	movs	r3, #0
 80061a6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80061a8:	f000 bff5 	b.w	8007196 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      default :

        frequency = 0U;
 80061ac:	2300      	movs	r3, #0
 80061ae:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80061b0:	f000 bff1 	b.w	8007196 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
 80061b4:	46020c00 	.word	0x46020c00
 80061b8:	0007a120 	.word	0x0007a120
 80061bc:	00f42400 	.word	0x00f42400
 80061c0:	007a1200 	.word	0x007a1200
 80061c4:	02dc6c00 	.word	0x02dc6c00
 80061c8:	08009fa0 	.word	0x08009fa0
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 80061cc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80061d0:	f5a2 1100 	sub.w	r1, r2, #2097152	; 0x200000
 80061d4:	430b      	orrs	r3, r1
 80061d6:	d17f      	bne.n	80062d8 <HAL_RCCEx_GetPeriphCLKFreq+0x3a8>
  {
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 80061d8:	4ba8      	ldr	r3, [pc, #672]	; (800647c <HAL_RCCEx_GetPeriphCLKFreq+0x54c>)
 80061da:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80061de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80061e2:	633b      	str	r3, [r7, #48]	; 0x30
    if (srcclk == RCC_SDMMCCLKSOURCE_CLK48)
 80061e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d165      	bne.n	80062b6 <HAL_RCCEx_GetPeriphCLKFreq+0x386>
    {
      srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 80061ea:	4ba4      	ldr	r3, [pc, #656]	; (800647c <HAL_RCCEx_GetPeriphCLKFreq+0x54c>)
 80061ec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80061f0:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 80061f4:	633b      	str	r3, [r7, #48]	; 0x30

      switch (srcclk)
 80061f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061f8:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80061fc:	d034      	beq.n	8006268 <HAL_RCCEx_GetPeriphCLKFreq+0x338>
 80061fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006200:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8006204:	d853      	bhi.n	80062ae <HAL_RCCEx_GetPeriphCLKFreq+0x37e>
 8006206:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006208:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800620c:	d00b      	beq.n	8006226 <HAL_RCCEx_GetPeriphCLKFreq+0x2f6>
 800620e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006210:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006214:	d84b      	bhi.n	80062ae <HAL_RCCEx_GetPeriphCLKFreq+0x37e>
 8006216:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006218:	2b00      	cmp	r3, #0
 800621a:	d016      	beq.n	800624a <HAL_RCCEx_GetPeriphCLKFreq+0x31a>
 800621c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800621e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006222:	d009      	beq.n	8006238 <HAL_RCCEx_GetPeriphCLKFreq+0x308>
 8006224:	e043      	b.n	80062ae <HAL_RCCEx_GetPeriphCLKFreq+0x37e>
      {
        case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006226:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800622a:	4618      	mov	r0, r3
 800622c:	f7ff fa72 	bl	8005714 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006230:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006232:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 8006234:	f000 bfaf 	b.w	8007196 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
        }
        case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006238:	f107 0318 	add.w	r3, r7, #24
 800623c:	4618      	mov	r0, r3
 800623e:	f7ff fbc3 	bl	80059c8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006242:	69fb      	ldr	r3, [r7, #28]
 8006244:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 8006246:	f000 bfa6 	b.w	8007196 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
        }
        case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 800624a:	4b8c      	ldr	r3, [pc, #560]	; (800647c <HAL_RCCEx_GetPeriphCLKFreq+0x54c>)
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006252:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006256:	d103      	bne.n	8006260 <HAL_RCCEx_GetPeriphCLKFreq+0x330>
          {
            frequency = HSI48_VALUE;
 8006258:	4b89      	ldr	r3, [pc, #548]	; (8006480 <HAL_RCCEx_GetPeriphCLKFreq+0x550>)
 800625a:	637b      	str	r3, [r7, #52]	; 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 800625c:	f000 bf9b 	b.w	8007196 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
            frequency = 0U;
 8006260:	2300      	movs	r3, #0
 8006262:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 8006264:	f000 bf97 	b.w	8007196 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
        }
        case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8006268:	4b84      	ldr	r3, [pc, #528]	; (800647c <HAL_RCCEx_GetPeriphCLKFreq+0x54c>)
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	f003 0320 	and.w	r3, r3, #32
 8006270:	2b20      	cmp	r3, #32
 8006272:	d118      	bne.n	80062a6 <HAL_RCCEx_GetPeriphCLKFreq+0x376>
          {
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8006274:	4b81      	ldr	r3, [pc, #516]	; (800647c <HAL_RCCEx_GetPeriphCLKFreq+0x54c>)
 8006276:	689b      	ldr	r3, [r3, #8]
 8006278:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800627c:	2b00      	cmp	r3, #0
 800627e:	d005      	beq.n	800628c <HAL_RCCEx_GetPeriphCLKFreq+0x35c>
 8006280:	4b7e      	ldr	r3, [pc, #504]	; (800647c <HAL_RCCEx_GetPeriphCLKFreq+0x54c>)
 8006282:	689b      	ldr	r3, [r3, #8]
 8006284:	0e1b      	lsrs	r3, r3, #24
 8006286:	f003 030f 	and.w	r3, r3, #15
 800628a:	e006      	b.n	800629a <HAL_RCCEx_GetPeriphCLKFreq+0x36a>
 800628c:	4b7b      	ldr	r3, [pc, #492]	; (800647c <HAL_RCCEx_GetPeriphCLKFreq+0x54c>)
 800628e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006292:	041b      	lsls	r3, r3, #16
 8006294:	0e1b      	lsrs	r3, r3, #24
 8006296:	f003 030f 	and.w	r3, r3, #15
 800629a:	4a7a      	ldr	r2, [pc, #488]	; (8006484 <HAL_RCCEx_GetPeriphCLKFreq+0x554>)
 800629c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80062a0:	637b      	str	r3, [r7, #52]	; 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 80062a2:	f000 bf78 	b.w	8007196 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
            frequency = 0U;
 80062a6:	2300      	movs	r3, #0
 80062a8:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 80062aa:	f000 bf74 	b.w	8007196 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
        }
        default :
        {
          frequency = 0U;
 80062ae:	2300      	movs	r3, #0
 80062b0:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 80062b2:	f000 bf70 	b.w	8007196 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
        }
      }
    }
    else if (srcclk == RCC_SDMMCCLKSOURCE_PLL1)
 80062b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062b8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80062bc:	d108      	bne.n	80062d0 <HAL_RCCEx_GetPeriphCLKFreq+0x3a0>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80062be:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80062c2:	4618      	mov	r0, r3
 80062c4:	f7ff fa26 	bl	8005714 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_P_Frequency;
 80062c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062ca:	637b      	str	r3, [r7, #52]	; 0x34
 80062cc:	f000 bf63 	b.w	8007196 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else
    {
      frequency = 0U;
 80062d0:	2300      	movs	r3, #0
 80062d2:	637b      	str	r3, [r7, #52]	; 0x34
 80062d4:	f000 bf5f 	b.w	8007196 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_USART1)
 80062d8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80062dc:	1e51      	subs	r1, r2, #1
 80062de:	430b      	orrs	r3, r1
 80062e0:	d136      	bne.n	8006350 <HAL_RCCEx_GetPeriphCLKFreq+0x420>
  {
    /* Get the current USART1 source */
    srcclk = __HAL_RCC_GET_USART1_SOURCE();
 80062e2:	4b66      	ldr	r3, [pc, #408]	; (800647c <HAL_RCCEx_GetPeriphCLKFreq+0x54c>)
 80062e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80062e8:	f003 0303 	and.w	r3, r3, #3
 80062ec:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 80062ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d104      	bne.n	80062fe <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
    {
      frequency = HAL_RCC_GetPCLK2Freq();
 80062f4:	f7fe fc22 	bl	8004b3c <HAL_RCC_GetPCLK2Freq>
 80062f8:	6378      	str	r0, [r7, #52]	; 0x34
 80062fa:	f000 bf4c 	b.w	8007196 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if (srcclk == RCC_USART1CLKSOURCE_SYSCLK)
 80062fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006300:	2b01      	cmp	r3, #1
 8006302:	d104      	bne.n	800630e <HAL_RCCEx_GetPeriphCLKFreq+0x3de>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8006304:	f7fe faea 	bl	80048dc <HAL_RCC_GetSysClockFreq>
 8006308:	6378      	str	r0, [r7, #52]	; 0x34
 800630a:	f000 bf44 	b.w	8007196 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 800630e:	4b5b      	ldr	r3, [pc, #364]	; (800647c <HAL_RCCEx_GetPeriphCLKFreq+0x54c>)
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006316:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800631a:	d106      	bne.n	800632a <HAL_RCCEx_GetPeriphCLKFreq+0x3fa>
 800631c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800631e:	2b02      	cmp	r3, #2
 8006320:	d103      	bne.n	800632a <HAL_RCCEx_GetPeriphCLKFreq+0x3fa>
    {
      frequency = HSI_VALUE;
 8006322:	4b59      	ldr	r3, [pc, #356]	; (8006488 <HAL_RCCEx_GetPeriphCLKFreq+0x558>)
 8006324:	637b      	str	r3, [r7, #52]	; 0x34
 8006326:	f000 bf36 	b.w	8007196 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 800632a:	4b54      	ldr	r3, [pc, #336]	; (800647c <HAL_RCCEx_GetPeriphCLKFreq+0x54c>)
 800632c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006330:	f003 0302 	and.w	r3, r3, #2
 8006334:	2b02      	cmp	r3, #2
 8006336:	d107      	bne.n	8006348 <HAL_RCCEx_GetPeriphCLKFreq+0x418>
 8006338:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800633a:	2b03      	cmp	r3, #3
 800633c:	d104      	bne.n	8006348 <HAL_RCCEx_GetPeriphCLKFreq+0x418>
    {
      frequency = LSE_VALUE;
 800633e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006342:	637b      	str	r3, [r7, #52]	; 0x34
 8006344:	f000 bf27 	b.w	8007196 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    /* Clock not enabled for USART1 */
    else
    {
      frequency = 0U;
 8006348:	2300      	movs	r3, #0
 800634a:	637b      	str	r3, [r7, #52]	; 0x34
 800634c:	f000 bf23 	b.w	8007196 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    {
      frequency = 0U;
    }
  }
#endif /* USART2 */
  else if (PeriphClk == RCC_PERIPHCLK_USART3)
 8006350:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006354:	1f11      	subs	r1, r2, #4
 8006356:	430b      	orrs	r3, r1
 8006358:	d136      	bne.n	80063c8 <HAL_RCCEx_GetPeriphCLKFreq+0x498>
  {
    /* Get the current USART3 source */
    srcclk = __HAL_RCC_GET_USART3_SOURCE();
 800635a:	4b48      	ldr	r3, [pc, #288]	; (800647c <HAL_RCCEx_GetPeriphCLKFreq+0x54c>)
 800635c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006360:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006364:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_USART3CLKSOURCE_PCLK1)
 8006366:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006368:	2b00      	cmp	r3, #0
 800636a:	d104      	bne.n	8006376 <HAL_RCCEx_GetPeriphCLKFreq+0x446>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800636c:	f7fe fbd2 	bl	8004b14 <HAL_RCC_GetPCLK1Freq>
 8006370:	6378      	str	r0, [r7, #52]	; 0x34
 8006372:	f000 bf10 	b.w	8007196 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if (srcclk == RCC_USART3CLKSOURCE_SYSCLK)
 8006376:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006378:	2b10      	cmp	r3, #16
 800637a:	d104      	bne.n	8006386 <HAL_RCCEx_GetPeriphCLKFreq+0x456>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800637c:	f7fe faae 	bl	80048dc <HAL_RCC_GetSysClockFreq>
 8006380:	6378      	str	r0, [r7, #52]	; 0x34
 8006382:	f000 bf08 	b.w	8007196 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 8006386:	4b3d      	ldr	r3, [pc, #244]	; (800647c <HAL_RCCEx_GetPeriphCLKFreq+0x54c>)
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800638e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006392:	d106      	bne.n	80063a2 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 8006394:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006396:	2b20      	cmp	r3, #32
 8006398:	d103      	bne.n	80063a2 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
    {
      frequency = HSI_VALUE;
 800639a:	4b3b      	ldr	r3, [pc, #236]	; (8006488 <HAL_RCCEx_GetPeriphCLKFreq+0x558>)
 800639c:	637b      	str	r3, [r7, #52]	; 0x34
 800639e:	f000 befa 	b.w	8007196 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 80063a2:	4b36      	ldr	r3, [pc, #216]	; (800647c <HAL_RCCEx_GetPeriphCLKFreq+0x54c>)
 80063a4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80063a8:	f003 0302 	and.w	r3, r3, #2
 80063ac:	2b02      	cmp	r3, #2
 80063ae:	d107      	bne.n	80063c0 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
 80063b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063b2:	2b30      	cmp	r3, #48	; 0x30
 80063b4:	d104      	bne.n	80063c0 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
    {
      frequency = LSE_VALUE;
 80063b6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80063ba:	637b      	str	r3, [r7, #52]	; 0x34
 80063bc:	f000 beeb 	b.w	8007196 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    /* Clock not enabled for USART3 */
    else
    {
      frequency = 0U;
 80063c0:	2300      	movs	r3, #0
 80063c2:	637b      	str	r3, [r7, #52]	; 0x34
 80063c4:	f000 bee7 	b.w	8007196 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART4)
 80063c8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80063cc:	f1a2 0108 	sub.w	r1, r2, #8
 80063d0:	430b      	orrs	r3, r1
 80063d2:	d136      	bne.n	8006442 <HAL_RCCEx_GetPeriphCLKFreq+0x512>
  {
    /* Get the current UART4 source */
    srcclk = __HAL_RCC_GET_UART4_SOURCE();
 80063d4:	4b29      	ldr	r3, [pc, #164]	; (800647c <HAL_RCCEx_GetPeriphCLKFreq+0x54c>)
 80063d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80063da:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80063de:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_UART4CLKSOURCE_PCLK1)
 80063e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d104      	bne.n	80063f0 <HAL_RCCEx_GetPeriphCLKFreq+0x4c0>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 80063e6:	f7fe fb95 	bl	8004b14 <HAL_RCC_GetPCLK1Freq>
 80063ea:	6378      	str	r0, [r7, #52]	; 0x34
 80063ec:	f000 bed3 	b.w	8007196 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if (srcclk == RCC_UART4CLKSOURCE_SYSCLK)
 80063f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063f2:	2b40      	cmp	r3, #64	; 0x40
 80063f4:	d104      	bne.n	8006400 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 80063f6:	f7fe fa71 	bl	80048dc <HAL_RCC_GetSysClockFreq>
 80063fa:	6378      	str	r0, [r7, #52]	; 0x34
 80063fc:	f000 becb 	b.w	8007196 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_HSI))
 8006400:	4b1e      	ldr	r3, [pc, #120]	; (800647c <HAL_RCCEx_GetPeriphCLKFreq+0x54c>)
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006408:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800640c:	d106      	bne.n	800641c <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>
 800640e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006410:	2b80      	cmp	r3, #128	; 0x80
 8006412:	d103      	bne.n	800641c <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>
    {
      frequency = HSI_VALUE;
 8006414:	4b1c      	ldr	r3, [pc, #112]	; (8006488 <HAL_RCCEx_GetPeriphCLKFreq+0x558>)
 8006416:	637b      	str	r3, [r7, #52]	; 0x34
 8006418:	f000 bebd 	b.w	8007196 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART4CLKSOURCE_LSE))
 800641c:	4b17      	ldr	r3, [pc, #92]	; (800647c <HAL_RCCEx_GetPeriphCLKFreq+0x54c>)
 800641e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006422:	f003 0302 	and.w	r3, r3, #2
 8006426:	2b02      	cmp	r3, #2
 8006428:	d107      	bne.n	800643a <HAL_RCCEx_GetPeriphCLKFreq+0x50a>
 800642a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800642c:	2bc0      	cmp	r3, #192	; 0xc0
 800642e:	d104      	bne.n	800643a <HAL_RCCEx_GetPeriphCLKFreq+0x50a>
    {
      frequency = LSE_VALUE;
 8006430:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006434:	637b      	str	r3, [r7, #52]	; 0x34
 8006436:	f000 beae 	b.w	8007196 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    /* Clock not enabled for UART4 */
    else
    {
      frequency = 0U;
 800643a:	2300      	movs	r3, #0
 800643c:	637b      	str	r3, [r7, #52]	; 0x34
 800643e:	f000 beaa 	b.w	8007196 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART5)
 8006442:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006446:	f1a2 0110 	sub.w	r1, r2, #16
 800644a:	430b      	orrs	r3, r1
 800644c:	d141      	bne.n	80064d2 <HAL_RCCEx_GetPeriphCLKFreq+0x5a2>
  {
    /* Get the current UART5 source */
    srcclk = __HAL_RCC_GET_UART5_SOURCE();
 800644e:	4b0b      	ldr	r3, [pc, #44]	; (800647c <HAL_RCCEx_GetPeriphCLKFreq+0x54c>)
 8006450:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006454:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006458:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_UART5CLKSOURCE_PCLK1)
 800645a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800645c:	2b00      	cmp	r3, #0
 800645e:	d104      	bne.n	800646a <HAL_RCCEx_GetPeriphCLKFreq+0x53a>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8006460:	f7fe fb58 	bl	8004b14 <HAL_RCC_GetPCLK1Freq>
 8006464:	6378      	str	r0, [r7, #52]	; 0x34
 8006466:	f000 be96 	b.w	8007196 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if (srcclk == RCC_UART5CLKSOURCE_SYSCLK)
 800646a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800646c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006470:	d10c      	bne.n	800648c <HAL_RCCEx_GetPeriphCLKFreq+0x55c>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8006472:	f7fe fa33 	bl	80048dc <HAL_RCC_GetSysClockFreq>
 8006476:	6378      	str	r0, [r7, #52]	; 0x34
 8006478:	f000 be8d 	b.w	8007196 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
 800647c:	46020c00 	.word	0x46020c00
 8006480:	02dc6c00 	.word	0x02dc6c00
 8006484:	08009fa0 	.word	0x08009fa0
 8006488:	00f42400 	.word	0x00f42400
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_HSI))
 800648c:	4baa      	ldr	r3, [pc, #680]	; (8006738 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006494:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006498:	d107      	bne.n	80064aa <HAL_RCCEx_GetPeriphCLKFreq+0x57a>
 800649a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800649c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80064a0:	d103      	bne.n	80064aa <HAL_RCCEx_GetPeriphCLKFreq+0x57a>
    {
      frequency = HSI_VALUE;
 80064a2:	4ba6      	ldr	r3, [pc, #664]	; (800673c <HAL_RCCEx_GetPeriphCLKFreq+0x80c>)
 80064a4:	637b      	str	r3, [r7, #52]	; 0x34
 80064a6:	f000 be76 	b.w	8007196 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART5CLKSOURCE_LSE))
 80064aa:	4ba3      	ldr	r3, [pc, #652]	; (8006738 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 80064ac:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80064b0:	f003 0302 	and.w	r3, r3, #2
 80064b4:	2b02      	cmp	r3, #2
 80064b6:	d108      	bne.n	80064ca <HAL_RCCEx_GetPeriphCLKFreq+0x59a>
 80064b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064ba:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80064be:	d104      	bne.n	80064ca <HAL_RCCEx_GetPeriphCLKFreq+0x59a>
    {
      frequency = LSE_VALUE;
 80064c0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80064c4:	637b      	str	r3, [r7, #52]	; 0x34
 80064c6:	f000 be66 	b.w	8007196 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    /* Clock not enabled for UART5 */
    else
    {
      frequency = 0U;
 80064ca:	2300      	movs	r3, #0
 80064cc:	637b      	str	r3, [r7, #52]	; 0x34
 80064ce:	f000 be62 	b.w	8007196 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    {
      frequency = 0U;
    }
  }
#endif /* USART6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPUART1)
 80064d2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80064d6:	f1a2 0120 	sub.w	r1, r2, #32
 80064da:	430b      	orrs	r3, r1
 80064dc:	d158      	bne.n	8006590 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
  {
    /* Get the current LPUART1 source */
    srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 80064de:	4b96      	ldr	r3, [pc, #600]	; (8006738 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 80064e0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80064e4:	f003 0307 	and.w	r3, r3, #7
 80064e8:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_LPUART1CLKSOURCE_PCLK3)
 80064ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d104      	bne.n	80064fa <HAL_RCCEx_GetPeriphCLKFreq+0x5ca>
    {
      frequency = HAL_RCC_GetPCLK3Freq();
 80064f0:	f7fe fb38 	bl	8004b64 <HAL_RCC_GetPCLK3Freq>
 80064f4:	6378      	str	r0, [r7, #52]	; 0x34
 80064f6:	f000 be4e 	b.w	8007196 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if (srcclk == RCC_LPUART1CLKSOURCE_SYSCLK)
 80064fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064fc:	2b01      	cmp	r3, #1
 80064fe:	d104      	bne.n	800650a <HAL_RCCEx_GetPeriphCLKFreq+0x5da>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8006500:	f7fe f9ec 	bl	80048dc <HAL_RCC_GetSysClockFreq>
 8006504:	6378      	str	r0, [r7, #52]	; 0x34
 8006506:	f000 be46 	b.w	8007196 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 800650a:	4b8b      	ldr	r3, [pc, #556]	; (8006738 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006512:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006516:	d106      	bne.n	8006526 <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
 8006518:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800651a:	2b02      	cmp	r3, #2
 800651c:	d103      	bne.n	8006526 <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
    {
      frequency = HSI_VALUE;
 800651e:	4b87      	ldr	r3, [pc, #540]	; (800673c <HAL_RCCEx_GetPeriphCLKFreq+0x80c>)
 8006520:	637b      	str	r3, [r7, #52]	; 0x34
 8006522:	f000 be38 	b.w	8007196 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 8006526:	4b84      	ldr	r3, [pc, #528]	; (8006738 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 8006528:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800652c:	f003 0302 	and.w	r3, r3, #2
 8006530:	2b02      	cmp	r3, #2
 8006532:	d107      	bne.n	8006544 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 8006534:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006536:	2b03      	cmp	r3, #3
 8006538:	d104      	bne.n	8006544 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
    {
      frequency = LSE_VALUE;
 800653a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800653e:	637b      	str	r3, [r7, #52]	; 0x34
 8006540:	f000 be29 	b.w	8007196 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_MSIK))
 8006544:	4b7c      	ldr	r3, [pc, #496]	; (8006738 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	f003 0320 	and.w	r3, r3, #32
 800654c:	2b20      	cmp	r3, #32
 800654e:	d11b      	bne.n	8006588 <HAL_RCCEx_GetPeriphCLKFreq+0x658>
 8006550:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006552:	2b04      	cmp	r3, #4
 8006554:	d118      	bne.n	8006588 <HAL_RCCEx_GetPeriphCLKFreq+0x658>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8006556:	4b78      	ldr	r3, [pc, #480]	; (8006738 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 8006558:	689b      	ldr	r3, [r3, #8]
 800655a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800655e:	2b00      	cmp	r3, #0
 8006560:	d005      	beq.n	800656e <HAL_RCCEx_GetPeriphCLKFreq+0x63e>
 8006562:	4b75      	ldr	r3, [pc, #468]	; (8006738 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 8006564:	689b      	ldr	r3, [r3, #8]
 8006566:	0e1b      	lsrs	r3, r3, #24
 8006568:	f003 030f 	and.w	r3, r3, #15
 800656c:	e006      	b.n	800657c <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 800656e:	4b72      	ldr	r3, [pc, #456]	; (8006738 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 8006570:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006574:	041b      	lsls	r3, r3, #16
 8006576:	0e1b      	lsrs	r3, r3, #24
 8006578:	f003 030f 	and.w	r3, r3, #15
 800657c:	4a70      	ldr	r2, [pc, #448]	; (8006740 <HAL_RCCEx_GetPeriphCLKFreq+0x810>)
 800657e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006582:	637b      	str	r3, [r7, #52]	; 0x34
 8006584:	f000 be07 	b.w	8007196 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    /* Clock not enabled for LPUART1 */
    else
    {
      frequency = 0U;
 8006588:	2300      	movs	r3, #0
 800658a:	637b      	str	r3, [r7, #52]	; 0x34
 800658c:	f000 be03 	b.w	8007196 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADCDAC)
 8006590:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006594:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 8006598:	430b      	orrs	r3, r1
 800659a:	d16c      	bne.n	8006676 <HAL_RCCEx_GetPeriphCLKFreq+0x746>
  {
    srcclk = __HAL_RCC_GET_ADCDAC_SOURCE();
 800659c:	4b66      	ldr	r3, [pc, #408]	; (8006738 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 800659e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80065a2:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 80065a6:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_ADCDACCLKSOURCE_SYSCLK)
 80065a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80065ae:	d104      	bne.n	80065ba <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 80065b0:	f7fe f994 	bl	80048dc <HAL_RCC_GetSysClockFreq>
 80065b4:	6378      	str	r0, [r7, #52]	; 0x34
 80065b6:	f000 bdee 	b.w	8007196 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_PLL2)
 80065ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065bc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80065c0:	d108      	bne.n	80065d4 <HAL_RCCEx_GetPeriphCLKFreq+0x6a4>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80065c2:	f107 0318 	add.w	r3, r7, #24
 80065c6:	4618      	mov	r0, r3
 80065c8:	f7ff f9fe 	bl	80059c8 <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_R_Frequency;
 80065cc:	6a3b      	ldr	r3, [r7, #32]
 80065ce:	637b      	str	r3, [r7, #52]	; 0x34
 80065d0:	f000 bde1 	b.w	8007196 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_HCLK)
 80065d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d104      	bne.n	80065e4 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
    {
      frequency = HAL_RCC_GetHCLKFreq();
 80065da:	f7fe fa81 	bl	8004ae0 <HAL_RCC_GetHCLKFreq>
 80065de:	6378      	str	r0, [r7, #52]	; 0x34
 80065e0:	f000 bdd9 	b.w	8007196 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_MSIK)
 80065e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065e6:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 80065ea:	d122      	bne.n	8006632 <HAL_RCCEx_GetPeriphCLKFreq+0x702>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 80065ec:	4b52      	ldr	r3, [pc, #328]	; (8006738 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	f003 0320 	and.w	r3, r3, #32
 80065f4:	2b20      	cmp	r3, #32
 80065f6:	d118      	bne.n	800662a <HAL_RCCEx_GetPeriphCLKFreq+0x6fa>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80065f8:	4b4f      	ldr	r3, [pc, #316]	; (8006738 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 80065fa:	689b      	ldr	r3, [r3, #8]
 80065fc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006600:	2b00      	cmp	r3, #0
 8006602:	d005      	beq.n	8006610 <HAL_RCCEx_GetPeriphCLKFreq+0x6e0>
 8006604:	4b4c      	ldr	r3, [pc, #304]	; (8006738 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 8006606:	689b      	ldr	r3, [r3, #8]
 8006608:	0e1b      	lsrs	r3, r3, #24
 800660a:	f003 030f 	and.w	r3, r3, #15
 800660e:	e006      	b.n	800661e <HAL_RCCEx_GetPeriphCLKFreq+0x6ee>
 8006610:	4b49      	ldr	r3, [pc, #292]	; (8006738 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 8006612:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006616:	041b      	lsls	r3, r3, #16
 8006618:	0e1b      	lsrs	r3, r3, #24
 800661a:	f003 030f 	and.w	r3, r3, #15
 800661e:	4a48      	ldr	r2, [pc, #288]	; (8006740 <HAL_RCCEx_GetPeriphCLKFreq+0x810>)
 8006620:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006624:	637b      	str	r3, [r7, #52]	; 0x34
 8006626:	f000 bdb6 	b.w	8007196 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
      }
      else
      {
        frequency = 0U;
 800662a:	2300      	movs	r3, #0
 800662c:	637b      	str	r3, [r7, #52]	; 0x34
 800662e:	f000 bdb2 	b.w	8007196 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSE))
 8006632:	4b41      	ldr	r3, [pc, #260]	; (8006738 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800663a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800663e:	d107      	bne.n	8006650 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
 8006640:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006642:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006646:	d103      	bne.n	8006650 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
    {
      frequency = HSE_VALUE;
 8006648:	4b3c      	ldr	r3, [pc, #240]	; (800673c <HAL_RCCEx_GetPeriphCLKFreq+0x80c>)
 800664a:	637b      	str	r3, [r7, #52]	; 0x34
 800664c:	f000 bda3 	b.w	8007196 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSI))
 8006650:	4b39      	ldr	r3, [pc, #228]	; (8006738 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006658:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800665c:	d107      	bne.n	800666e <HAL_RCCEx_GetPeriphCLKFreq+0x73e>
 800665e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006660:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006664:	d103      	bne.n	800666e <HAL_RCCEx_GetPeriphCLKFreq+0x73e>
    {
      frequency = HSI_VALUE;
 8006666:	4b35      	ldr	r3, [pc, #212]	; (800673c <HAL_RCCEx_GetPeriphCLKFreq+0x80c>)
 8006668:	637b      	str	r3, [r7, #52]	; 0x34
 800666a:	f000 bd94 	b.w	8007196 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    /* Clock not enabled for ADC */
    else
    {
      frequency = 0U;
 800666e:	2300      	movs	r3, #0
 8006670:	637b      	str	r3, [r7, #52]	; 0x34
 8006672:	f000 bd90 	b.w	8007196 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_MDF1)
 8006676:	e9d7 2300 	ldrd	r2, r3, [r7]
 800667a:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 800667e:	430b      	orrs	r3, r1
 8006680:	d160      	bne.n	8006744 <HAL_RCCEx_GetPeriphCLKFreq+0x814>
  {
    /* Get the current MDF1 source */
    srcclk = __HAL_RCC_GET_MDF1_SOURCE();
 8006682:	4b2d      	ldr	r3, [pc, #180]	; (8006738 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 8006684:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8006688:	f003 0307 	and.w	r3, r3, #7
 800668c:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 800668e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006690:	2b04      	cmp	r3, #4
 8006692:	d84c      	bhi.n	800672e <HAL_RCCEx_GetPeriphCLKFreq+0x7fe>
 8006694:	a201      	add	r2, pc, #4	; (adr r2, 800669c <HAL_RCCEx_GetPeriphCLKFreq+0x76c>)
 8006696:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800669a:	bf00      	nop
 800669c:	080066d5 	.word	0x080066d5
 80066a0:	080066b1 	.word	0x080066b1
 80066a4:	080066c3 	.word	0x080066c3
 80066a8:	080066df 	.word	0x080066df
 80066ac:	080066e9 	.word	0x080066e9
    {
      case RCC_MDF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80066b0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80066b4:	4618      	mov	r0, r3
 80066b6:	f7ff f82d 	bl	8005714 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 80066ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066bc:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80066be:	f000 bd6a 	b.w	8007196 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_MDF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80066c2:	f107 030c 	add.w	r3, r7, #12
 80066c6:	4618      	mov	r0, r3
 80066c8:	f7ff fad8 	bl	8005c7c <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 80066cc:	693b      	ldr	r3, [r7, #16]
 80066ce:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80066d0:	f000 bd61 	b.w	8007196 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_MDF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 80066d4:	f7fe fa04 	bl	8004ae0 <HAL_RCC_GetHCLKFreq>
 80066d8:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 80066da:	f000 bd5c 	b.w	8007196 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_MDF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 80066de:	f64b 3380 	movw	r3, #48000	; 0xbb80
 80066e2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80066e4:	f000 bd57 	b.w	8007196 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_MDF1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 80066e8:	4b13      	ldr	r3, [pc, #76]	; (8006738 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	f003 0320 	and.w	r3, r3, #32
 80066f0:	2b20      	cmp	r3, #32
 80066f2:	d118      	bne.n	8006726 <HAL_RCCEx_GetPeriphCLKFreq+0x7f6>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80066f4:	4b10      	ldr	r3, [pc, #64]	; (8006738 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 80066f6:	689b      	ldr	r3, [r3, #8]
 80066f8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d005      	beq.n	800670c <HAL_RCCEx_GetPeriphCLKFreq+0x7dc>
 8006700:	4b0d      	ldr	r3, [pc, #52]	; (8006738 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 8006702:	689b      	ldr	r3, [r3, #8]
 8006704:	0e1b      	lsrs	r3, r3, #24
 8006706:	f003 030f 	and.w	r3, r3, #15
 800670a:	e006      	b.n	800671a <HAL_RCCEx_GetPeriphCLKFreq+0x7ea>
 800670c:	4b0a      	ldr	r3, [pc, #40]	; (8006738 <HAL_RCCEx_GetPeriphCLKFreq+0x808>)
 800670e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006712:	041b      	lsls	r3, r3, #16
 8006714:	0e1b      	lsrs	r3, r3, #24
 8006716:	f003 030f 	and.w	r3, r3, #15
 800671a:	4a09      	ldr	r2, [pc, #36]	; (8006740 <HAL_RCCEx_GetPeriphCLKFreq+0x810>)
 800671c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006720:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8006722:	f000 bd38 	b.w	8007196 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
          frequency = 0U;
 8006726:	2300      	movs	r3, #0
 8006728:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800672a:	f000 bd34 	b.w	8007196 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      default:

        frequency = 0U;
 800672e:	2300      	movs	r3, #0
 8006730:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006732:	f000 bd30 	b.w	8007196 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
 8006736:	bf00      	nop
 8006738:	46020c00 	.word	0x46020c00
 800673c:	00f42400 	.word	0x00f42400
 8006740:	08009fa0 	.word	0x08009fa0
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADF1)
 8006744:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006748:	f5a2 3100 	sub.w	r1, r2, #131072	; 0x20000
 800674c:	430b      	orrs	r3, r1
 800674e:	d167      	bne.n	8006820 <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
  {
    /* Get the current ADF1 source */
    srcclk = __HAL_RCC_GET_ADF1_SOURCE();
 8006750:	4ba0      	ldr	r3, [pc, #640]	; (80069d4 <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>)
 8006752:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006756:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 800675a:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 800675c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800675e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006762:	d036      	beq.n	80067d2 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 8006764:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006766:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800676a:	d855      	bhi.n	8006818 <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
 800676c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800676e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006772:	d029      	beq.n	80067c8 <HAL_RCCEx_GetPeriphCLKFreq+0x898>
 8006774:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006776:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800677a:	d84d      	bhi.n	8006818 <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
 800677c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800677e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006782:	d013      	beq.n	80067ac <HAL_RCCEx_GetPeriphCLKFreq+0x87c>
 8006784:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006786:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800678a:	d845      	bhi.n	8006818 <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
 800678c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800678e:	2b00      	cmp	r3, #0
 8006790:	d015      	beq.n	80067be <HAL_RCCEx_GetPeriphCLKFreq+0x88e>
 8006792:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006794:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006798:	d13e      	bne.n	8006818 <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
    {
      case RCC_ADF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800679a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800679e:	4618      	mov	r0, r3
 80067a0:	f7fe ffb8 	bl	8005714 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 80067a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067a6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80067a8:	f000 bcf5 	b.w	8007196 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_ADF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80067ac:	f107 030c 	add.w	r3, r7, #12
 80067b0:	4618      	mov	r0, r3
 80067b2:	f7ff fa63 	bl	8005c7c <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 80067b6:	693b      	ldr	r3, [r7, #16]
 80067b8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80067ba:	f000 bcec 	b.w	8007196 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_ADF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 80067be:	f7fe f98f 	bl	8004ae0 <HAL_RCC_GetHCLKFreq>
 80067c2:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 80067c4:	f000 bce7 	b.w	8007196 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_ADF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 80067c8:	f64b 3380 	movw	r3, #48000	; 0xbb80
 80067cc:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80067ce:	f000 bce2 	b.w	8007196 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_ADF1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 80067d2:	4b80      	ldr	r3, [pc, #512]	; (80069d4 <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>)
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	f003 0320 	and.w	r3, r3, #32
 80067da:	2b20      	cmp	r3, #32
 80067dc:	d118      	bne.n	8006810 <HAL_RCCEx_GetPeriphCLKFreq+0x8e0>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80067de:	4b7d      	ldr	r3, [pc, #500]	; (80069d4 <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>)
 80067e0:	689b      	ldr	r3, [r3, #8]
 80067e2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d005      	beq.n	80067f6 <HAL_RCCEx_GetPeriphCLKFreq+0x8c6>
 80067ea:	4b7a      	ldr	r3, [pc, #488]	; (80069d4 <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>)
 80067ec:	689b      	ldr	r3, [r3, #8]
 80067ee:	0e1b      	lsrs	r3, r3, #24
 80067f0:	f003 030f 	and.w	r3, r3, #15
 80067f4:	e006      	b.n	8006804 <HAL_RCCEx_GetPeriphCLKFreq+0x8d4>
 80067f6:	4b77      	ldr	r3, [pc, #476]	; (80069d4 <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>)
 80067f8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80067fc:	041b      	lsls	r3, r3, #16
 80067fe:	0e1b      	lsrs	r3, r3, #24
 8006800:	f003 030f 	and.w	r3, r3, #15
 8006804:	4a74      	ldr	r2, [pc, #464]	; (80069d8 <HAL_RCCEx_GetPeriphCLKFreq+0xaa8>)
 8006806:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800680a:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800680c:	f000 bcc3 	b.w	8007196 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
          frequency = 0U;
 8006810:	2300      	movs	r3, #0
 8006812:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006814:	f000 bcbf 	b.w	8007196 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      default:

        frequency = 0U;
 8006818:	2300      	movs	r3, #0
 800681a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800681c:	f000 bcbb 	b.w	8007196 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C1)
 8006820:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006824:	f1a2 0140 	sub.w	r1, r2, #64	; 0x40
 8006828:	430b      	orrs	r3, r1
 800682a:	d14c      	bne.n	80068c6 <HAL_RCCEx_GetPeriphCLKFreq+0x996>
  {
    /* Get the current I2C1 source */
    srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 800682c:	4b69      	ldr	r3, [pc, #420]	; (80069d4 <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>)
 800682e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006832:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006836:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 8006838:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800683a:	2b00      	cmp	r3, #0
 800683c:	d104      	bne.n	8006848 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800683e:	f7fe f969 	bl	8004b14 <HAL_RCC_GetPCLK1Freq>
 8006842:	6378      	str	r0, [r7, #52]	; 0x34
 8006844:	f000 bca7 	b.w	8007196 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if (srcclk == RCC_I2C1CLKSOURCE_SYSCLK)
 8006848:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800684a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800684e:	d104      	bne.n	800685a <HAL_RCCEx_GetPeriphCLKFreq+0x92a>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8006850:	f7fe f844 	bl	80048dc <HAL_RCC_GetSysClockFreq>
 8006854:	6378      	str	r0, [r7, #52]	; 0x34
 8006856:	f000 bc9e 	b.w	8007196 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 800685a:	4b5e      	ldr	r3, [pc, #376]	; (80069d4 <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>)
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006862:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006866:	d107      	bne.n	8006878 <HAL_RCCEx_GetPeriphCLKFreq+0x948>
 8006868:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800686a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800686e:	d103      	bne.n	8006878 <HAL_RCCEx_GetPeriphCLKFreq+0x948>
    {
      frequency = HSI_VALUE;
 8006870:	4b5a      	ldr	r3, [pc, #360]	; (80069dc <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 8006872:	637b      	str	r3, [r7, #52]	; 0x34
 8006874:	f000 bc8f 	b.w	8007196 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C1CLKSOURCE_MSIK))
 8006878:	4b56      	ldr	r3, [pc, #344]	; (80069d4 <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>)
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	f003 0320 	and.w	r3, r3, #32
 8006880:	2b20      	cmp	r3, #32
 8006882:	d11c      	bne.n	80068be <HAL_RCCEx_GetPeriphCLKFreq+0x98e>
 8006884:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006886:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800688a:	d118      	bne.n	80068be <HAL_RCCEx_GetPeriphCLKFreq+0x98e>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800688c:	4b51      	ldr	r3, [pc, #324]	; (80069d4 <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>)
 800688e:	689b      	ldr	r3, [r3, #8]
 8006890:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006894:	2b00      	cmp	r3, #0
 8006896:	d005      	beq.n	80068a4 <HAL_RCCEx_GetPeriphCLKFreq+0x974>
 8006898:	4b4e      	ldr	r3, [pc, #312]	; (80069d4 <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>)
 800689a:	689b      	ldr	r3, [r3, #8]
 800689c:	0e1b      	lsrs	r3, r3, #24
 800689e:	f003 030f 	and.w	r3, r3, #15
 80068a2:	e006      	b.n	80068b2 <HAL_RCCEx_GetPeriphCLKFreq+0x982>
 80068a4:	4b4b      	ldr	r3, [pc, #300]	; (80069d4 <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>)
 80068a6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80068aa:	041b      	lsls	r3, r3, #16
 80068ac:	0e1b      	lsrs	r3, r3, #24
 80068ae:	f003 030f 	and.w	r3, r3, #15
 80068b2:	4a49      	ldr	r2, [pc, #292]	; (80069d8 <HAL_RCCEx_GetPeriphCLKFreq+0xaa8>)
 80068b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80068b8:	637b      	str	r3, [r7, #52]	; 0x34
 80068ba:	f000 bc6c 	b.w	8007196 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    /* Clock not enabled for I2C1 */
    else
    {
      frequency = 0U;
 80068be:	2300      	movs	r3, #0
 80068c0:	637b      	str	r3, [r7, #52]	; 0x34
 80068c2:	f000 bc68 	b.w	8007196 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C2)
 80068c6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80068ca:	f1a2 0180 	sub.w	r1, r2, #128	; 0x80
 80068ce:	430b      	orrs	r3, r1
 80068d0:	d14c      	bne.n	800696c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>
  {
    /* Get the current I2C2 source */
    srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 80068d2:	4b40      	ldr	r3, [pc, #256]	; (80069d4 <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>)
 80068d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80068d8:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80068dc:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 80068de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d104      	bne.n	80068ee <HAL_RCCEx_GetPeriphCLKFreq+0x9be>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 80068e4:	f7fe f916 	bl	8004b14 <HAL_RCC_GetPCLK1Freq>
 80068e8:	6378      	str	r0, [r7, #52]	; 0x34
 80068ea:	f000 bc54 	b.w	8007196 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if (srcclk == RCC_I2C2CLKSOURCE_SYSCLK)
 80068ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068f0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80068f4:	d104      	bne.n	8006900 <HAL_RCCEx_GetPeriphCLKFreq+0x9d0>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 80068f6:	f7fd fff1 	bl	80048dc <HAL_RCC_GetSysClockFreq>
 80068fa:	6378      	str	r0, [r7, #52]	; 0x34
 80068fc:	f000 bc4b 	b.w	8007196 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 8006900:	4b34      	ldr	r3, [pc, #208]	; (80069d4 <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>)
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006908:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800690c:	d107      	bne.n	800691e <HAL_RCCEx_GetPeriphCLKFreq+0x9ee>
 800690e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006910:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006914:	d103      	bne.n	800691e <HAL_RCCEx_GetPeriphCLKFreq+0x9ee>
    {
      frequency = HSI_VALUE;
 8006916:	4b31      	ldr	r3, [pc, #196]	; (80069dc <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 8006918:	637b      	str	r3, [r7, #52]	; 0x34
 800691a:	f000 bc3c 	b.w	8007196 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C2CLKSOURCE_MSIK))
 800691e:	4b2d      	ldr	r3, [pc, #180]	; (80069d4 <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>)
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	f003 0320 	and.w	r3, r3, #32
 8006926:	2b20      	cmp	r3, #32
 8006928:	d11c      	bne.n	8006964 <HAL_RCCEx_GetPeriphCLKFreq+0xa34>
 800692a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800692c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006930:	d118      	bne.n	8006964 <HAL_RCCEx_GetPeriphCLKFreq+0xa34>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8006932:	4b28      	ldr	r3, [pc, #160]	; (80069d4 <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>)
 8006934:	689b      	ldr	r3, [r3, #8]
 8006936:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800693a:	2b00      	cmp	r3, #0
 800693c:	d005      	beq.n	800694a <HAL_RCCEx_GetPeriphCLKFreq+0xa1a>
 800693e:	4b25      	ldr	r3, [pc, #148]	; (80069d4 <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>)
 8006940:	689b      	ldr	r3, [r3, #8]
 8006942:	0e1b      	lsrs	r3, r3, #24
 8006944:	f003 030f 	and.w	r3, r3, #15
 8006948:	e006      	b.n	8006958 <HAL_RCCEx_GetPeriphCLKFreq+0xa28>
 800694a:	4b22      	ldr	r3, [pc, #136]	; (80069d4 <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>)
 800694c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006950:	041b      	lsls	r3, r3, #16
 8006952:	0e1b      	lsrs	r3, r3, #24
 8006954:	f003 030f 	and.w	r3, r3, #15
 8006958:	4a1f      	ldr	r2, [pc, #124]	; (80069d8 <HAL_RCCEx_GetPeriphCLKFreq+0xaa8>)
 800695a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800695e:	637b      	str	r3, [r7, #52]	; 0x34
 8006960:	f000 bc19 	b.w	8007196 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    /* Clock not enabled for I2C2 */
    else
    {
      frequency = 0U;
 8006964:	2300      	movs	r3, #0
 8006966:	637b      	str	r3, [r7, #52]	; 0x34
 8006968:	f000 bc15 	b.w	8007196 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C3)
 800696c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006970:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 8006974:	430b      	orrs	r3, r1
 8006976:	d157      	bne.n	8006a28 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>
  {
    /* Get the current I2C3 source */
    srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 8006978:	4b16      	ldr	r3, [pc, #88]	; (80069d4 <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>)
 800697a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800697e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006982:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 8006984:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006986:	2bc0      	cmp	r3, #192	; 0xc0
 8006988:	d02a      	beq.n	80069e0 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>
 800698a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800698c:	2bc0      	cmp	r3, #192	; 0xc0
 800698e:	d848      	bhi.n	8006a22 <HAL_RCCEx_GetPeriphCLKFreq+0xaf2>
 8006990:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006992:	2b80      	cmp	r3, #128	; 0x80
 8006994:	d00d      	beq.n	80069b2 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 8006996:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006998:	2b80      	cmp	r3, #128	; 0x80
 800699a:	d842      	bhi.n	8006a22 <HAL_RCCEx_GetPeriphCLKFreq+0xaf2>
 800699c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d003      	beq.n	80069aa <HAL_RCCEx_GetPeriphCLKFreq+0xa7a>
 80069a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069a4:	2b40      	cmp	r3, #64	; 0x40
 80069a6:	d011      	beq.n	80069cc <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 80069a8:	e03b      	b.n	8006a22 <HAL_RCCEx_GetPeriphCLKFreq+0xaf2>
    {
      case RCC_I2C3CLKSOURCE_PCLK3:
      {
        frequency = HAL_RCC_GetPCLK3Freq();
 80069aa:	f7fe f8db 	bl	8004b64 <HAL_RCC_GetPCLK3Freq>
 80069ae:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 80069b0:	e3f1      	b.n	8007196 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
      }
      case RCC_I2C3CLKSOURCE_HSI:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80069b2:	4b08      	ldr	r3, [pc, #32]	; (80069d4 <HAL_RCCEx_GetPeriphCLKFreq+0xaa4>)
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80069ba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80069be:	d102      	bne.n	80069c6 <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSI_VALUE;
 80069c0:	4b06      	ldr	r3, [pc, #24]	; (80069dc <HAL_RCCEx_GetPeriphCLKFreq+0xaac>)
 80069c2:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80069c4:	e3e7      	b.n	8007196 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
          frequency = 0U;
 80069c6:	2300      	movs	r3, #0
 80069c8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80069ca:	e3e4      	b.n	8007196 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
      }
      case RCC_I2C3CLKSOURCE_SYSCLK:
      {
        frequency = HAL_RCC_GetSysClockFreq();
 80069cc:	f7fd ff86 	bl	80048dc <HAL_RCC_GetSysClockFreq>
 80069d0:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 80069d2:	e3e0      	b.n	8007196 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
 80069d4:	46020c00 	.word	0x46020c00
 80069d8:	08009fa0 	.word	0x08009fa0
 80069dc:	00f42400 	.word	0x00f42400
      }
      case RCC_I2C3CLKSOURCE_MSIK:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 80069e0:	4ba3      	ldr	r3, [pc, #652]	; (8006c70 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	f003 0320 	and.w	r3, r3, #32
 80069e8:	2b20      	cmp	r3, #32
 80069ea:	d117      	bne.n	8006a1c <HAL_RCCEx_GetPeriphCLKFreq+0xaec>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80069ec:	4ba0      	ldr	r3, [pc, #640]	; (8006c70 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 80069ee:	689b      	ldr	r3, [r3, #8]
 80069f0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d005      	beq.n	8006a04 <HAL_RCCEx_GetPeriphCLKFreq+0xad4>
 80069f8:	4b9d      	ldr	r3, [pc, #628]	; (8006c70 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 80069fa:	689b      	ldr	r3, [r3, #8]
 80069fc:	0e1b      	lsrs	r3, r3, #24
 80069fe:	f003 030f 	and.w	r3, r3, #15
 8006a02:	e006      	b.n	8006a12 <HAL_RCCEx_GetPeriphCLKFreq+0xae2>
 8006a04:	4b9a      	ldr	r3, [pc, #616]	; (8006c70 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8006a06:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006a0a:	041b      	lsls	r3, r3, #16
 8006a0c:	0e1b      	lsrs	r3, r3, #24
 8006a0e:	f003 030f 	and.w	r3, r3, #15
 8006a12:	4a98      	ldr	r2, [pc, #608]	; (8006c74 <HAL_RCCEx_GetPeriphCLKFreq+0xd44>)
 8006a14:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006a18:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8006a1a:	e3bc      	b.n	8007196 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
          frequency = 0U;
 8006a1c:	2300      	movs	r3, #0
 8006a1e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006a20:	e3b9      	b.n	8007196 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
      }
      default:
      {
        frequency = 0U;
 8006a22:	2300      	movs	r3, #0
 8006a24:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006a26:	e3b6      	b.n	8007196 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C4)
 8006a28:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006a2c:	f5a2 0180 	sub.w	r1, r2, #4194304	; 0x400000
 8006a30:	430b      	orrs	r3, r1
 8006a32:	d147      	bne.n	8006ac4 <HAL_RCCEx_GetPeriphCLKFreq+0xb94>
  {
    /* Get the current I2C4 source */
    srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 8006a34:	4b8e      	ldr	r3, [pc, #568]	; (8006c70 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8006a36:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006a3a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8006a3e:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_I2C4CLKSOURCE_PCLK1)
 8006a40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d103      	bne.n	8006a4e <HAL_RCCEx_GetPeriphCLKFreq+0xb1e>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8006a46:	f7fe f865 	bl	8004b14 <HAL_RCC_GetPCLK1Freq>
 8006a4a:	6378      	str	r0, [r7, #52]	; 0x34
 8006a4c:	e3a3      	b.n	8007196 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if (srcclk == RCC_I2C4CLKSOURCE_SYSCLK)
 8006a4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a50:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006a54:	d103      	bne.n	8006a5e <HAL_RCCEx_GetPeriphCLKFreq+0xb2e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8006a56:	f7fd ff41 	bl	80048dc <HAL_RCC_GetSysClockFreq>
 8006a5a:	6378      	str	r0, [r7, #52]	; 0x34
 8006a5c:	e39b      	b.n	8007196 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C4CLKSOURCE_HSI))
 8006a5e:	4b84      	ldr	r3, [pc, #528]	; (8006c70 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006a66:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006a6a:	d106      	bne.n	8006a7a <HAL_RCCEx_GetPeriphCLKFreq+0xb4a>
 8006a6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a6e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006a72:	d102      	bne.n	8006a7a <HAL_RCCEx_GetPeriphCLKFreq+0xb4a>
    {
      frequency = HSI_VALUE;
 8006a74:	4b80      	ldr	r3, [pc, #512]	; (8006c78 <HAL_RCCEx_GetPeriphCLKFreq+0xd48>)
 8006a76:	637b      	str	r3, [r7, #52]	; 0x34
 8006a78:	e38d      	b.n	8007196 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C4CLKSOURCE_MSIK))
 8006a7a:	4b7d      	ldr	r3, [pc, #500]	; (8006c70 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	f003 0320 	and.w	r3, r3, #32
 8006a82:	2b20      	cmp	r3, #32
 8006a84:	d11b      	bne.n	8006abe <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
 8006a86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a88:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8006a8c:	d117      	bne.n	8006abe <HAL_RCCEx_GetPeriphCLKFreq+0xb8e>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8006a8e:	4b78      	ldr	r3, [pc, #480]	; (8006c70 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8006a90:	689b      	ldr	r3, [r3, #8]
 8006a92:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d005      	beq.n	8006aa6 <HAL_RCCEx_GetPeriphCLKFreq+0xb76>
 8006a9a:	4b75      	ldr	r3, [pc, #468]	; (8006c70 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8006a9c:	689b      	ldr	r3, [r3, #8]
 8006a9e:	0e1b      	lsrs	r3, r3, #24
 8006aa0:	f003 030f 	and.w	r3, r3, #15
 8006aa4:	e006      	b.n	8006ab4 <HAL_RCCEx_GetPeriphCLKFreq+0xb84>
 8006aa6:	4b72      	ldr	r3, [pc, #456]	; (8006c70 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8006aa8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006aac:	041b      	lsls	r3, r3, #16
 8006aae:	0e1b      	lsrs	r3, r3, #24
 8006ab0:	f003 030f 	and.w	r3, r3, #15
 8006ab4:	4a6f      	ldr	r2, [pc, #444]	; (8006c74 <HAL_RCCEx_GetPeriphCLKFreq+0xd44>)
 8006ab6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006aba:	637b      	str	r3, [r7, #52]	; 0x34
 8006abc:	e36b      	b.n	8007196 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    /* Clock not enabled for I2C4 */
    else
    {
      frequency = 0U;
 8006abe:	2300      	movs	r3, #0
 8006ac0:	637b      	str	r3, [r7, #52]	; 0x34
 8006ac2:	e368      	b.n	8007196 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    {
      frequency = 0U;
    }
  }
#endif /* I2C6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM34)
 8006ac4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006ac8:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 8006acc:	430b      	orrs	r3, r1
 8006ace:	d164      	bne.n	8006b9a <HAL_RCCEx_GetPeriphCLKFreq+0xc6a>
  {
    /* Get the current LPTIM34 source */
    srcclk = __HAL_RCC_GET_LPTIM34_SOURCE();
 8006ad0:	4b67      	ldr	r3, [pc, #412]	; (8006c70 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8006ad2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006ad6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006ada:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_LPTIM34CLKSOURCE_MSIK)
 8006adc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d120      	bne.n	8006b24 <HAL_RCCEx_GetPeriphCLKFreq+0xbf4>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8006ae2:	4b63      	ldr	r3, [pc, #396]	; (8006c70 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	f003 0320 	and.w	r3, r3, #32
 8006aea:	2b20      	cmp	r3, #32
 8006aec:	d117      	bne.n	8006b1e <HAL_RCCEx_GetPeriphCLKFreq+0xbee>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8006aee:	4b60      	ldr	r3, [pc, #384]	; (8006c70 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8006af0:	689b      	ldr	r3, [r3, #8]
 8006af2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d005      	beq.n	8006b06 <HAL_RCCEx_GetPeriphCLKFreq+0xbd6>
 8006afa:	4b5d      	ldr	r3, [pc, #372]	; (8006c70 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8006afc:	689b      	ldr	r3, [r3, #8]
 8006afe:	0e1b      	lsrs	r3, r3, #24
 8006b00:	f003 030f 	and.w	r3, r3, #15
 8006b04:	e006      	b.n	8006b14 <HAL_RCCEx_GetPeriphCLKFreq+0xbe4>
 8006b06:	4b5a      	ldr	r3, [pc, #360]	; (8006c70 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8006b08:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006b0c:	041b      	lsls	r3, r3, #16
 8006b0e:	0e1b      	lsrs	r3, r3, #24
 8006b10:	f003 030f 	and.w	r3, r3, #15
 8006b14:	4a57      	ldr	r2, [pc, #348]	; (8006c74 <HAL_RCCEx_GetPeriphCLKFreq+0xd44>)
 8006b16:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006b1a:	637b      	str	r3, [r7, #52]	; 0x34
 8006b1c:	e33b      	b.n	8007196 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
      }
      else
      {
        frequency = 0U;
 8006b1e:	2300      	movs	r3, #0
 8006b20:	637b      	str	r3, [r7, #52]	; 0x34
 8006b22:	e338      	b.n	8007196 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSI))
 8006b24:	4b52      	ldr	r3, [pc, #328]	; (8006c70 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8006b26:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006b2a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006b2e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006b32:	d112      	bne.n	8006b5a <HAL_RCCEx_GetPeriphCLKFreq+0xc2a>
 8006b34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b36:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006b3a:	d10e      	bne.n	8006b5a <HAL_RCCEx_GetPeriphCLKFreq+0xc2a>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8006b3c:	4b4c      	ldr	r3, [pc, #304]	; (8006c70 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8006b3e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006b42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006b46:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006b4a:	d102      	bne.n	8006b52 <HAL_RCCEx_GetPeriphCLKFreq+0xc22>
      {
        frequency = LSI_VALUE / 128U;
 8006b4c:	23fa      	movs	r3, #250	; 0xfa
 8006b4e:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8006b50:	e321      	b.n	8007196 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
      }
      else
      {
        frequency = LSI_VALUE;
 8006b52:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8006b56:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8006b58:	e31d      	b.n	8007196 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_HSI))
 8006b5a:	4b45      	ldr	r3, [pc, #276]	; (8006c70 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006b62:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006b66:	d106      	bne.n	8006b76 <HAL_RCCEx_GetPeriphCLKFreq+0xc46>
 8006b68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b6a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006b6e:	d102      	bne.n	8006b76 <HAL_RCCEx_GetPeriphCLKFreq+0xc46>
    {
      frequency = HSI_VALUE;
 8006b70:	4b41      	ldr	r3, [pc, #260]	; (8006c78 <HAL_RCCEx_GetPeriphCLKFreq+0xd48>)
 8006b72:	637b      	str	r3, [r7, #52]	; 0x34
 8006b74:	e30f      	b.n	8007196 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSE))
 8006b76:	4b3e      	ldr	r3, [pc, #248]	; (8006c70 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8006b78:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006b7c:	f003 0302 	and.w	r3, r3, #2
 8006b80:	2b02      	cmp	r3, #2
 8006b82:	d107      	bne.n	8006b94 <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
 8006b84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b86:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006b8a:	d103      	bne.n	8006b94 <HAL_RCCEx_GetPeriphCLKFreq+0xc64>
    {
      frequency = LSE_VALUE;
 8006b8c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006b90:	637b      	str	r3, [r7, #52]	; 0x34
 8006b92:	e300      	b.n	8007196 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    /* Clock not enabled for LPTIM34 */
    else
    {
      frequency = 0U;
 8006b94:	2300      	movs	r3, #0
 8006b96:	637b      	str	r3, [r7, #52]	; 0x34
 8006b98:	e2fd      	b.n	8007196 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM1)
 8006b9a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006b9e:	f5a2 7100 	sub.w	r1, r2, #512	; 0x200
 8006ba2:	430b      	orrs	r3, r1
 8006ba4:	d16a      	bne.n	8006c7c <HAL_RCCEx_GetPeriphCLKFreq+0xd4c>
  {
    /* Get the current LPTIM1 source */
    srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 8006ba6:	4b32      	ldr	r3, [pc, #200]	; (8006c70 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8006ba8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006bac:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006bb0:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_LPTIM1CLKSOURCE_MSIK)
 8006bb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d120      	bne.n	8006bfa <HAL_RCCEx_GetPeriphCLKFreq+0xcca>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8006bb8:	4b2d      	ldr	r3, [pc, #180]	; (8006c70 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	f003 0320 	and.w	r3, r3, #32
 8006bc0:	2b20      	cmp	r3, #32
 8006bc2:	d117      	bne.n	8006bf4 <HAL_RCCEx_GetPeriphCLKFreq+0xcc4>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8006bc4:	4b2a      	ldr	r3, [pc, #168]	; (8006c70 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8006bc6:	689b      	ldr	r3, [r3, #8]
 8006bc8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d005      	beq.n	8006bdc <HAL_RCCEx_GetPeriphCLKFreq+0xcac>
 8006bd0:	4b27      	ldr	r3, [pc, #156]	; (8006c70 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8006bd2:	689b      	ldr	r3, [r3, #8]
 8006bd4:	0e1b      	lsrs	r3, r3, #24
 8006bd6:	f003 030f 	and.w	r3, r3, #15
 8006bda:	e006      	b.n	8006bea <HAL_RCCEx_GetPeriphCLKFreq+0xcba>
 8006bdc:	4b24      	ldr	r3, [pc, #144]	; (8006c70 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8006bde:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006be2:	041b      	lsls	r3, r3, #16
 8006be4:	0e1b      	lsrs	r3, r3, #24
 8006be6:	f003 030f 	and.w	r3, r3, #15
 8006bea:	4a22      	ldr	r2, [pc, #136]	; (8006c74 <HAL_RCCEx_GetPeriphCLKFreq+0xd44>)
 8006bec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006bf0:	637b      	str	r3, [r7, #52]	; 0x34
 8006bf2:	e2d0      	b.n	8007196 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
      }
      else
      {
        frequency = 0U;
 8006bf4:	2300      	movs	r3, #0
 8006bf6:	637b      	str	r3, [r7, #52]	; 0x34
 8006bf8:	e2cd      	b.n	8007196 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSI))
 8006bfa:	4b1d      	ldr	r3, [pc, #116]	; (8006c70 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8006bfc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006c00:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006c04:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006c08:	d112      	bne.n	8006c30 <HAL_RCCEx_GetPeriphCLKFreq+0xd00>
 8006c0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c0c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006c10:	d10e      	bne.n	8006c30 <HAL_RCCEx_GetPeriphCLKFreq+0xd00>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8006c12:	4b17      	ldr	r3, [pc, #92]	; (8006c70 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8006c14:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006c18:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006c1c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006c20:	d102      	bne.n	8006c28 <HAL_RCCEx_GetPeriphCLKFreq+0xcf8>
      {
        frequency = LSI_VALUE / 128U;
 8006c22:	23fa      	movs	r3, #250	; 0xfa
 8006c24:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8006c26:	e2b6      	b.n	8007196 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
      }
      else
      {
        frequency = LSI_VALUE;
 8006c28:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8006c2c:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8006c2e:	e2b2      	b.n	8007196 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_HSI))
 8006c30:	4b0f      	ldr	r3, [pc, #60]	; (8006c70 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006c38:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006c3c:	d106      	bne.n	8006c4c <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>
 8006c3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c40:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006c44:	d102      	bne.n	8006c4c <HAL_RCCEx_GetPeriphCLKFreq+0xd1c>
    {
      frequency = HSI_VALUE;
 8006c46:	4b0c      	ldr	r3, [pc, #48]	; (8006c78 <HAL_RCCEx_GetPeriphCLKFreq+0xd48>)
 8006c48:	637b      	str	r3, [r7, #52]	; 0x34
 8006c4a:	e2a4      	b.n	8007196 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSE))
 8006c4c:	4b08      	ldr	r3, [pc, #32]	; (8006c70 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8006c4e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006c52:	f003 0302 	and.w	r3, r3, #2
 8006c56:	2b02      	cmp	r3, #2
 8006c58:	d107      	bne.n	8006c6a <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
 8006c5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c5c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006c60:	d103      	bne.n	8006c6a <HAL_RCCEx_GetPeriphCLKFreq+0xd3a>
    {
      frequency = LSE_VALUE;
 8006c62:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006c66:	637b      	str	r3, [r7, #52]	; 0x34
 8006c68:	e295      	b.n	8007196 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    /* Clock not enabled for LPTIM1 */
    else
    {
      frequency = 0U;
 8006c6a:	2300      	movs	r3, #0
 8006c6c:	637b      	str	r3, [r7, #52]	; 0x34
 8006c6e:	e292      	b.n	8007196 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
 8006c70:	46020c00 	.word	0x46020c00
 8006c74:	08009fa0 	.word	0x08009fa0
 8006c78:	00f42400 	.word	0x00f42400
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM2)
 8006c7c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006c80:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 8006c84:	430b      	orrs	r3, r1
 8006c86:	d147      	bne.n	8006d18 <HAL_RCCEx_GetPeriphCLKFreq+0xde8>
  {
    /* Get the current LPTIM2 source */
    srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 8006c88:	4b9a      	ldr	r3, [pc, #616]	; (8006ef4 <HAL_RCCEx_GetPeriphCLKFreq+0xfc4>)
 8006c8a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006c8e:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8006c92:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_LPTIM2CLKSOURCE_PCLK1)
 8006c94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d103      	bne.n	8006ca2 <HAL_RCCEx_GetPeriphCLKFreq+0xd72>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8006c9a:	f7fd ff3b 	bl	8004b14 <HAL_RCC_GetPCLK1Freq>
 8006c9e:	6378      	str	r0, [r7, #52]	; 0x34
 8006ca0:	e279      	b.n	8007196 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSI))
 8006ca2:	4b94      	ldr	r3, [pc, #592]	; (8006ef4 <HAL_RCCEx_GetPeriphCLKFreq+0xfc4>)
 8006ca4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006ca8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006cac:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006cb0:	d112      	bne.n	8006cd8 <HAL_RCCEx_GetPeriphCLKFreq+0xda8>
 8006cb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cb4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006cb8:	d10e      	bne.n	8006cd8 <HAL_RCCEx_GetPeriphCLKFreq+0xda8>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8006cba:	4b8e      	ldr	r3, [pc, #568]	; (8006ef4 <HAL_RCCEx_GetPeriphCLKFreq+0xfc4>)
 8006cbc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006cc0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006cc4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006cc8:	d102      	bne.n	8006cd0 <HAL_RCCEx_GetPeriphCLKFreq+0xda0>
      {
        frequency = LSI_VALUE / 128U;
 8006cca:	23fa      	movs	r3, #250	; 0xfa
 8006ccc:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8006cce:	e262      	b.n	8007196 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
      }
      else
      {
        frequency = LSI_VALUE;
 8006cd0:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8006cd4:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8006cd6:	e25e      	b.n	8007196 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_HSI))
 8006cd8:	4b86      	ldr	r3, [pc, #536]	; (8006ef4 <HAL_RCCEx_GetPeriphCLKFreq+0xfc4>)
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006ce0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006ce4:	d106      	bne.n	8006cf4 <HAL_RCCEx_GetPeriphCLKFreq+0xdc4>
 8006ce6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ce8:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8006cec:	d102      	bne.n	8006cf4 <HAL_RCCEx_GetPeriphCLKFreq+0xdc4>
    {
      frequency = HSI_VALUE;
 8006cee:	4b82      	ldr	r3, [pc, #520]	; (8006ef8 <HAL_RCCEx_GetPeriphCLKFreq+0xfc8>)
 8006cf0:	637b      	str	r3, [r7, #52]	; 0x34
 8006cf2:	e250      	b.n	8007196 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSE))
 8006cf4:	4b7f      	ldr	r3, [pc, #508]	; (8006ef4 <HAL_RCCEx_GetPeriphCLKFreq+0xfc4>)
 8006cf6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006cfa:	f003 0302 	and.w	r3, r3, #2
 8006cfe:	2b02      	cmp	r3, #2
 8006d00:	d107      	bne.n	8006d12 <HAL_RCCEx_GetPeriphCLKFreq+0xde2>
 8006d02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d04:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8006d08:	d103      	bne.n	8006d12 <HAL_RCCEx_GetPeriphCLKFreq+0xde2>
    {
      frequency = LSE_VALUE;
 8006d0a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006d0e:	637b      	str	r3, [r7, #52]	; 0x34
 8006d10:	e241      	b.n	8007196 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    /* Clock not enabled for LPTIM2 */
    else
    {
      frequency = 0U;
 8006d12:	2300      	movs	r3, #0
 8006d14:	637b      	str	r3, [r7, #52]	; 0x34
 8006d16:	e23e      	b.n	8007196 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN1)
 8006d18:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006d1c:	f102 4178 	add.w	r1, r2, #4160749568	; 0xf8000000
 8006d20:	430b      	orrs	r3, r1
 8006d22:	d12d      	bne.n	8006d80 <HAL_RCCEx_GetPeriphCLKFreq+0xe50>
  {
    /* Get the current FDCAN1 kernel source */
    srcclk = __HAL_RCC_GET_FDCAN1_SOURCE();
 8006d24:	4b73      	ldr	r3, [pc, #460]	; (8006ef4 <HAL_RCCEx_GetPeriphCLKFreq+0xfc4>)
 8006d26:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006d2a:	f003 7340 	and.w	r3, r3, #50331648	; 0x3000000
 8006d2e:	633b      	str	r3, [r7, #48]	; 0x30

    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_FDCAN1CLKSOURCE_HSE))
 8006d30:	4b70      	ldr	r3, [pc, #448]	; (8006ef4 <HAL_RCCEx_GetPeriphCLKFreq+0xfc4>)
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006d38:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006d3c:	d105      	bne.n	8006d4a <HAL_RCCEx_GetPeriphCLKFreq+0xe1a>
 8006d3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d102      	bne.n	8006d4a <HAL_RCCEx_GetPeriphCLKFreq+0xe1a>
    {
      frequency = HSE_VALUE;
 8006d44:	4b6c      	ldr	r3, [pc, #432]	; (8006ef8 <HAL_RCCEx_GetPeriphCLKFreq+0xfc8>)
 8006d46:	637b      	str	r3, [r7, #52]	; 0x34
 8006d48:	e225      	b.n	8007196 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL1) /* PLL1 ? */
 8006d4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d4c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006d50:	d107      	bne.n	8006d62 <HAL_RCCEx_GetPeriphCLKFreq+0xe32>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006d52:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006d56:	4618      	mov	r0, r3
 8006d58:	f7fe fcdc 	bl	8005714 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_Q_Frequency;
 8006d5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d5e:	637b      	str	r3, [r7, #52]	; 0x34
 8006d60:	e219      	b.n	8007196 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL2) /* PLL2 ? */
 8006d62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d64:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006d68:	d107      	bne.n	8006d7a <HAL_RCCEx_GetPeriphCLKFreq+0xe4a>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006d6a:	f107 0318 	add.w	r3, r7, #24
 8006d6e:	4618      	mov	r0, r3
 8006d70:	f7fe fe2a 	bl	80059c8 <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_P_Frequency;
 8006d74:	69bb      	ldr	r3, [r7, #24]
 8006d76:	637b      	str	r3, [r7, #52]	; 0x34
 8006d78:	e20d      	b.n	8007196 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    /* Clock not enabled for FDCAN1 */
    else
    {
      frequency = 0U;
 8006d7a:	2300      	movs	r3, #0
 8006d7c:	637b      	str	r3, [r7, #52]	; 0x34
 8006d7e:	e20a      	b.n	8007196 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI1)
 8006d80:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006d84:	f5a2 0100 	sub.w	r1, r2, #8388608	; 0x800000
 8006d88:	430b      	orrs	r3, r1
 8006d8a:	d156      	bne.n	8006e3a <HAL_RCCEx_GetPeriphCLKFreq+0xf0a>
  {
    /* Get the current SPI1 kernel source */
    srcclk = __HAL_RCC_GET_SPI1_SOURCE();
 8006d8c:	4b59      	ldr	r3, [pc, #356]	; (8006ef4 <HAL_RCCEx_GetPeriphCLKFreq+0xfc4>)
 8006d8e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006d92:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8006d96:	633b      	str	r3, [r7, #48]	; 0x30
    switch (srcclk)
 8006d98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d9a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006d9e:	d028      	beq.n	8006df2 <HAL_RCCEx_GetPeriphCLKFreq+0xec2>
 8006da0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006da2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006da6:	d845      	bhi.n	8006e34 <HAL_RCCEx_GetPeriphCLKFreq+0xf04>
 8006da8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006daa:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006dae:	d013      	beq.n	8006dd8 <HAL_RCCEx_GetPeriphCLKFreq+0xea8>
 8006db0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006db2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006db6:	d83d      	bhi.n	8006e34 <HAL_RCCEx_GetPeriphCLKFreq+0xf04>
 8006db8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d004      	beq.n	8006dc8 <HAL_RCCEx_GetPeriphCLKFreq+0xe98>
 8006dbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dc0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006dc4:	d004      	beq.n	8006dd0 <HAL_RCCEx_GetPeriphCLKFreq+0xea0>
 8006dc6:	e035      	b.n	8006e34 <HAL_RCCEx_GetPeriphCLKFreq+0xf04>
    {
      case RCC_SPI1CLKSOURCE_PCLK2:

        frequency = HAL_RCC_GetPCLK2Freq();
 8006dc8:	f7fd feb8 	bl	8004b3c <HAL_RCC_GetPCLK2Freq>
 8006dcc:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8006dce:	e1e2      	b.n	8007196 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_SPI1CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8006dd0:	f7fd fd84 	bl	80048dc <HAL_RCC_GetSysClockFreq>
 8006dd4:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8006dd6:	e1de      	b.n	8007196 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_SPI1CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006dd8:	4b46      	ldr	r3, [pc, #280]	; (8006ef4 <HAL_RCCEx_GetPeriphCLKFreq+0xfc4>)
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006de0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006de4:	d102      	bne.n	8006dec <HAL_RCCEx_GetPeriphCLKFreq+0xebc>
        {
          frequency = HSI_VALUE;
 8006de6:	4b44      	ldr	r3, [pc, #272]	; (8006ef8 <HAL_RCCEx_GetPeriphCLKFreq+0xfc8>)
 8006de8:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8006dea:	e1d4      	b.n	8007196 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
          frequency = 0U;
 8006dec:	2300      	movs	r3, #0
 8006dee:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006df0:	e1d1      	b.n	8007196 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_SPI1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8006df2:	4b40      	ldr	r3, [pc, #256]	; (8006ef4 <HAL_RCCEx_GetPeriphCLKFreq+0xfc4>)
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	f003 0320 	and.w	r3, r3, #32
 8006dfa:	2b20      	cmp	r3, #32
 8006dfc:	d117      	bne.n	8006e2e <HAL_RCCEx_GetPeriphCLKFreq+0xefe>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8006dfe:	4b3d      	ldr	r3, [pc, #244]	; (8006ef4 <HAL_RCCEx_GetPeriphCLKFreq+0xfc4>)
 8006e00:	689b      	ldr	r3, [r3, #8]
 8006e02:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d005      	beq.n	8006e16 <HAL_RCCEx_GetPeriphCLKFreq+0xee6>
 8006e0a:	4b3a      	ldr	r3, [pc, #232]	; (8006ef4 <HAL_RCCEx_GetPeriphCLKFreq+0xfc4>)
 8006e0c:	689b      	ldr	r3, [r3, #8]
 8006e0e:	0e1b      	lsrs	r3, r3, #24
 8006e10:	f003 030f 	and.w	r3, r3, #15
 8006e14:	e006      	b.n	8006e24 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
 8006e16:	4b37      	ldr	r3, [pc, #220]	; (8006ef4 <HAL_RCCEx_GetPeriphCLKFreq+0xfc4>)
 8006e18:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006e1c:	041b      	lsls	r3, r3, #16
 8006e1e:	0e1b      	lsrs	r3, r3, #24
 8006e20:	f003 030f 	and.w	r3, r3, #15
 8006e24:	4a35      	ldr	r2, [pc, #212]	; (8006efc <HAL_RCCEx_GetPeriphCLKFreq+0xfcc>)
 8006e26:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006e2a:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8006e2c:	e1b3      	b.n	8007196 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
          frequency = 0U;
 8006e2e:	2300      	movs	r3, #0
 8006e30:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006e32:	e1b0      	b.n	8007196 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      default:

        frequency = 0U;
 8006e34:	2300      	movs	r3, #0
 8006e36:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006e38:	e1ad      	b.n	8007196 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI2)
 8006e3a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006e3e:	f102 417f 	add.w	r1, r2, #4278190080	; 0xff000000
 8006e42:	430b      	orrs	r3, r1
 8006e44:	d15c      	bne.n	8006f00 <HAL_RCCEx_GetPeriphCLKFreq+0xfd0>
  {
    /* Get the current SPI2 kernel source */
    srcclk = __HAL_RCC_GET_SPI2_SOURCE();
 8006e46:	4b2b      	ldr	r3, [pc, #172]	; (8006ef4 <HAL_RCCEx_GetPeriphCLKFreq+0xfc4>)
 8006e48:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006e4c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006e50:	633b      	str	r3, [r7, #48]	; 0x30
    switch (srcclk)
 8006e52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e54:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006e58:	d028      	beq.n	8006eac <HAL_RCCEx_GetPeriphCLKFreq+0xf7c>
 8006e5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e5c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006e60:	d845      	bhi.n	8006eee <HAL_RCCEx_GetPeriphCLKFreq+0xfbe>
 8006e62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e64:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006e68:	d013      	beq.n	8006e92 <HAL_RCCEx_GetPeriphCLKFreq+0xf62>
 8006e6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e6c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006e70:	d83d      	bhi.n	8006eee <HAL_RCCEx_GetPeriphCLKFreq+0xfbe>
 8006e72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	d004      	beq.n	8006e82 <HAL_RCCEx_GetPeriphCLKFreq+0xf52>
 8006e78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e7a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006e7e:	d004      	beq.n	8006e8a <HAL_RCCEx_GetPeriphCLKFreq+0xf5a>
 8006e80:	e035      	b.n	8006eee <HAL_RCCEx_GetPeriphCLKFreq+0xfbe>
    {
      case RCC_SPI2CLKSOURCE_PCLK1:

        frequency = HAL_RCC_GetPCLK1Freq();
 8006e82:	f7fd fe47 	bl	8004b14 <HAL_RCC_GetPCLK1Freq>
 8006e86:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8006e88:	e185      	b.n	8007196 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_SPI2CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8006e8a:	f7fd fd27 	bl	80048dc <HAL_RCC_GetSysClockFreq>
 8006e8e:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8006e90:	e181      	b.n	8007196 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_SPI2CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006e92:	4b18      	ldr	r3, [pc, #96]	; (8006ef4 <HAL_RCCEx_GetPeriphCLKFreq+0xfc4>)
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006e9a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006e9e:	d102      	bne.n	8006ea6 <HAL_RCCEx_GetPeriphCLKFreq+0xf76>
        {
          frequency = HSI_VALUE;
 8006ea0:	4b15      	ldr	r3, [pc, #84]	; (8006ef8 <HAL_RCCEx_GetPeriphCLKFreq+0xfc8>)
 8006ea2:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8006ea4:	e177      	b.n	8007196 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
          frequency = 0U;
 8006ea6:	2300      	movs	r3, #0
 8006ea8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006eaa:	e174      	b.n	8007196 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_SPI2CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8006eac:	4b11      	ldr	r3, [pc, #68]	; (8006ef4 <HAL_RCCEx_GetPeriphCLKFreq+0xfc4>)
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	f003 0320 	and.w	r3, r3, #32
 8006eb4:	2b20      	cmp	r3, #32
 8006eb6:	d117      	bne.n	8006ee8 <HAL_RCCEx_GetPeriphCLKFreq+0xfb8>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8006eb8:	4b0e      	ldr	r3, [pc, #56]	; (8006ef4 <HAL_RCCEx_GetPeriphCLKFreq+0xfc4>)
 8006eba:	689b      	ldr	r3, [r3, #8]
 8006ebc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	d005      	beq.n	8006ed0 <HAL_RCCEx_GetPeriphCLKFreq+0xfa0>
 8006ec4:	4b0b      	ldr	r3, [pc, #44]	; (8006ef4 <HAL_RCCEx_GetPeriphCLKFreq+0xfc4>)
 8006ec6:	689b      	ldr	r3, [r3, #8]
 8006ec8:	0e1b      	lsrs	r3, r3, #24
 8006eca:	f003 030f 	and.w	r3, r3, #15
 8006ece:	e006      	b.n	8006ede <HAL_RCCEx_GetPeriphCLKFreq+0xfae>
 8006ed0:	4b08      	ldr	r3, [pc, #32]	; (8006ef4 <HAL_RCCEx_GetPeriphCLKFreq+0xfc4>)
 8006ed2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006ed6:	041b      	lsls	r3, r3, #16
 8006ed8:	0e1b      	lsrs	r3, r3, #24
 8006eda:	f003 030f 	and.w	r3, r3, #15
 8006ede:	4a07      	ldr	r2, [pc, #28]	; (8006efc <HAL_RCCEx_GetPeriphCLKFreq+0xfcc>)
 8006ee0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006ee4:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8006ee6:	e156      	b.n	8007196 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
          frequency = 0U;
 8006ee8:	2300      	movs	r3, #0
 8006eea:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006eec:	e153      	b.n	8007196 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      default:

        frequency = 0U;
 8006eee:	2300      	movs	r3, #0
 8006ef0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006ef2:	e150      	b.n	8007196 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
 8006ef4:	46020c00 	.word	0x46020c00
 8006ef8:	00f42400 	.word	0x00f42400
 8006efc:	08009fa0 	.word	0x08009fa0
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI3)
 8006f00:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006f04:	f102 417e 	add.w	r1, r2, #4261412864	; 0xfe000000
 8006f08:	430b      	orrs	r3, r1
 8006f0a:	d176      	bne.n	8006ffa <HAL_RCCEx_GetPeriphCLKFreq+0x10ca>
  {
    /* Get the current SPI3 kernel source */
    srcclk = __HAL_RCC_GET_SPI3_SOURCE();
 8006f0c:	4ba4      	ldr	r3, [pc, #656]	; (80071a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1270>)
 8006f0e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006f12:	f003 0318 	and.w	r3, r3, #24
 8006f16:	633b      	str	r3, [r7, #48]	; 0x30
    switch (srcclk)
 8006f18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f1a:	2b18      	cmp	r3, #24
 8006f1c:	d86a      	bhi.n	8006ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x10c4>
 8006f1e:	a201      	add	r2, pc, #4	; (adr r2, 8006f24 <HAL_RCCEx_GetPeriphCLKFreq+0xff4>)
 8006f20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f24:	08006f89 	.word	0x08006f89
 8006f28:	08006ff5 	.word	0x08006ff5
 8006f2c:	08006ff5 	.word	0x08006ff5
 8006f30:	08006ff5 	.word	0x08006ff5
 8006f34:	08006ff5 	.word	0x08006ff5
 8006f38:	08006ff5 	.word	0x08006ff5
 8006f3c:	08006ff5 	.word	0x08006ff5
 8006f40:	08006ff5 	.word	0x08006ff5
 8006f44:	08006f91 	.word	0x08006f91
 8006f48:	08006ff5 	.word	0x08006ff5
 8006f4c:	08006ff5 	.word	0x08006ff5
 8006f50:	08006ff5 	.word	0x08006ff5
 8006f54:	08006ff5 	.word	0x08006ff5
 8006f58:	08006ff5 	.word	0x08006ff5
 8006f5c:	08006ff5 	.word	0x08006ff5
 8006f60:	08006ff5 	.word	0x08006ff5
 8006f64:	08006f99 	.word	0x08006f99
 8006f68:	08006ff5 	.word	0x08006ff5
 8006f6c:	08006ff5 	.word	0x08006ff5
 8006f70:	08006ff5 	.word	0x08006ff5
 8006f74:	08006ff5 	.word	0x08006ff5
 8006f78:	08006ff5 	.word	0x08006ff5
 8006f7c:	08006ff5 	.word	0x08006ff5
 8006f80:	08006ff5 	.word	0x08006ff5
 8006f84:	08006fb3 	.word	0x08006fb3
    {
      case RCC_SPI3CLKSOURCE_PCLK3:

        frequency = HAL_RCC_GetPCLK3Freq();
 8006f88:	f7fd fdec 	bl	8004b64 <HAL_RCC_GetPCLK3Freq>
 8006f8c:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8006f8e:	e102      	b.n	8007196 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_SPI3CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8006f90:	f7fd fca4 	bl	80048dc <HAL_RCC_GetSysClockFreq>
 8006f94:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8006f96:	e0fe      	b.n	8007196 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_SPI3CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006f98:	4b81      	ldr	r3, [pc, #516]	; (80071a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1270>)
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006fa0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006fa4:	d102      	bne.n	8006fac <HAL_RCCEx_GetPeriphCLKFreq+0x107c>
        {
          frequency = HSI_VALUE;
 8006fa6:	4b7f      	ldr	r3, [pc, #508]	; (80071a4 <HAL_RCCEx_GetPeriphCLKFreq+0x1274>)
 8006fa8:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8006faa:	e0f4      	b.n	8007196 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
          frequency = 0U;
 8006fac:	2300      	movs	r3, #0
 8006fae:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006fb0:	e0f1      	b.n	8007196 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_SPI3CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8006fb2:	4b7b      	ldr	r3, [pc, #492]	; (80071a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1270>)
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	f003 0320 	and.w	r3, r3, #32
 8006fba:	2b20      	cmp	r3, #32
 8006fbc:	d117      	bne.n	8006fee <HAL_RCCEx_GetPeriphCLKFreq+0x10be>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8006fbe:	4b78      	ldr	r3, [pc, #480]	; (80071a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1270>)
 8006fc0:	689b      	ldr	r3, [r3, #8]
 8006fc2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	d005      	beq.n	8006fd6 <HAL_RCCEx_GetPeriphCLKFreq+0x10a6>
 8006fca:	4b75      	ldr	r3, [pc, #468]	; (80071a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1270>)
 8006fcc:	689b      	ldr	r3, [r3, #8]
 8006fce:	0e1b      	lsrs	r3, r3, #24
 8006fd0:	f003 030f 	and.w	r3, r3, #15
 8006fd4:	e006      	b.n	8006fe4 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>
 8006fd6:	4b72      	ldr	r3, [pc, #456]	; (80071a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1270>)
 8006fd8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006fdc:	041b      	lsls	r3, r3, #16
 8006fde:	0e1b      	lsrs	r3, r3, #24
 8006fe0:	f003 030f 	and.w	r3, r3, #15
 8006fe4:	4a70      	ldr	r2, [pc, #448]	; (80071a8 <HAL_RCCEx_GetPeriphCLKFreq+0x1278>)
 8006fe6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006fea:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8006fec:	e0d3      	b.n	8007196 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
          frequency = 0U;
 8006fee:	2300      	movs	r3, #0
 8006ff0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006ff2:	e0d0      	b.n	8007196 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      default:

        frequency = 0U;
 8006ff4:	2300      	movs	r3, #0
 8006ff6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006ff8:	e0cd      	b.n	8007196 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_OSPI)
 8006ffa:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006ffe:	f102 417c 	add.w	r1, r2, #4227858432	; 0xfc000000
 8007002:	430b      	orrs	r3, r1
 8007004:	d155      	bne.n	80070b2 <HAL_RCCEx_GetPeriphCLKFreq+0x1182>
  {
    /* Get the current OSPI kernel source */
    srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 8007006:	4b66      	ldr	r3, [pc, #408]	; (80071a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1270>)
 8007008:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800700c:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8007010:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 8007012:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007014:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007018:	d013      	beq.n	8007042 <HAL_RCCEx_GetPeriphCLKFreq+0x1112>
 800701a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800701c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007020:	d844      	bhi.n	80070ac <HAL_RCCEx_GetPeriphCLKFreq+0x117c>
 8007022:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007024:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007028:	d013      	beq.n	8007052 <HAL_RCCEx_GetPeriphCLKFreq+0x1122>
 800702a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800702c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007030:	d83c      	bhi.n	80070ac <HAL_RCCEx_GetPeriphCLKFreq+0x117c>
 8007032:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007034:	2b00      	cmp	r3, #0
 8007036:	d014      	beq.n	8007062 <HAL_RCCEx_GetPeriphCLKFreq+0x1132>
 8007038:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800703a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800703e:	d014      	beq.n	800706a <HAL_RCCEx_GetPeriphCLKFreq+0x113a>
 8007040:	e034      	b.n	80070ac <HAL_RCCEx_GetPeriphCLKFreq+0x117c>
    {
      case RCC_OSPICLKSOURCE_PLL2:

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007042:	f107 0318 	add.w	r3, r7, #24
 8007046:	4618      	mov	r0, r3
 8007048:	f7fe fcbe 	bl	80059c8 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 800704c:	69fb      	ldr	r3, [r7, #28]
 800704e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007050:	e0a1      	b.n	8007196 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_OSPICLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007052:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007056:	4618      	mov	r0, r3
 8007058:	f7fe fb5c 	bl	8005714 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 800705c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800705e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007060:	e099      	b.n	8007196 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_OSPICLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8007062:	f7fd fc3b 	bl	80048dc <HAL_RCC_GetSysClockFreq>
 8007066:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8007068:	e095      	b.n	8007196 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      case RCC_OSPICLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800706a:	4b4d      	ldr	r3, [pc, #308]	; (80071a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1270>)
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	f003 0320 	and.w	r3, r3, #32
 8007072:	2b20      	cmp	r3, #32
 8007074:	d117      	bne.n	80070a6 <HAL_RCCEx_GetPeriphCLKFreq+0x1176>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8007076:	4b4a      	ldr	r3, [pc, #296]	; (80071a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1270>)
 8007078:	689b      	ldr	r3, [r3, #8]
 800707a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800707e:	2b00      	cmp	r3, #0
 8007080:	d005      	beq.n	800708e <HAL_RCCEx_GetPeriphCLKFreq+0x115e>
 8007082:	4b47      	ldr	r3, [pc, #284]	; (80071a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1270>)
 8007084:	689b      	ldr	r3, [r3, #8]
 8007086:	0e1b      	lsrs	r3, r3, #24
 8007088:	f003 030f 	and.w	r3, r3, #15
 800708c:	e006      	b.n	800709c <HAL_RCCEx_GetPeriphCLKFreq+0x116c>
 800708e:	4b44      	ldr	r3, [pc, #272]	; (80071a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1270>)
 8007090:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007094:	041b      	lsls	r3, r3, #16
 8007096:	0e1b      	lsrs	r3, r3, #24
 8007098:	f003 030f 	and.w	r3, r3, #15
 800709c:	4a42      	ldr	r2, [pc, #264]	; (80071a8 <HAL_RCCEx_GetPeriphCLKFreq+0x1278>)
 800709e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80070a2:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80070a4:	e077      	b.n	8007196 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
          frequency = 0U;
 80070a6:	2300      	movs	r3, #0
 80070a8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80070aa:	e074      	b.n	8007196 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>

      default:

        frequency = 0U;
 80070ac:	2300      	movs	r3, #0
 80070ae:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80070b0:	e071      	b.n	8007196 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
        frequency = 0U;
        break;
    }
  }
#endif /* defined(HSPI1) */
  else if (PeriphClk == RCC_PERIPHCLK_DAC1)
 80070b2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80070b6:	f102 4170 	add.w	r1, r2, #4026531840	; 0xf0000000
 80070ba:	430b      	orrs	r3, r1
 80070bc:	d131      	bne.n	8007122 <HAL_RCCEx_GetPeriphCLKFreq+0x11f2>
  {
    /* Get the current DAC1 kernel source */
    srcclk = __HAL_RCC_GET_DAC1_SOURCE();
 80070be:	4b38      	ldr	r3, [pc, #224]	; (80071a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1270>)
 80070c0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80070c4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80070c8:	633b      	str	r3, [r7, #48]	; 0x30

    /* Check if LSE is ready and if DAC1 clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSE))
 80070ca:	4b35      	ldr	r3, [pc, #212]	; (80071a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1270>)
 80070cc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80070d0:	f003 0302 	and.w	r3, r3, #2
 80070d4:	2b02      	cmp	r3, #2
 80070d6:	d106      	bne.n	80070e6 <HAL_RCCEx_GetPeriphCLKFreq+0x11b6>
 80070d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070da:	2b00      	cmp	r3, #0
 80070dc:	d103      	bne.n	80070e6 <HAL_RCCEx_GetPeriphCLKFreq+0x11b6>
    {
      frequency = LSE_VALUE;
 80070de:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80070e2:	637b      	str	r3, [r7, #52]	; 0x34
 80070e4:	e057      	b.n	8007196 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    /* Check if LSI is ready and if DAC1 clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSI))
 80070e6:	4b2e      	ldr	r3, [pc, #184]	; (80071a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1270>)
 80070e8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80070ec:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80070f0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80070f4:	d112      	bne.n	800711c <HAL_RCCEx_GetPeriphCLKFreq+0x11ec>
 80070f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070f8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80070fc:	d10e      	bne.n	800711c <HAL_RCCEx_GetPeriphCLKFreq+0x11ec>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80070fe:	4b28      	ldr	r3, [pc, #160]	; (80071a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1270>)
 8007100:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007104:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007108:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800710c:	d102      	bne.n	8007114 <HAL_RCCEx_GetPeriphCLKFreq+0x11e4>
      {
        frequency = LSI_VALUE / 128U;
 800710e:	23fa      	movs	r3, #250	; 0xfa
 8007110:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8007112:	e040      	b.n	8007196 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
      }
      else
      {
        frequency = LSI_VALUE;
 8007114:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8007118:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800711a:	e03c      	b.n	8007196 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
      }
    }
    /* Clock not enabled for DAC1*/
    else
    {
      frequency = 0U;
 800711c:	2300      	movs	r3, #0
 800711e:	637b      	str	r3, [r7, #52]	; 0x34
 8007120:	e039      	b.n	8007196 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }

  }
  else if (PeriphClk == RCC_PERIPHCLK_RNG)
 8007122:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007126:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 800712a:	430b      	orrs	r3, r1
 800712c:	d131      	bne.n	8007192 <HAL_RCCEx_GetPeriphCLKFreq+0x1262>
  {
    /* Get the current RNG kernel source */
    srcclk = __HAL_RCC_GET_RNG_SOURCE();
 800712e:	4b1c      	ldr	r3, [pc, #112]	; (80071a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1270>)
 8007130:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8007134:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8007138:	633b      	str	r3, [r7, #48]	; 0x30

    /* Check if HSI48 is ready and if RNG clock selection is HSI48 */
    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48))
 800713a:	4b19      	ldr	r3, [pc, #100]	; (80071a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1270>)
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007142:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007146:	d105      	bne.n	8007154 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>
 8007148:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800714a:	2b00      	cmp	r3, #0
 800714c:	d102      	bne.n	8007154 <HAL_RCCEx_GetPeriphCLKFreq+0x1224>
    {
      frequency = HSI48_VALUE;
 800714e:	4b17      	ldr	r3, [pc, #92]	; (80071ac <HAL_RCCEx_GetPeriphCLKFreq+0x127c>)
 8007150:	637b      	str	r3, [r7, #52]	; 0x34
 8007152:	e020      	b.n	8007196 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }

    /* Check if HSI48 is ready and if RNG clock selection is HSI48_DIV2 */
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48_DIV2))
 8007154:	4b12      	ldr	r3, [pc, #72]	; (80071a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1270>)
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800715c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007160:	d106      	bne.n	8007170 <HAL_RCCEx_GetPeriphCLKFreq+0x1240>
 8007162:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007164:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007168:	d102      	bne.n	8007170 <HAL_RCCEx_GetPeriphCLKFreq+0x1240>
    {
      frequency = HSI48_VALUE >> 1U ;
 800716a:	4b11      	ldr	r3, [pc, #68]	; (80071b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1280>)
 800716c:	637b      	str	r3, [r7, #52]	; 0x34
 800716e:	e012      	b.n	8007196 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }

    /* Check if HSI is ready and if RNG clock selection is HSI */
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI))
 8007170:	4b0b      	ldr	r3, [pc, #44]	; (80071a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1270>)
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007178:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800717c:	d106      	bne.n	800718c <HAL_RCCEx_GetPeriphCLKFreq+0x125c>
 800717e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007180:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007184:	d102      	bne.n	800718c <HAL_RCCEx_GetPeriphCLKFreq+0x125c>
    {
      frequency = HSI_VALUE;
 8007186:	4b07      	ldr	r3, [pc, #28]	; (80071a4 <HAL_RCCEx_GetPeriphCLKFreq+0x1274>)
 8007188:	637b      	str	r3, [r7, #52]	; 0x34
 800718a:	e004      	b.n	8007196 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
    }
    /* Clock not enabled for RNG */
    else
    {
      frequency = 0U;
 800718c:	2300      	movs	r3, #0
 800718e:	637b      	str	r3, [r7, #52]	; 0x34
 8007190:	e001      	b.n	8007196 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
  }
#endif /* defined(USB_OTG_HS) */

  else
  {
    frequency = 0;
 8007192:	2300      	movs	r3, #0
 8007194:	637b      	str	r3, [r7, #52]	; 0x34
  }
  return (frequency);
 8007196:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8007198:	4618      	mov	r0, r3
 800719a:	3738      	adds	r7, #56	; 0x38
 800719c:	46bd      	mov	sp, r7
 800719e:	bd80      	pop	{r7, pc}
 80071a0:	46020c00 	.word	0x46020c00
 80071a4:	00f42400 	.word	0x00f42400
 80071a8:	08009fa0 	.word	0x08009fa0
 80071ac:	02dc6c00 	.word	0x02dc6c00
 80071b0:	016e3600 	.word	0x016e3600

080071b4 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2)
{
 80071b4:	b580      	push	{r7, lr}
 80071b6:	b084      	sub	sp, #16
 80071b8:	af00      	add	r7, sp, #0
 80071ba:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll2->PLL2P));
  assert_param(IS_RCC_PLLQ_VALUE(pll2->PLL2Q));
  assert_param(IS_RCC_PLLR_VALUE(pll2->PLL2R));

  /* Disable  PLL2 */
  __HAL_RCC_PLL2_DISABLE();
 80071bc:	4b47      	ldr	r3, [pc, #284]	; (80072dc <RCCEx_PLL2_Config+0x128>)
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	4a46      	ldr	r2, [pc, #280]	; (80072dc <RCCEx_PLL2_Config+0x128>)
 80071c2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80071c6:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80071c8:	f7fa f8da 	bl	8001380 <HAL_GetTick>
 80071cc:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80071ce:	e008      	b.n	80071e2 <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80071d0:	f7fa f8d6 	bl	8001380 <HAL_GetTick>
 80071d4:	4602      	mov	r2, r0
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	1ad3      	subs	r3, r2, r3
 80071da:	2b02      	cmp	r3, #2
 80071dc:	d901      	bls.n	80071e2 <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 80071de:	2303      	movs	r3, #3
 80071e0:	e077      	b.n	80072d2 <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80071e2:	4b3e      	ldr	r3, [pc, #248]	; (80072dc <RCCEx_PLL2_Config+0x128>)
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	d1f0      	bne.n	80071d0 <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 80071ee:	4b3b      	ldr	r3, [pc, #236]	; (80072dc <RCCEx_PLL2_Config+0x128>)
 80071f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071f2:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80071f6:	f023 0303 	bic.w	r3, r3, #3
 80071fa:	687a      	ldr	r2, [r7, #4]
 80071fc:	6811      	ldr	r1, [r2, #0]
 80071fe:	687a      	ldr	r2, [r7, #4]
 8007200:	6852      	ldr	r2, [r2, #4]
 8007202:	3a01      	subs	r2, #1
 8007204:	0212      	lsls	r2, r2, #8
 8007206:	430a      	orrs	r2, r1
 8007208:	4934      	ldr	r1, [pc, #208]	; (80072dc <RCCEx_PLL2_Config+0x128>)
 800720a:	4313      	orrs	r3, r2
 800720c:	62cb      	str	r3, [r1, #44]	; 0x2c
 800720e:	4b33      	ldr	r3, [pc, #204]	; (80072dc <RCCEx_PLL2_Config+0x128>)
 8007210:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007212:	4b33      	ldr	r3, [pc, #204]	; (80072e0 <RCCEx_PLL2_Config+0x12c>)
 8007214:	4013      	ands	r3, r2
 8007216:	687a      	ldr	r2, [r7, #4]
 8007218:	6892      	ldr	r2, [r2, #8]
 800721a:	3a01      	subs	r2, #1
 800721c:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8007220:	687a      	ldr	r2, [r7, #4]
 8007222:	68d2      	ldr	r2, [r2, #12]
 8007224:	3a01      	subs	r2, #1
 8007226:	0252      	lsls	r2, r2, #9
 8007228:	b292      	uxth	r2, r2
 800722a:	4311      	orrs	r1, r2
 800722c:	687a      	ldr	r2, [r7, #4]
 800722e:	6912      	ldr	r2, [r2, #16]
 8007230:	3a01      	subs	r2, #1
 8007232:	0412      	lsls	r2, r2, #16
 8007234:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 8007238:	4311      	orrs	r1, r2
 800723a:	687a      	ldr	r2, [r7, #4]
 800723c:	6952      	ldr	r2, [r2, #20]
 800723e:	3a01      	subs	r2, #1
 8007240:	0612      	lsls	r2, r2, #24
 8007242:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 8007246:	430a      	orrs	r2, r1
 8007248:	4924      	ldr	r1, [pc, #144]	; (80072dc <RCCEx_PLL2_Config+0x128>)
 800724a:	4313      	orrs	r3, r2
 800724c:	63cb      	str	r3, [r1, #60]	; 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 800724e:	4b23      	ldr	r3, [pc, #140]	; (80072dc <RCCEx_PLL2_Config+0x128>)
 8007250:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007252:	f023 020c 	bic.w	r2, r3, #12
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	699b      	ldr	r3, [r3, #24]
 800725a:	4920      	ldr	r1, [pc, #128]	; (80072dc <RCCEx_PLL2_Config+0x128>)
 800725c:	4313      	orrs	r3, r2
 800725e:	62cb      	str	r3, [r1, #44]	; 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2CLKOUT_ENABLE(pll2->PLL2ClockOut);
 8007260:	4b1e      	ldr	r3, [pc, #120]	; (80072dc <RCCEx_PLL2_Config+0x128>)
 8007262:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	6a1b      	ldr	r3, [r3, #32]
 8007268:	491c      	ldr	r1, [pc, #112]	; (80072dc <RCCEx_PLL2_Config+0x128>)
 800726a:	4313      	orrs	r3, r2
 800726c:	62cb      	str	r3, [r1, #44]	; 0x2c

  /* Disable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_DISABLE();
 800726e:	4b1b      	ldr	r3, [pc, #108]	; (80072dc <RCCEx_PLL2_Config+0x128>)
 8007270:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007272:	4a1a      	ldr	r2, [pc, #104]	; (80072dc <RCCEx_PLL2_Config+0x128>)
 8007274:	f023 0310 	bic.w	r3, r3, #16
 8007278:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800727a:	4b18      	ldr	r3, [pc, #96]	; (80072dc <RCCEx_PLL2_Config+0x128>)
 800727c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800727e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007282:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8007286:	687a      	ldr	r2, [r7, #4]
 8007288:	69d2      	ldr	r2, [r2, #28]
 800728a:	00d2      	lsls	r2, r2, #3
 800728c:	4913      	ldr	r1, [pc, #76]	; (80072dc <RCCEx_PLL2_Config+0x128>)
 800728e:	4313      	orrs	r3, r2
 8007290:	640b      	str	r3, [r1, #64]	; 0x40

  /* Enable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_ENABLE();
 8007292:	4b12      	ldr	r3, [pc, #72]	; (80072dc <RCCEx_PLL2_Config+0x128>)
 8007294:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007296:	4a11      	ldr	r2, [pc, #68]	; (80072dc <RCCEx_PLL2_Config+0x128>)
 8007298:	f043 0310 	orr.w	r3, r3, #16
 800729c:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Enable  PLL2 */
  __HAL_RCC_PLL2_ENABLE();
 800729e:	4b0f      	ldr	r3, [pc, #60]	; (80072dc <RCCEx_PLL2_Config+0x128>)
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	4a0e      	ldr	r2, [pc, #56]	; (80072dc <RCCEx_PLL2_Config+0x128>)
 80072a4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80072a8:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80072aa:	f7fa f869 	bl	8001380 <HAL_GetTick>
 80072ae:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80072b0:	e008      	b.n	80072c4 <RCCEx_PLL2_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80072b2:	f7fa f865 	bl	8001380 <HAL_GetTick>
 80072b6:	4602      	mov	r2, r0
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	1ad3      	subs	r3, r2, r3
 80072bc:	2b02      	cmp	r3, #2
 80072be:	d901      	bls.n	80072c4 <RCCEx_PLL2_Config+0x110>
    {
      return HAL_TIMEOUT;
 80072c0:	2303      	movs	r3, #3
 80072c2:	e006      	b.n	80072d2 <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80072c4:	4b05      	ldr	r3, [pc, #20]	; (80072dc <RCCEx_PLL2_Config+0x128>)
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	d0f0      	beq.n	80072b2 <RCCEx_PLL2_Config+0xfe>
    }
  }
  return HAL_OK;
 80072d0:	2300      	movs	r3, #0

}
 80072d2:	4618      	mov	r0, r3
 80072d4:	3710      	adds	r7, #16
 80072d6:	46bd      	mov	sp, r7
 80072d8:	bd80      	pop	{r7, pc}
 80072da:	bf00      	nop
 80072dc:	46020c00 	.word	0x46020c00
 80072e0:	80800000 	.word	0x80800000

080072e4 <RCCEx_PLL3_Config>:
  *         contains the configuration parameters as well as VCI clock ranges.
  * @note   PLL3 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3)
{
 80072e4:	b580      	push	{r7, lr}
 80072e6:	b084      	sub	sp, #16
 80072e8:	af00      	add	r7, sp, #0
 80072ea:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll3->PLL3P));
  assert_param(IS_RCC_PLLQ_VALUE(pll3->PLL3Q));
  assert_param(IS_RCC_PLLR_VALUE(pll3->PLL3R));

  /* Disable  PLL3 */
  __HAL_RCC_PLL3_DISABLE();
 80072ec:	4b47      	ldr	r3, [pc, #284]	; (800740c <RCCEx_PLL3_Config+0x128>)
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	4a46      	ldr	r2, [pc, #280]	; (800740c <RCCEx_PLL3_Config+0x128>)
 80072f2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80072f6:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80072f8:	f7fa f842 	bl	8001380 <HAL_GetTick>
 80072fc:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80072fe:	e008      	b.n	8007312 <RCCEx_PLL3_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8007300:	f7fa f83e 	bl	8001380 <HAL_GetTick>
 8007304:	4602      	mov	r2, r0
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	1ad3      	subs	r3, r2, r3
 800730a:	2b02      	cmp	r3, #2
 800730c:	d901      	bls.n	8007312 <RCCEx_PLL3_Config+0x2e>
    {
      return HAL_TIMEOUT;
 800730e:	2303      	movs	r3, #3
 8007310:	e077      	b.n	8007402 <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007312:	4b3e      	ldr	r3, [pc, #248]	; (800740c <RCCEx_PLL3_Config+0x128>)
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800731a:	2b00      	cmp	r3, #0
 800731c:	d1f0      	bne.n	8007300 <RCCEx_PLL3_Config+0x1c>
    }
  }

  /* Configure PLL3 multiplication and division factors */
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 800731e:	4b3b      	ldr	r3, [pc, #236]	; (800740c <RCCEx_PLL3_Config+0x128>)
 8007320:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007322:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8007326:	f023 0303 	bic.w	r3, r3, #3
 800732a:	687a      	ldr	r2, [r7, #4]
 800732c:	6811      	ldr	r1, [r2, #0]
 800732e:	687a      	ldr	r2, [r7, #4]
 8007330:	6852      	ldr	r2, [r2, #4]
 8007332:	3a01      	subs	r2, #1
 8007334:	0212      	lsls	r2, r2, #8
 8007336:	430a      	orrs	r2, r1
 8007338:	4934      	ldr	r1, [pc, #208]	; (800740c <RCCEx_PLL3_Config+0x128>)
 800733a:	4313      	orrs	r3, r2
 800733c:	630b      	str	r3, [r1, #48]	; 0x30
 800733e:	4b33      	ldr	r3, [pc, #204]	; (800740c <RCCEx_PLL3_Config+0x128>)
 8007340:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007342:	4b33      	ldr	r3, [pc, #204]	; (8007410 <RCCEx_PLL3_Config+0x12c>)
 8007344:	4013      	ands	r3, r2
 8007346:	687a      	ldr	r2, [r7, #4]
 8007348:	6892      	ldr	r2, [r2, #8]
 800734a:	3a01      	subs	r2, #1
 800734c:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8007350:	687a      	ldr	r2, [r7, #4]
 8007352:	68d2      	ldr	r2, [r2, #12]
 8007354:	3a01      	subs	r2, #1
 8007356:	0252      	lsls	r2, r2, #9
 8007358:	b292      	uxth	r2, r2
 800735a:	4311      	orrs	r1, r2
 800735c:	687a      	ldr	r2, [r7, #4]
 800735e:	6912      	ldr	r2, [r2, #16]
 8007360:	3a01      	subs	r2, #1
 8007362:	0412      	lsls	r2, r2, #16
 8007364:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 8007368:	4311      	orrs	r1, r2
 800736a:	687a      	ldr	r2, [r7, #4]
 800736c:	6952      	ldr	r2, [r2, #20]
 800736e:	3a01      	subs	r2, #1
 8007370:	0612      	lsls	r2, r2, #24
 8007372:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 8007376:	430a      	orrs	r2, r1
 8007378:	4924      	ldr	r1, [pc, #144]	; (800740c <RCCEx_PLL3_Config+0x128>)
 800737a:	4313      	orrs	r3, r2
 800737c:	644b      	str	r3, [r1, #68]	; 0x44
                        pll3->PLL3P,
                        pll3->PLL3Q,
                        pll3->PLL3R);

  /* Select PLL3 input reference frequency range: VCI */
  __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE);
 800737e:	4b23      	ldr	r3, [pc, #140]	; (800740c <RCCEx_PLL3_Config+0x128>)
 8007380:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007382:	f023 020c 	bic.w	r2, r3, #12
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	699b      	ldr	r3, [r3, #24]
 800738a:	4920      	ldr	r1, [pc, #128]	; (800740c <RCCEx_PLL3_Config+0x128>)
 800738c:	4313      	orrs	r3, r2
 800738e:	630b      	str	r3, [r1, #48]	; 0x30

  /* Configure the PLL3 Clock output(s) */
  __HAL_RCC_PLL3CLKOUT_ENABLE(pll3->PLL3ClockOut);
 8007390:	4b1e      	ldr	r3, [pc, #120]	; (800740c <RCCEx_PLL3_Config+0x128>)
 8007392:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	6a1b      	ldr	r3, [r3, #32]
 8007398:	491c      	ldr	r1, [pc, #112]	; (800740c <RCCEx_PLL3_Config+0x128>)
 800739a:	4313      	orrs	r3, r2
 800739c:	630b      	str	r3, [r1, #48]	; 0x30

  /* Disable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_DISABLE();
 800739e:	4b1b      	ldr	r3, [pc, #108]	; (800740c <RCCEx_PLL3_Config+0x128>)
 80073a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80073a2:	4a1a      	ldr	r2, [pc, #104]	; (800740c <RCCEx_PLL3_Config+0x128>)
 80073a4:	f023 0310 	bic.w	r3, r3, #16
 80073a8:	6313      	str	r3, [r2, #48]	; 0x30

  /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80073aa:	4b18      	ldr	r3, [pc, #96]	; (800740c <RCCEx_PLL3_Config+0x128>)
 80073ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80073ae:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80073b2:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80073b6:	687a      	ldr	r2, [r7, #4]
 80073b8:	69d2      	ldr	r2, [r2, #28]
 80073ba:	00d2      	lsls	r2, r2, #3
 80073bc:	4913      	ldr	r1, [pc, #76]	; (800740c <RCCEx_PLL3_Config+0x128>)
 80073be:	4313      	orrs	r3, r2
 80073c0:	648b      	str	r3, [r1, #72]	; 0x48

  /* Enable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_ENABLE();
 80073c2:	4b12      	ldr	r3, [pc, #72]	; (800740c <RCCEx_PLL3_Config+0x128>)
 80073c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80073c6:	4a11      	ldr	r2, [pc, #68]	; (800740c <RCCEx_PLL3_Config+0x128>)
 80073c8:	f043 0310 	orr.w	r3, r3, #16
 80073cc:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable  PLL3 */
  __HAL_RCC_PLL3_ENABLE();
 80073ce:	4b0f      	ldr	r3, [pc, #60]	; (800740c <RCCEx_PLL3_Config+0x128>)
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	4a0e      	ldr	r2, [pc, #56]	; (800740c <RCCEx_PLL3_Config+0x128>)
 80073d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80073d8:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80073da:	f7f9 ffd1 	bl	8001380 <HAL_GetTick>
 80073de:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80073e0:	e008      	b.n	80073f4 <RCCEx_PLL3_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80073e2:	f7f9 ffcd 	bl	8001380 <HAL_GetTick>
 80073e6:	4602      	mov	r2, r0
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	1ad3      	subs	r3, r2, r3
 80073ec:	2b02      	cmp	r3, #2
 80073ee:	d901      	bls.n	80073f4 <RCCEx_PLL3_Config+0x110>
    {
      return HAL_TIMEOUT;
 80073f0:	2303      	movs	r3, #3
 80073f2:	e006      	b.n	8007402 <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80073f4:	4b05      	ldr	r3, [pc, #20]	; (800740c <RCCEx_PLL3_Config+0x128>)
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	d0f0      	beq.n	80073e2 <RCCEx_PLL3_Config+0xfe>
    }
  }
  return HAL_OK;
 8007400:	2300      	movs	r3, #0
}
 8007402:	4618      	mov	r0, r3
 8007404:	3710      	adds	r7, #16
 8007406:	46bd      	mov	sp, r7
 8007408:	bd80      	pop	{r7, pc}
 800740a:	bf00      	nop
 800740c:	46020c00 	.word	0x46020c00
 8007410:	80800000 	.word	0x80800000

08007414 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007414:	b580      	push	{r7, lr}
 8007416:	b082      	sub	sp, #8
 8007418:	af00      	add	r7, sp, #0
 800741a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	2b00      	cmp	r3, #0
 8007420:	d101      	bne.n	8007426 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007422:	2301      	movs	r3, #1
 8007424:	e042      	b.n	80074ac <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800742c:	2b00      	cmp	r3, #0
 800742e:	d106      	bne.n	800743e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	2200      	movs	r2, #0
 8007434:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007438:	6878      	ldr	r0, [r7, #4]
 800743a:	f7f9 fc6d 	bl	8000d18 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	2224      	movs	r2, #36	; 0x24
 8007442:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	681a      	ldr	r2, [r3, #0]
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	f022 0201 	bic.w	r2, r2, #1
 8007454:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800745a:	2b00      	cmp	r3, #0
 800745c:	d002      	beq.n	8007464 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800745e:	6878      	ldr	r0, [r7, #4]
 8007460:	f000 fdcc 	bl	8007ffc <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007464:	6878      	ldr	r0, [r7, #4]
 8007466:	f000 fc31 	bl	8007ccc <UART_SetConfig>
 800746a:	4603      	mov	r3, r0
 800746c:	2b01      	cmp	r3, #1
 800746e:	d101      	bne.n	8007474 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8007470:	2301      	movs	r3, #1
 8007472:	e01b      	b.n	80074ac <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	685a      	ldr	r2, [r3, #4]
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007482:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	689a      	ldr	r2, [r3, #8]
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007492:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	681a      	ldr	r2, [r3, #0]
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	f042 0201 	orr.w	r2, r2, #1
 80074a2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80074a4:	6878      	ldr	r0, [r7, #4]
 80074a6:	f000 fe4b 	bl	8008140 <UART_CheckIdleState>
 80074aa:	4603      	mov	r3, r0
}
 80074ac:	4618      	mov	r0, r3
 80074ae:	3708      	adds	r7, #8
 80074b0:	46bd      	mov	sp, r7
 80074b2:	bd80      	pop	{r7, pc}

080074b4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80074b4:	b580      	push	{r7, lr}
 80074b6:	b08a      	sub	sp, #40	; 0x28
 80074b8:	af02      	add	r7, sp, #8
 80074ba:	60f8      	str	r0, [r7, #12]
 80074bc:	60b9      	str	r1, [r7, #8]
 80074be:	603b      	str	r3, [r7, #0]
 80074c0:	4613      	mov	r3, r2
 80074c2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80074c4:	68fb      	ldr	r3, [r7, #12]
 80074c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80074ca:	2b20      	cmp	r3, #32
 80074cc:	d17b      	bne.n	80075c6 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 80074ce:	68bb      	ldr	r3, [r7, #8]
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	d002      	beq.n	80074da <HAL_UART_Transmit+0x26>
 80074d4:	88fb      	ldrh	r3, [r7, #6]
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	d101      	bne.n	80074de <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80074da:	2301      	movs	r3, #1
 80074dc:	e074      	b.n	80075c8 <HAL_UART_Transmit+0x114>
    {
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
    }

#endif /* USART_DMAREQUESTS_SW_WA */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80074de:	68fb      	ldr	r3, [r7, #12]
 80074e0:	2200      	movs	r2, #0
 80074e2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	2221      	movs	r2, #33	; 0x21
 80074ea:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80074ee:	f7f9 ff47 	bl	8001380 <HAL_GetTick>
 80074f2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	88fa      	ldrh	r2, [r7, #6]
 80074f8:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	88fa      	ldrh	r2, [r7, #6]
 8007500:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	689b      	ldr	r3, [r3, #8]
 8007508:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800750c:	d108      	bne.n	8007520 <HAL_UART_Transmit+0x6c>
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	691b      	ldr	r3, [r3, #16]
 8007512:	2b00      	cmp	r3, #0
 8007514:	d104      	bne.n	8007520 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8007516:	2300      	movs	r3, #0
 8007518:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800751a:	68bb      	ldr	r3, [r7, #8]
 800751c:	61bb      	str	r3, [r7, #24]
 800751e:	e003      	b.n	8007528 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8007520:	68bb      	ldr	r3, [r7, #8]
 8007522:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007524:	2300      	movs	r3, #0
 8007526:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8007528:	e030      	b.n	800758c <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800752a:	683b      	ldr	r3, [r7, #0]
 800752c:	9300      	str	r3, [sp, #0]
 800752e:	697b      	ldr	r3, [r7, #20]
 8007530:	2200      	movs	r2, #0
 8007532:	2180      	movs	r1, #128	; 0x80
 8007534:	68f8      	ldr	r0, [r7, #12]
 8007536:	f000 fead 	bl	8008294 <UART_WaitOnFlagUntilTimeout>
 800753a:	4603      	mov	r3, r0
 800753c:	2b00      	cmp	r3, #0
 800753e:	d005      	beq.n	800754c <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	2220      	movs	r2, #32
 8007544:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 8007548:	2303      	movs	r3, #3
 800754a:	e03d      	b.n	80075c8 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800754c:	69fb      	ldr	r3, [r7, #28]
 800754e:	2b00      	cmp	r3, #0
 8007550:	d10b      	bne.n	800756a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007552:	69bb      	ldr	r3, [r7, #24]
 8007554:	881b      	ldrh	r3, [r3, #0]
 8007556:	461a      	mov	r2, r3
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007560:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8007562:	69bb      	ldr	r3, [r7, #24]
 8007564:	3302      	adds	r3, #2
 8007566:	61bb      	str	r3, [r7, #24]
 8007568:	e007      	b.n	800757a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800756a:	69fb      	ldr	r3, [r7, #28]
 800756c:	781a      	ldrb	r2, [r3, #0]
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8007574:	69fb      	ldr	r3, [r7, #28]
 8007576:	3301      	adds	r3, #1
 8007578:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8007580:	b29b      	uxth	r3, r3
 8007582:	3b01      	subs	r3, #1
 8007584:	b29a      	uxth	r2, r3
 8007586:	68fb      	ldr	r3, [r7, #12]
 8007588:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8007592:	b29b      	uxth	r3, r3
 8007594:	2b00      	cmp	r3, #0
 8007596:	d1c8      	bne.n	800752a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007598:	683b      	ldr	r3, [r7, #0]
 800759a:	9300      	str	r3, [sp, #0]
 800759c:	697b      	ldr	r3, [r7, #20]
 800759e:	2200      	movs	r2, #0
 80075a0:	2140      	movs	r1, #64	; 0x40
 80075a2:	68f8      	ldr	r0, [r7, #12]
 80075a4:	f000 fe76 	bl	8008294 <UART_WaitOnFlagUntilTimeout>
 80075a8:	4603      	mov	r3, r0
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	d005      	beq.n	80075ba <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	2220      	movs	r2, #32
 80075b2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 80075b6:	2303      	movs	r3, #3
 80075b8:	e006      	b.n	80075c8 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80075ba:	68fb      	ldr	r3, [r7, #12]
 80075bc:	2220      	movs	r2, #32
 80075be:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 80075c2:	2300      	movs	r3, #0
 80075c4:	e000      	b.n	80075c8 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 80075c6:	2302      	movs	r3, #2
  }
}
 80075c8:	4618      	mov	r0, r3
 80075ca:	3720      	adds	r7, #32
 80075cc:	46bd      	mov	sp, r7
 80075ce:	bd80      	pop	{r7, pc}

080075d0 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80075d0:	b580      	push	{r7, lr}
 80075d2:	b08a      	sub	sp, #40	; 0x28
 80075d4:	af00      	add	r7, sp, #0
 80075d6:	60f8      	str	r0, [r7, #12]
 80075d8:	60b9      	str	r1, [r7, #8]
 80075da:	4613      	mov	r3, r2
 80075dc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80075e4:	2b20      	cmp	r3, #32
 80075e6:	d13c      	bne.n	8007662 <HAL_UART_Receive_IT+0x92>
  {
    if ((pData == NULL) || (Size == 0U))
 80075e8:	68bb      	ldr	r3, [r7, #8]
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d002      	beq.n	80075f4 <HAL_UART_Receive_IT+0x24>
 80075ee:	88fb      	ldrh	r3, [r7, #6]
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	d101      	bne.n	80075f8 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 80075f4:	2301      	movs	r3, #1
 80075f6:	e035      	b.n	8007664 <HAL_UART_Receive_IT+0x94>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	2200      	movs	r2, #0
 80075fc:	66da      	str	r2, [r3, #108]	; 0x6c
    {
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
    }

#endif /* USART_DMAREQUESTS_SW_WA */
    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	4a1a      	ldr	r2, [pc, #104]	; (800766c <HAL_UART_Receive_IT+0x9c>)
 8007604:	4293      	cmp	r3, r2
 8007606:	d024      	beq.n	8007652 <HAL_UART_Receive_IT+0x82>
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	4a18      	ldr	r2, [pc, #96]	; (8007670 <HAL_UART_Receive_IT+0xa0>)
 800760e:	4293      	cmp	r3, r2
 8007610:	d01f      	beq.n	8007652 <HAL_UART_Receive_IT+0x82>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007612:	68fb      	ldr	r3, [r7, #12]
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	685b      	ldr	r3, [r3, #4]
 8007618:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800761c:	2b00      	cmp	r3, #0
 800761e:	d018      	beq.n	8007652 <HAL_UART_Receive_IT+0x82>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007626:	697b      	ldr	r3, [r7, #20]
 8007628:	e853 3f00 	ldrex	r3, [r3]
 800762c:	613b      	str	r3, [r7, #16]
   return(result);
 800762e:	693b      	ldr	r3, [r7, #16]
 8007630:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007634:	627b      	str	r3, [r7, #36]	; 0x24
 8007636:	68fb      	ldr	r3, [r7, #12]
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	461a      	mov	r2, r3
 800763c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800763e:	623b      	str	r3, [r7, #32]
 8007640:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007642:	69f9      	ldr	r1, [r7, #28]
 8007644:	6a3a      	ldr	r2, [r7, #32]
 8007646:	e841 2300 	strex	r3, r2, [r1]
 800764a:	61bb      	str	r3, [r7, #24]
   return(result);
 800764c:	69bb      	ldr	r3, [r7, #24]
 800764e:	2b00      	cmp	r3, #0
 8007650:	d1e6      	bne.n	8007620 <HAL_UART_Receive_IT+0x50>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8007652:	88fb      	ldrh	r3, [r7, #6]
 8007654:	461a      	mov	r2, r3
 8007656:	68b9      	ldr	r1, [r7, #8]
 8007658:	68f8      	ldr	r0, [r7, #12]
 800765a:	f000 fe83 	bl	8008364 <UART_Start_Receive_IT>
 800765e:	4603      	mov	r3, r0
 8007660:	e000      	b.n	8007664 <HAL_UART_Receive_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8007662:	2302      	movs	r3, #2
  }
}
 8007664:	4618      	mov	r0, r3
 8007666:	3728      	adds	r7, #40	; 0x28
 8007668:	46bd      	mov	sp, r7
 800766a:	bd80      	pop	{r7, pc}
 800766c:	46002400 	.word	0x46002400
 8007670:	56002400 	.word	0x56002400

08007674 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007674:	b580      	push	{r7, lr}
 8007676:	b0ba      	sub	sp, #232	; 0xe8
 8007678:	af00      	add	r7, sp, #0
 800767a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	69db      	ldr	r3, [r3, #28]
 8007682:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	689b      	ldr	r3, [r3, #8]
 8007696:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800769a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800769e:	f640 030f 	movw	r3, #2063	; 0x80f
 80076a2:	4013      	ands	r3, r2
 80076a4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80076a8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80076ac:	2b00      	cmp	r3, #0
 80076ae:	d11b      	bne.n	80076e8 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80076b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80076b4:	f003 0320 	and.w	r3, r3, #32
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	d015      	beq.n	80076e8 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80076bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80076c0:	f003 0320 	and.w	r3, r3, #32
 80076c4:	2b00      	cmp	r3, #0
 80076c6:	d105      	bne.n	80076d4 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80076c8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80076cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80076d0:	2b00      	cmp	r3, #0
 80076d2:	d009      	beq.n	80076e8 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80076d8:	2b00      	cmp	r3, #0
 80076da:	f000 82cb 	beq.w	8007c74 <HAL_UART_IRQHandler+0x600>
      {
        huart->RxISR(huart);
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80076e2:	6878      	ldr	r0, [r7, #4]
 80076e4:	4798      	blx	r3
      }
      return;
 80076e6:	e2c5      	b.n	8007c74 <HAL_UART_IRQHandler+0x600>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80076e8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	f000 8123 	beq.w	8007938 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80076f2:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80076f6:	4b8d      	ldr	r3, [pc, #564]	; (800792c <HAL_UART_IRQHandler+0x2b8>)
 80076f8:	4013      	ands	r3, r2
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	d106      	bne.n	800770c <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80076fe:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8007702:	4b8b      	ldr	r3, [pc, #556]	; (8007930 <HAL_UART_IRQHandler+0x2bc>)
 8007704:	4013      	ands	r3, r2
 8007706:	2b00      	cmp	r3, #0
 8007708:	f000 8116 	beq.w	8007938 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800770c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007710:	f003 0301 	and.w	r3, r3, #1
 8007714:	2b00      	cmp	r3, #0
 8007716:	d011      	beq.n	800773c <HAL_UART_IRQHandler+0xc8>
 8007718:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800771c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007720:	2b00      	cmp	r3, #0
 8007722:	d00b      	beq.n	800773c <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	2201      	movs	r2, #1
 800772a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007732:	f043 0201 	orr.w	r2, r3, #1
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800773c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007740:	f003 0302 	and.w	r3, r3, #2
 8007744:	2b00      	cmp	r3, #0
 8007746:	d011      	beq.n	800776c <HAL_UART_IRQHandler+0xf8>
 8007748:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800774c:	f003 0301 	and.w	r3, r3, #1
 8007750:	2b00      	cmp	r3, #0
 8007752:	d00b      	beq.n	800776c <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	2202      	movs	r2, #2
 800775a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007762:	f043 0204 	orr.w	r2, r3, #4
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800776c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007770:	f003 0304 	and.w	r3, r3, #4
 8007774:	2b00      	cmp	r3, #0
 8007776:	d011      	beq.n	800779c <HAL_UART_IRQHandler+0x128>
 8007778:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800777c:	f003 0301 	and.w	r3, r3, #1
 8007780:	2b00      	cmp	r3, #0
 8007782:	d00b      	beq.n	800779c <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	2204      	movs	r2, #4
 800778a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007792:	f043 0202 	orr.w	r2, r3, #2
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800779c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80077a0:	f003 0308 	and.w	r3, r3, #8
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	d017      	beq.n	80077d8 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80077a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80077ac:	f003 0320 	and.w	r3, r3, #32
 80077b0:	2b00      	cmp	r3, #0
 80077b2:	d105      	bne.n	80077c0 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80077b4:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80077b8:	4b5c      	ldr	r3, [pc, #368]	; (800792c <HAL_UART_IRQHandler+0x2b8>)
 80077ba:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80077bc:	2b00      	cmp	r3, #0
 80077be:	d00b      	beq.n	80077d8 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	2208      	movs	r2, #8
 80077c6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80077ce:	f043 0208 	orr.w	r2, r3, #8
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80077d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80077dc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	d012      	beq.n	800780a <HAL_UART_IRQHandler+0x196>
 80077e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80077e8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	d00c      	beq.n	800780a <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80077f8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007800:	f043 0220 	orr.w	r2, r3, #32
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007810:	2b00      	cmp	r3, #0
 8007812:	f000 8231 	beq.w	8007c78 <HAL_UART_IRQHandler+0x604>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8007816:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800781a:	f003 0320 	and.w	r3, r3, #32
 800781e:	2b00      	cmp	r3, #0
 8007820:	d013      	beq.n	800784a <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8007822:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007826:	f003 0320 	and.w	r3, r3, #32
 800782a:	2b00      	cmp	r3, #0
 800782c:	d105      	bne.n	800783a <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800782e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007832:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007836:	2b00      	cmp	r3, #0
 8007838:	d007      	beq.n	800784a <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800783e:	2b00      	cmp	r3, #0
 8007840:	d003      	beq.n	800784a <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007846:	6878      	ldr	r0, [r7, #4]
 8007848:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007850:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	689b      	ldr	r3, [r3, #8]
 800785a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800785e:	2b40      	cmp	r3, #64	; 0x40
 8007860:	d005      	beq.n	800786e <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8007862:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007866:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800786a:	2b00      	cmp	r3, #0
 800786c:	d054      	beq.n	8007918 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800786e:	6878      	ldr	r0, [r7, #4]
 8007870:	f000 fe9a 	bl	80085a8 <UART_EndRxTransfer>

#if defined(HAL_DMA_MODULE_ENABLED)
        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	689b      	ldr	r3, [r3, #8]
 800787a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800787e:	2b40      	cmp	r3, #64	; 0x40
 8007880:	d146      	bne.n	8007910 <HAL_UART_IRQHandler+0x29c>
        {
#if !defined(USART_DMAREQUESTS_SW_WA)
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	3308      	adds	r3, #8
 8007888:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800788c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007890:	e853 3f00 	ldrex	r3, [r3]
 8007894:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8007898:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800789c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80078a0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	3308      	adds	r3, #8
 80078aa:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80078ae:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80078b2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078b6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80078ba:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80078be:	e841 2300 	strex	r3, r2, [r1]
 80078c2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80078c6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80078ca:	2b00      	cmp	r3, #0
 80078cc:	d1d9      	bne.n	8007882 <HAL_UART_IRQHandler+0x20e>

#endif /* !USART_DMAREQUESTS_SW_WA */
          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	d017      	beq.n	8007908 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80078de:	4a15      	ldr	r2, [pc, #84]	; (8007934 <HAL_UART_IRQHandler+0x2c0>)
 80078e0:	66da      	str	r2, [r3, #108]	; 0x6c

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80078e8:	4618      	mov	r0, r3
 80078ea:	f7fb fb46 	bl	8002f7a <HAL_DMA_Abort_IT>
 80078ee:	4603      	mov	r3, r0
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	d019      	beq.n	8007928 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80078fa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80078fc:	687a      	ldr	r2, [r7, #4]
 80078fe:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 8007902:	4610      	mov	r0, r2
 8007904:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007906:	e00f      	b.n	8007928 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007908:	6878      	ldr	r0, [r7, #4]
 800790a:	f000 f9c9 	bl	8007ca0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800790e:	e00b      	b.n	8007928 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007910:	6878      	ldr	r0, [r7, #4]
 8007912:	f000 f9c5 	bl	8007ca0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007916:	e007      	b.n	8007928 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007918:	6878      	ldr	r0, [r7, #4]
 800791a:	f000 f9c1 	bl	8007ca0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	2200      	movs	r2, #0
 8007922:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 8007926:	e1a7      	b.n	8007c78 <HAL_UART_IRQHandler+0x604>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007928:	bf00      	nop
    return;
 800792a:	e1a5      	b.n	8007c78 <HAL_UART_IRQHandler+0x604>
 800792c:	10000001 	.word	0x10000001
 8007930:	04000120 	.word	0x04000120
 8007934:	08008675 	.word	0x08008675

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800793c:	2b01      	cmp	r3, #1
 800793e:	f040 8150 	bne.w	8007be2 <HAL_UART_IRQHandler+0x56e>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8007942:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007946:	f003 0310 	and.w	r3, r3, #16
 800794a:	2b00      	cmp	r3, #0
 800794c:	f000 8149 	beq.w	8007be2 <HAL_UART_IRQHandler+0x56e>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8007950:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007954:	f003 0310 	and.w	r3, r3, #16
 8007958:	2b00      	cmp	r3, #0
 800795a:	f000 8142 	beq.w	8007be2 <HAL_UART_IRQHandler+0x56e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	2210      	movs	r2, #16
 8007964:	621a      	str	r2, [r3, #32]

#if defined(HAL_DMA_MODULE_ENABLED)
    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	689b      	ldr	r3, [r3, #8]
 800796c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007970:	2b40      	cmp	r3, #64	; 0x40
 8007972:	f040 80b8 	bne.w	8007ae6 <HAL_UART_IRQHandler+0x472>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007980:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007984:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8007988:	2b00      	cmp	r3, #0
 800798a:	f000 8177 	beq.w	8007c7c <HAL_UART_IRQHandler+0x608>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007994:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007998:	429a      	cmp	r2, r3
 800799a:	f080 816f 	bcs.w	8007c7c <HAL_UART_IRQHandler+0x608>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80079a4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Mode != DMA_LINKEDLIST_CIRCULAR)
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80079ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80079b0:	2b81      	cmp	r3, #129	; 0x81
 80079b2:	f000 8087 	beq.w	8007ac4 <HAL_UART_IRQHandler+0x450>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079be:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80079c2:	e853 3f00 	ldrex	r3, [r3]
 80079c6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80079ca:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80079ce:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80079d2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	461a      	mov	r2, r3
 80079dc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80079e0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80079e4:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079e8:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80079ec:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80079f0:	e841 2300 	strex	r3, r2, [r1]
 80079f4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80079f8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	d1da      	bne.n	80079b6 <HAL_UART_IRQHandler+0x342>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	3308      	adds	r3, #8
 8007a06:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a08:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007a0a:	e853 3f00 	ldrex	r3, [r3]
 8007a0e:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8007a10:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007a12:	f023 0301 	bic.w	r3, r3, #1
 8007a16:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	3308      	adds	r3, #8
 8007a20:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8007a24:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8007a28:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a2a:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8007a2c:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8007a30:	e841 2300 	strex	r3, r2, [r1]
 8007a34:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8007a36:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007a38:	2b00      	cmp	r3, #0
 8007a3a:	d1e1      	bne.n	8007a00 <HAL_UART_IRQHandler+0x38c>

#if !defined(USART_DMAREQUESTS_SW_WA)
          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	3308      	adds	r3, #8
 8007a42:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a44:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007a46:	e853 3f00 	ldrex	r3, [r3]
 8007a4a:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8007a4c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007a4e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007a52:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	3308      	adds	r3, #8
 8007a5c:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8007a60:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007a62:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a64:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007a66:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007a68:	e841 2300 	strex	r3, r2, [r1]
 8007a6c:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007a6e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007a70:	2b00      	cmp	r3, #0
 8007a72:	d1e3      	bne.n	8007a3c <HAL_UART_IRQHandler+0x3c8>

#endif /* !USART_DMAREQUESTS_SW_WA */
          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	2220      	movs	r2, #32
 8007a78:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	2200      	movs	r2, #0
 8007a80:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a88:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007a8a:	e853 3f00 	ldrex	r3, [r3]
 8007a8e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007a90:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007a92:	f023 0310 	bic.w	r3, r3, #16
 8007a96:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	461a      	mov	r2, r3
 8007aa0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007aa4:	65bb      	str	r3, [r7, #88]	; 0x58
 8007aa6:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007aa8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007aaa:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007aac:	e841 2300 	strex	r3, r2, [r1]
 8007ab0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007ab2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007ab4:	2b00      	cmp	r3, #0
 8007ab6:	d1e4      	bne.n	8007a82 <HAL_UART_IRQHandler+0x40e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007abe:	4618      	mov	r0, r3
 8007ac0:	f7fb f9df 	bl	8002e82 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	2202      	movs	r2, #2
 8007ac8:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007ad6:	b29b      	uxth	r3, r3
 8007ad8:	1ad3      	subs	r3, r2, r3
 8007ada:	b29b      	uxth	r3, r3
 8007adc:	4619      	mov	r1, r3
 8007ade:	6878      	ldr	r0, [r7, #4]
 8007ae0:	f000 f8e8 	bl	8007cb4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007ae4:	e0ca      	b.n	8007c7c <HAL_UART_IRQHandler+0x608>
    {
#endif /* HAL_DMA_MODULE_ENABLED */
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007af2:	b29b      	uxth	r3, r3
 8007af4:	1ad3      	subs	r3, r2, r3
 8007af6:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007b00:	b29b      	uxth	r3, r3
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	f000 80bc 	beq.w	8007c80 <HAL_UART_IRQHandler+0x60c>
          && (nb_rx_data > 0U))
 8007b08:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	f000 80b7 	beq.w	8007c80 <HAL_UART_IRQHandler+0x60c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b1a:	e853 3f00 	ldrex	r3, [r3]
 8007b1e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007b20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b22:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007b26:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	461a      	mov	r2, r3
 8007b30:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007b34:	647b      	str	r3, [r7, #68]	; 0x44
 8007b36:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b38:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007b3a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007b3c:	e841 2300 	strex	r3, r2, [r1]
 8007b40:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007b42:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	d1e4      	bne.n	8007b12 <HAL_UART_IRQHandler+0x49e>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	3308      	adds	r3, #8
 8007b4e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b52:	e853 3f00 	ldrex	r3, [r3]
 8007b56:	623b      	str	r3, [r7, #32]
   return(result);
 8007b58:	6a3b      	ldr	r3, [r7, #32]
 8007b5a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007b5e:	f023 0301 	bic.w	r3, r3, #1
 8007b62:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	3308      	adds	r3, #8
 8007b6c:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8007b70:	633a      	str	r2, [r7, #48]	; 0x30
 8007b72:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b74:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007b76:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007b78:	e841 2300 	strex	r3, r2, [r1]
 8007b7c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007b7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	d1e1      	bne.n	8007b48 <HAL_UART_IRQHandler+0x4d4>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	2220      	movs	r2, #32
 8007b88:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	2200      	movs	r2, #0
 8007b90:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	2200      	movs	r2, #0
 8007b96:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b9e:	693b      	ldr	r3, [r7, #16]
 8007ba0:	e853 3f00 	ldrex	r3, [r3]
 8007ba4:	60fb      	str	r3, [r7, #12]
   return(result);
 8007ba6:	68fb      	ldr	r3, [r7, #12]
 8007ba8:	f023 0310 	bic.w	r3, r3, #16
 8007bac:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	461a      	mov	r2, r3
 8007bb6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007bba:	61fb      	str	r3, [r7, #28]
 8007bbc:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bbe:	69b9      	ldr	r1, [r7, #24]
 8007bc0:	69fa      	ldr	r2, [r7, #28]
 8007bc2:	e841 2300 	strex	r3, r2, [r1]
 8007bc6:	617b      	str	r3, [r7, #20]
   return(result);
 8007bc8:	697b      	ldr	r3, [r7, #20]
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	d1e4      	bne.n	8007b98 <HAL_UART_IRQHandler+0x524>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	2202      	movs	r2, #2
 8007bd2:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007bd4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007bd8:	4619      	mov	r1, r3
 8007bda:	6878      	ldr	r0, [r7, #4]
 8007bdc:	f000 f86a 	bl	8007cb4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007be0:	e04e      	b.n	8007c80 <HAL_UART_IRQHandler+0x60c>
    }
#endif /* HAL_DMA_MODULE_ENABLED */
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8007be2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007be6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007bea:	2b00      	cmp	r3, #0
 8007bec:	d014      	beq.n	8007c18 <HAL_UART_IRQHandler+0x5a4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8007bee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007bf2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	d105      	bne.n	8007c06 <HAL_UART_IRQHandler+0x592>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8007bfa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007bfe:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007c02:	2b00      	cmp	r3, #0
 8007c04:	d008      	beq.n	8007c18 <HAL_UART_IRQHandler+0x5a4>
  {
    if (huart->TxISR != NULL)
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	d03a      	beq.n	8007c84 <HAL_UART_IRQHandler+0x610>
    {
      huart->TxISR(huart);
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007c12:	6878      	ldr	r0, [r7, #4]
 8007c14:	4798      	blx	r3
    }
    return;
 8007c16:	e035      	b.n	8007c84 <HAL_UART_IRQHandler+0x610>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8007c18:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007c1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c20:	2b00      	cmp	r3, #0
 8007c22:	d009      	beq.n	8007c38 <HAL_UART_IRQHandler+0x5c4>
 8007c24:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007c28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c2c:	2b00      	cmp	r3, #0
 8007c2e:	d003      	beq.n	8007c38 <HAL_UART_IRQHandler+0x5c4>
  {
    UART_EndTransmit_IT(huart);
 8007c30:	6878      	ldr	r0, [r7, #4]
 8007c32:	f000 fd35 	bl	80086a0 <UART_EndTransmit_IT>
    return;
 8007c36:	e026      	b.n	8007c86 <HAL_UART_IRQHandler+0x612>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8007c38:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007c3c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007c40:	2b00      	cmp	r3, #0
 8007c42:	d009      	beq.n	8007c58 <HAL_UART_IRQHandler+0x5e4>
 8007c44:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007c48:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	d003      	beq.n	8007c58 <HAL_UART_IRQHandler+0x5e4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8007c50:	6878      	ldr	r0, [r7, #4]
 8007c52:	f001 fa93 	bl	800917c <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007c56:	e016      	b.n	8007c86 <HAL_UART_IRQHandler+0x612>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8007c58:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007c5c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007c60:	2b00      	cmp	r3, #0
 8007c62:	d010      	beq.n	8007c86 <HAL_UART_IRQHandler+0x612>
 8007c64:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007c68:	2b00      	cmp	r3, #0
 8007c6a:	da0c      	bge.n	8007c86 <HAL_UART_IRQHandler+0x612>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8007c6c:	6878      	ldr	r0, [r7, #4]
 8007c6e:	f001 fa7b 	bl	8009168 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007c72:	e008      	b.n	8007c86 <HAL_UART_IRQHandler+0x612>
      return;
 8007c74:	bf00      	nop
 8007c76:	e006      	b.n	8007c86 <HAL_UART_IRQHandler+0x612>
    return;
 8007c78:	bf00      	nop
 8007c7a:	e004      	b.n	8007c86 <HAL_UART_IRQHandler+0x612>
      return;
 8007c7c:	bf00      	nop
 8007c7e:	e002      	b.n	8007c86 <HAL_UART_IRQHandler+0x612>
      return;
 8007c80:	bf00      	nop
 8007c82:	e000      	b.n	8007c86 <HAL_UART_IRQHandler+0x612>
    return;
 8007c84:	bf00      	nop
  }
}
 8007c86:	37e8      	adds	r7, #232	; 0xe8
 8007c88:	46bd      	mov	sp, r7
 8007c8a:	bd80      	pop	{r7, pc}

08007c8c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007c8c:	b480      	push	{r7}
 8007c8e:	b083      	sub	sp, #12
 8007c90:	af00      	add	r7, sp, #0
 8007c92:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8007c94:	bf00      	nop
 8007c96:	370c      	adds	r7, #12
 8007c98:	46bd      	mov	sp, r7
 8007c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c9e:	4770      	bx	lr

08007ca0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007ca0:	b480      	push	{r7}
 8007ca2:	b083      	sub	sp, #12
 8007ca4:	af00      	add	r7, sp, #0
 8007ca6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8007ca8:	bf00      	nop
 8007caa:	370c      	adds	r7, #12
 8007cac:	46bd      	mov	sp, r7
 8007cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cb2:	4770      	bx	lr

08007cb4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007cb4:	b480      	push	{r7}
 8007cb6:	b083      	sub	sp, #12
 8007cb8:	af00      	add	r7, sp, #0
 8007cba:	6078      	str	r0, [r7, #4]
 8007cbc:	460b      	mov	r3, r1
 8007cbe:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007cc0:	bf00      	nop
 8007cc2:	370c      	adds	r7, #12
 8007cc4:	46bd      	mov	sp, r7
 8007cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cca:	4770      	bx	lr

08007ccc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007ccc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007cd0:	b094      	sub	sp, #80	; 0x50
 8007cd2:	af00      	add	r7, sp, #0
 8007cd4:	62f8      	str	r0, [r7, #44]	; 0x2c
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007cd6:	2300      	movs	r3, #0
 8007cd8:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 8007cdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007cde:	681a      	ldr	r2, [r3, #0]
 8007ce0:	4b9b      	ldr	r3, [pc, #620]	; (8007f50 <UART_SetConfig+0x284>)
 8007ce2:	429a      	cmp	r2, r3
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007ce4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ce6:	689a      	ldr	r2, [r3, #8]
 8007ce8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007cea:	691b      	ldr	r3, [r3, #16]
 8007cec:	431a      	orrs	r2, r3
 8007cee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007cf0:	695b      	ldr	r3, [r3, #20]
 8007cf2:	431a      	orrs	r2, r3
 8007cf4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007cf6:	69db      	ldr	r3, [r3, #28]
 8007cf8:	4313      	orrs	r3, r2
 8007cfa:	64fb      	str	r3, [r7, #76]	; 0x4c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007cfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	4994      	ldr	r1, [pc, #592]	; (8007f54 <UART_SetConfig+0x288>)
 8007d04:	4019      	ands	r1, r3
 8007d06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d08:	681a      	ldr	r2, [r3, #0]
 8007d0a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007d0c:	430b      	orrs	r3, r1
 8007d0e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007d10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	685b      	ldr	r3, [r3, #4]
 8007d16:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8007d1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d1c:	68d9      	ldr	r1, [r3, #12]
 8007d1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d20:	681a      	ldr	r2, [r3, #0]
 8007d22:	ea40 0301 	orr.w	r3, r0, r1
 8007d26:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007d28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d2a:	699b      	ldr	r3, [r3, #24]
 8007d2c:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007d2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d30:	681a      	ldr	r2, [r3, #0]
 8007d32:	4b87      	ldr	r3, [pc, #540]	; (8007f50 <UART_SetConfig+0x284>)
 8007d34:	429a      	cmp	r2, r3
 8007d36:	d009      	beq.n	8007d4c <UART_SetConfig+0x80>
 8007d38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d3a:	681a      	ldr	r2, [r3, #0]
 8007d3c:	4b86      	ldr	r3, [pc, #536]	; (8007f58 <UART_SetConfig+0x28c>)
 8007d3e:	429a      	cmp	r2, r3
 8007d40:	d004      	beq.n	8007d4c <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007d42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d44:	6a1a      	ldr	r2, [r3, #32]
 8007d46:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007d48:	4313      	orrs	r3, r2
 8007d4a:	64fb      	str	r3, [r7, #76]	; 0x4c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007d4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	689b      	ldr	r3, [r3, #8]
 8007d52:	f023 416e 	bic.w	r1, r3, #3992977408	; 0xee000000
 8007d56:	f421 6130 	bic.w	r1, r1, #2816	; 0xb00
 8007d5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d5c:	681a      	ldr	r2, [r3, #0]
 8007d5e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007d60:	430b      	orrs	r3, r1
 8007d62:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007d64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d6a:	f023 000f 	bic.w	r0, r3, #15
 8007d6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d70:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8007d72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d74:	681a      	ldr	r2, [r3, #0]
 8007d76:	ea40 0301 	orr.w	r3, r0, r1
 8007d7a:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007d7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d7e:	681a      	ldr	r2, [r3, #0]
 8007d80:	4b76      	ldr	r3, [pc, #472]	; (8007f5c <UART_SetConfig+0x290>)
 8007d82:	429a      	cmp	r2, r3
 8007d84:	d102      	bne.n	8007d8c <UART_SetConfig+0xc0>
 8007d86:	2301      	movs	r3, #1
 8007d88:	64bb      	str	r3, [r7, #72]	; 0x48
 8007d8a:	e021      	b.n	8007dd0 <UART_SetConfig+0x104>
 8007d8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d8e:	681a      	ldr	r2, [r3, #0]
 8007d90:	4b73      	ldr	r3, [pc, #460]	; (8007f60 <UART_SetConfig+0x294>)
 8007d92:	429a      	cmp	r2, r3
 8007d94:	d102      	bne.n	8007d9c <UART_SetConfig+0xd0>
 8007d96:	2304      	movs	r3, #4
 8007d98:	64bb      	str	r3, [r7, #72]	; 0x48
 8007d9a:	e019      	b.n	8007dd0 <UART_SetConfig+0x104>
 8007d9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d9e:	681a      	ldr	r2, [r3, #0]
 8007da0:	4b70      	ldr	r3, [pc, #448]	; (8007f64 <UART_SetConfig+0x298>)
 8007da2:	429a      	cmp	r2, r3
 8007da4:	d102      	bne.n	8007dac <UART_SetConfig+0xe0>
 8007da6:	2308      	movs	r3, #8
 8007da8:	64bb      	str	r3, [r7, #72]	; 0x48
 8007daa:	e011      	b.n	8007dd0 <UART_SetConfig+0x104>
 8007dac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007dae:	681a      	ldr	r2, [r3, #0]
 8007db0:	4b6d      	ldr	r3, [pc, #436]	; (8007f68 <UART_SetConfig+0x29c>)
 8007db2:	429a      	cmp	r2, r3
 8007db4:	d102      	bne.n	8007dbc <UART_SetConfig+0xf0>
 8007db6:	2310      	movs	r3, #16
 8007db8:	64bb      	str	r3, [r7, #72]	; 0x48
 8007dba:	e009      	b.n	8007dd0 <UART_SetConfig+0x104>
 8007dbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007dbe:	681a      	ldr	r2, [r3, #0]
 8007dc0:	4b63      	ldr	r3, [pc, #396]	; (8007f50 <UART_SetConfig+0x284>)
 8007dc2:	429a      	cmp	r2, r3
 8007dc4:	d102      	bne.n	8007dcc <UART_SetConfig+0x100>
 8007dc6:	2320      	movs	r3, #32
 8007dc8:	64bb      	str	r3, [r7, #72]	; 0x48
 8007dca:	e001      	b.n	8007dd0 <UART_SetConfig+0x104>
 8007dcc:	2300      	movs	r3, #0
 8007dce:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007dd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007dd2:	681a      	ldr	r2, [r3, #0]
 8007dd4:	4b5e      	ldr	r3, [pc, #376]	; (8007f50 <UART_SetConfig+0x284>)
 8007dd6:	429a      	cmp	r2, r3
 8007dd8:	d004      	beq.n	8007de4 <UART_SetConfig+0x118>
 8007dda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ddc:	681a      	ldr	r2, [r3, #0]
 8007dde:	4b5e      	ldr	r3, [pc, #376]	; (8007f58 <UART_SetConfig+0x28c>)
 8007de0:	429a      	cmp	r2, r3
 8007de2:	d172      	bne.n	8007eca <UART_SetConfig+0x1fe>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8007de4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007de6:	2200      	movs	r2, #0
 8007de8:	623b      	str	r3, [r7, #32]
 8007dea:	627a      	str	r2, [r7, #36]	; 0x24
 8007dec:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8007df0:	f7fe f89e 	bl	8005f30 <HAL_RCCEx_GetPeriphCLKFreq>
 8007df4:	6438      	str	r0, [r7, #64]	; 0x40

    /* If proper clock source reported */
    if (pclk != 0U)
 8007df6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007df8:	2b00      	cmp	r3, #0
 8007dfa:	f000 80e7 	beq.w	8007fcc <UART_SetConfig+0x300>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8007dfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e02:	4a5a      	ldr	r2, [pc, #360]	; (8007f6c <UART_SetConfig+0x2a0>)
 8007e04:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007e08:	461a      	mov	r2, r3
 8007e0a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007e0c:	fbb3 f3f2 	udiv	r3, r3, r2
 8007e10:	637b      	str	r3, [r7, #52]	; 0x34

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007e12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e14:	685a      	ldr	r2, [r3, #4]
 8007e16:	4613      	mov	r3, r2
 8007e18:	005b      	lsls	r3, r3, #1
 8007e1a:	4413      	add	r3, r2
 8007e1c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007e1e:	429a      	cmp	r2, r3
 8007e20:	d305      	bcc.n	8007e2e <UART_SetConfig+0x162>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8007e22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e24:	685b      	ldr	r3, [r3, #4]
 8007e26:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007e28:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007e2a:	429a      	cmp	r2, r3
 8007e2c:	d903      	bls.n	8007e36 <UART_SetConfig+0x16a>
      {
        ret = HAL_ERROR;
 8007e2e:	2301      	movs	r3, #1
 8007e30:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8007e34:	e048      	b.n	8007ec8 <UART_SetConfig+0x1fc>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007e36:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007e38:	2200      	movs	r2, #0
 8007e3a:	61bb      	str	r3, [r7, #24]
 8007e3c:	61fa      	str	r2, [r7, #28]
 8007e3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e42:	4a4a      	ldr	r2, [pc, #296]	; (8007f6c <UART_SetConfig+0x2a0>)
 8007e44:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007e48:	b29b      	uxth	r3, r3
 8007e4a:	2200      	movs	r2, #0
 8007e4c:	613b      	str	r3, [r7, #16]
 8007e4e:	617a      	str	r2, [r7, #20]
 8007e50:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8007e54:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8007e58:	f7f8 fa16 	bl	8000288 <__aeabi_uldivmod>
 8007e5c:	4602      	mov	r2, r0
 8007e5e:	460b      	mov	r3, r1
 8007e60:	4610      	mov	r0, r2
 8007e62:	4619      	mov	r1, r3
 8007e64:	f04f 0200 	mov.w	r2, #0
 8007e68:	f04f 0300 	mov.w	r3, #0
 8007e6c:	020b      	lsls	r3, r1, #8
 8007e6e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8007e72:	0202      	lsls	r2, r0, #8
 8007e74:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007e76:	6849      	ldr	r1, [r1, #4]
 8007e78:	0849      	lsrs	r1, r1, #1
 8007e7a:	2000      	movs	r0, #0
 8007e7c:	460c      	mov	r4, r1
 8007e7e:	4605      	mov	r5, r0
 8007e80:	eb12 0804 	adds.w	r8, r2, r4
 8007e84:	eb43 0905 	adc.w	r9, r3, r5
 8007e88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e8a:	685b      	ldr	r3, [r3, #4]
 8007e8c:	2200      	movs	r2, #0
 8007e8e:	60bb      	str	r3, [r7, #8]
 8007e90:	60fa      	str	r2, [r7, #12]
 8007e92:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007e96:	4640      	mov	r0, r8
 8007e98:	4649      	mov	r1, r9
 8007e9a:	f7f8 f9f5 	bl	8000288 <__aeabi_uldivmod>
 8007e9e:	4602      	mov	r2, r0
 8007ea0:	460b      	mov	r3, r1
 8007ea2:	4613      	mov	r3, r2
 8007ea4:	63fb      	str	r3, [r7, #60]	; 0x3c
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007ea6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007ea8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007eac:	d308      	bcc.n	8007ec0 <UART_SetConfig+0x1f4>
 8007eae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007eb0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007eb4:	d204      	bcs.n	8007ec0 <UART_SetConfig+0x1f4>
        {
          huart->Instance->BRR = usartdiv;
 8007eb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007ebc:	60da      	str	r2, [r3, #12]
 8007ebe:	e003      	b.n	8007ec8 <UART_SetConfig+0x1fc>
        }
        else
        {
          ret = HAL_ERROR;
 8007ec0:	2301      	movs	r3, #1
 8007ec2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    if (pclk != 0U)
 8007ec6:	e081      	b.n	8007fcc <UART_SetConfig+0x300>
 8007ec8:	e080      	b.n	8007fcc <UART_SetConfig+0x300>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007eca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ecc:	69db      	ldr	r3, [r3, #28]
 8007ece:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007ed2:	d14d      	bne.n	8007f70 <UART_SetConfig+0x2a4>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8007ed4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007ed6:	2200      	movs	r2, #0
 8007ed8:	603b      	str	r3, [r7, #0]
 8007eda:	607a      	str	r2, [r7, #4]
 8007edc:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007ee0:	f7fe f826 	bl	8005f30 <HAL_RCCEx_GetPeriphCLKFreq>
 8007ee4:	6438      	str	r0, [r7, #64]	; 0x40

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007ee6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007ee8:	2b00      	cmp	r3, #0
 8007eea:	d06f      	beq.n	8007fcc <UART_SetConfig+0x300>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007eec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007eee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ef0:	4a1e      	ldr	r2, [pc, #120]	; (8007f6c <UART_SetConfig+0x2a0>)
 8007ef2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007ef6:	461a      	mov	r2, r3
 8007ef8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007efa:	fbb3 f3f2 	udiv	r3, r3, r2
 8007efe:	005a      	lsls	r2, r3, #1
 8007f00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f02:	685b      	ldr	r3, [r3, #4]
 8007f04:	085b      	lsrs	r3, r3, #1
 8007f06:	441a      	add	r2, r3
 8007f08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f0a:	685b      	ldr	r3, [r3, #4]
 8007f0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007f10:	63fb      	str	r3, [r7, #60]	; 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007f12:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007f14:	2b0f      	cmp	r3, #15
 8007f16:	d916      	bls.n	8007f46 <UART_SetConfig+0x27a>
 8007f18:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007f1a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007f1e:	d212      	bcs.n	8007f46 <UART_SetConfig+0x27a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007f20:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007f22:	b29b      	uxth	r3, r3
 8007f24:	f023 030f 	bic.w	r3, r3, #15
 8007f28:	877b      	strh	r3, [r7, #58]	; 0x3a
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007f2a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007f2c:	085b      	lsrs	r3, r3, #1
 8007f2e:	b29b      	uxth	r3, r3
 8007f30:	f003 0307 	and.w	r3, r3, #7
 8007f34:	b29a      	uxth	r2, r3
 8007f36:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8007f38:	4313      	orrs	r3, r2
 8007f3a:	877b      	strh	r3, [r7, #58]	; 0x3a
        huart->Instance->BRR = brrtemp;
 8007f3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8007f42:	60da      	str	r2, [r3, #12]
 8007f44:	e042      	b.n	8007fcc <UART_SetConfig+0x300>
      }
      else
      {
        ret = HAL_ERROR;
 8007f46:	2301      	movs	r3, #1
 8007f48:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8007f4c:	e03e      	b.n	8007fcc <UART_SetConfig+0x300>
 8007f4e:	bf00      	nop
 8007f50:	46002400 	.word	0x46002400
 8007f54:	cfff69f3 	.word	0xcfff69f3
 8007f58:	56002400 	.word	0x56002400
 8007f5c:	40013800 	.word	0x40013800
 8007f60:	40004800 	.word	0x40004800
 8007f64:	40004c00 	.word	0x40004c00
 8007f68:	40005000 	.word	0x40005000
 8007f6c:	0800a060 	.word	0x0800a060
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8007f70:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007f72:	2200      	movs	r2, #0
 8007f74:	469a      	mov	sl, r3
 8007f76:	4693      	mov	fp, r2
 8007f78:	4650      	mov	r0, sl
 8007f7a:	4659      	mov	r1, fp
 8007f7c:	f7fd ffd8 	bl	8005f30 <HAL_RCCEx_GetPeriphCLKFreq>
 8007f80:	6438      	str	r0, [r7, #64]	; 0x40

    if (pclk != 0U)
 8007f82:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007f84:	2b00      	cmp	r3, #0
 8007f86:	d021      	beq.n	8007fcc <UART_SetConfig+0x300>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007f88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f8c:	4a1a      	ldr	r2, [pc, #104]	; (8007ff8 <UART_SetConfig+0x32c>)
 8007f8e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007f92:	461a      	mov	r2, r3
 8007f94:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007f96:	fbb3 f2f2 	udiv	r2, r3, r2
 8007f9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f9c:	685b      	ldr	r3, [r3, #4]
 8007f9e:	085b      	lsrs	r3, r3, #1
 8007fa0:	441a      	add	r2, r3
 8007fa2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007fa4:	685b      	ldr	r3, [r3, #4]
 8007fa6:	fbb2 f3f3 	udiv	r3, r2, r3
 8007faa:	63fb      	str	r3, [r7, #60]	; 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007fac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007fae:	2b0f      	cmp	r3, #15
 8007fb0:	d909      	bls.n	8007fc6 <UART_SetConfig+0x2fa>
 8007fb2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007fb4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007fb8:	d205      	bcs.n	8007fc6 <UART_SetConfig+0x2fa>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007fba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007fbc:	b29a      	uxth	r2, r3
 8007fbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	60da      	str	r2, [r3, #12]
 8007fc4:	e002      	b.n	8007fcc <UART_SetConfig+0x300>
      }
      else
      {
        ret = HAL_ERROR;
 8007fc6:	2301      	movs	r3, #1
 8007fc8:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8007fcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007fce:	2201      	movs	r2, #1
 8007fd0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8007fd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007fd6:	2201      	movs	r2, #1
 8007fd8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007fdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007fde:	2200      	movs	r2, #0
 8007fe0:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8007fe2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007fe4:	2200      	movs	r2, #0
 8007fe6:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8007fe8:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 8007fec:	4618      	mov	r0, r3
 8007fee:	3750      	adds	r7, #80	; 0x50
 8007ff0:	46bd      	mov	sp, r7
 8007ff2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007ff6:	bf00      	nop
 8007ff8:	0800a060 	.word	0x0800a060

08007ffc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007ffc:	b480      	push	{r7}
 8007ffe:	b083      	sub	sp, #12
 8008000:	af00      	add	r7, sp, #0
 8008002:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008008:	f003 0308 	and.w	r3, r3, #8
 800800c:	2b00      	cmp	r3, #0
 800800e:	d00a      	beq.n	8008026 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	685b      	ldr	r3, [r3, #4]
 8008016:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	430a      	orrs	r2, r1
 8008024:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800802a:	f003 0301 	and.w	r3, r3, #1
 800802e:	2b00      	cmp	r3, #0
 8008030:	d00a      	beq.n	8008048 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	685b      	ldr	r3, [r3, #4]
 8008038:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	430a      	orrs	r2, r1
 8008046:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800804c:	f003 0302 	and.w	r3, r3, #2
 8008050:	2b00      	cmp	r3, #0
 8008052:	d00a      	beq.n	800806a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	685b      	ldr	r3, [r3, #4]
 800805a:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	430a      	orrs	r2, r1
 8008068:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800806e:	f003 0304 	and.w	r3, r3, #4
 8008072:	2b00      	cmp	r3, #0
 8008074:	d00a      	beq.n	800808c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	685b      	ldr	r3, [r3, #4]
 800807c:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	430a      	orrs	r2, r1
 800808a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008090:	f003 0310 	and.w	r3, r3, #16
 8008094:	2b00      	cmp	r3, #0
 8008096:	d00a      	beq.n	80080ae <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	689b      	ldr	r3, [r3, #8]
 800809e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	430a      	orrs	r2, r1
 80080ac:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80080b2:	f003 0320 	and.w	r3, r3, #32
 80080b6:	2b00      	cmp	r3, #0
 80080b8:	d00a      	beq.n	80080d0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	689b      	ldr	r3, [r3, #8]
 80080c0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	430a      	orrs	r2, r1
 80080ce:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80080d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80080d8:	2b00      	cmp	r3, #0
 80080da:	d01a      	beq.n	8008112 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	685b      	ldr	r3, [r3, #4]
 80080e2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	430a      	orrs	r2, r1
 80080f0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80080f6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80080fa:	d10a      	bne.n	8008112 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	685b      	ldr	r3, [r3, #4]
 8008102:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	430a      	orrs	r2, r1
 8008110:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008116:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800811a:	2b00      	cmp	r3, #0
 800811c:	d00a      	beq.n	8008134 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	685b      	ldr	r3, [r3, #4]
 8008124:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	430a      	orrs	r2, r1
 8008132:	605a      	str	r2, [r3, #4]
  }
}
 8008134:	bf00      	nop
 8008136:	370c      	adds	r7, #12
 8008138:	46bd      	mov	sp, r7
 800813a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800813e:	4770      	bx	lr

08008140 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008140:	b580      	push	{r7, lr}
 8008142:	b098      	sub	sp, #96	; 0x60
 8008144:	af02      	add	r7, sp, #8
 8008146:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	2200      	movs	r2, #0
 800814c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008150:	f7f9 f916 	bl	8001380 <HAL_GetTick>
 8008154:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	f003 0308 	and.w	r3, r3, #8
 8008160:	2b08      	cmp	r3, #8
 8008162:	d12f      	bne.n	80081c4 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008164:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008168:	9300      	str	r3, [sp, #0]
 800816a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800816c:	2200      	movs	r2, #0
 800816e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8008172:	6878      	ldr	r0, [r7, #4]
 8008174:	f000 f88e 	bl	8008294 <UART_WaitOnFlagUntilTimeout>
 8008178:	4603      	mov	r3, r0
 800817a:	2b00      	cmp	r3, #0
 800817c:	d022      	beq.n	80081c4 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008184:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008186:	e853 3f00 	ldrex	r3, [r3]
 800818a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800818c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800818e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008192:	653b      	str	r3, [r7, #80]	; 0x50
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	461a      	mov	r2, r3
 800819a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800819c:	647b      	str	r3, [r7, #68]	; 0x44
 800819e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081a0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80081a2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80081a4:	e841 2300 	strex	r3, r2, [r1]
 80081a8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80081aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80081ac:	2b00      	cmp	r3, #0
 80081ae:	d1e6      	bne.n	800817e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	2220      	movs	r2, #32
 80081b4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	2200      	movs	r2, #0
 80081bc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80081c0:	2303      	movs	r3, #3
 80081c2:	e063      	b.n	800828c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	f003 0304 	and.w	r3, r3, #4
 80081ce:	2b04      	cmp	r3, #4
 80081d0:	d149      	bne.n	8008266 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80081d2:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80081d6:	9300      	str	r3, [sp, #0]
 80081d8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80081da:	2200      	movs	r2, #0
 80081dc:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80081e0:	6878      	ldr	r0, [r7, #4]
 80081e2:	f000 f857 	bl	8008294 <UART_WaitOnFlagUntilTimeout>
 80081e6:	4603      	mov	r3, r0
 80081e8:	2b00      	cmp	r3, #0
 80081ea:	d03c      	beq.n	8008266 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081f4:	e853 3f00 	ldrex	r3, [r3]
 80081f8:	623b      	str	r3, [r7, #32]
   return(result);
 80081fa:	6a3b      	ldr	r3, [r7, #32]
 80081fc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008200:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	461a      	mov	r2, r3
 8008208:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800820a:	633b      	str	r3, [r7, #48]	; 0x30
 800820c:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800820e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008210:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008212:	e841 2300 	strex	r3, r2, [r1]
 8008216:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008218:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800821a:	2b00      	cmp	r3, #0
 800821c:	d1e6      	bne.n	80081ec <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	3308      	adds	r3, #8
 8008224:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008226:	693b      	ldr	r3, [r7, #16]
 8008228:	e853 3f00 	ldrex	r3, [r3]
 800822c:	60fb      	str	r3, [r7, #12]
   return(result);
 800822e:	68fb      	ldr	r3, [r7, #12]
 8008230:	f023 0301 	bic.w	r3, r3, #1
 8008234:	64bb      	str	r3, [r7, #72]	; 0x48
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	3308      	adds	r3, #8
 800823c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800823e:	61fa      	str	r2, [r7, #28]
 8008240:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008242:	69b9      	ldr	r1, [r7, #24]
 8008244:	69fa      	ldr	r2, [r7, #28]
 8008246:	e841 2300 	strex	r3, r2, [r1]
 800824a:	617b      	str	r3, [r7, #20]
   return(result);
 800824c:	697b      	ldr	r3, [r7, #20]
 800824e:	2b00      	cmp	r3, #0
 8008250:	d1e5      	bne.n	800821e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	2220      	movs	r2, #32
 8008256:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	2200      	movs	r2, #0
 800825e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008262:	2303      	movs	r3, #3
 8008264:	e012      	b.n	800828c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	2220      	movs	r2, #32
 800826a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	2220      	movs	r2, #32
 8008272:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	2200      	movs	r2, #0
 800827a:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	2200      	movs	r2, #0
 8008280:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	2200      	movs	r2, #0
 8008286:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800828a:	2300      	movs	r3, #0
}
 800828c:	4618      	mov	r0, r3
 800828e:	3758      	adds	r7, #88	; 0x58
 8008290:	46bd      	mov	sp, r7
 8008292:	bd80      	pop	{r7, pc}

08008294 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008294:	b580      	push	{r7, lr}
 8008296:	b084      	sub	sp, #16
 8008298:	af00      	add	r7, sp, #0
 800829a:	60f8      	str	r0, [r7, #12]
 800829c:	60b9      	str	r1, [r7, #8]
 800829e:	603b      	str	r3, [r7, #0]
 80082a0:	4613      	mov	r3, r2
 80082a2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80082a4:	e049      	b.n	800833a <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80082a6:	69bb      	ldr	r3, [r7, #24]
 80082a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80082ac:	d045      	beq.n	800833a <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80082ae:	f7f9 f867 	bl	8001380 <HAL_GetTick>
 80082b2:	4602      	mov	r2, r0
 80082b4:	683b      	ldr	r3, [r7, #0]
 80082b6:	1ad3      	subs	r3, r2, r3
 80082b8:	69ba      	ldr	r2, [r7, #24]
 80082ba:	429a      	cmp	r2, r3
 80082bc:	d302      	bcc.n	80082c4 <UART_WaitOnFlagUntilTimeout+0x30>
 80082be:	69bb      	ldr	r3, [r7, #24]
 80082c0:	2b00      	cmp	r3, #0
 80082c2:	d101      	bne.n	80082c8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80082c4:	2303      	movs	r3, #3
 80082c6:	e048      	b.n	800835a <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80082c8:	68fb      	ldr	r3, [r7, #12]
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	f003 0304 	and.w	r3, r3, #4
 80082d2:	2b00      	cmp	r3, #0
 80082d4:	d031      	beq.n	800833a <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80082d6:	68fb      	ldr	r3, [r7, #12]
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	69db      	ldr	r3, [r3, #28]
 80082dc:	f003 0308 	and.w	r3, r3, #8
 80082e0:	2b08      	cmp	r3, #8
 80082e2:	d110      	bne.n	8008306 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80082e4:	68fb      	ldr	r3, [r7, #12]
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	2208      	movs	r2, #8
 80082ea:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80082ec:	68f8      	ldr	r0, [r7, #12]
 80082ee:	f000 f95b 	bl	80085a8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80082f2:	68fb      	ldr	r3, [r7, #12]
 80082f4:	2208      	movs	r2, #8
 80082f6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80082fa:	68fb      	ldr	r3, [r7, #12]
 80082fc:	2200      	movs	r2, #0
 80082fe:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 8008302:	2301      	movs	r3, #1
 8008304:	e029      	b.n	800835a <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008306:	68fb      	ldr	r3, [r7, #12]
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	69db      	ldr	r3, [r3, #28]
 800830c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008310:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008314:	d111      	bne.n	800833a <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008316:	68fb      	ldr	r3, [r7, #12]
 8008318:	681b      	ldr	r3, [r3, #0]
 800831a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800831e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008320:	68f8      	ldr	r0, [r7, #12]
 8008322:	f000 f941 	bl	80085a8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008326:	68fb      	ldr	r3, [r7, #12]
 8008328:	2220      	movs	r2, #32
 800832a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800832e:	68fb      	ldr	r3, [r7, #12]
 8008330:	2200      	movs	r2, #0
 8008332:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8008336:	2303      	movs	r3, #3
 8008338:	e00f      	b.n	800835a <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800833a:	68fb      	ldr	r3, [r7, #12]
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	69da      	ldr	r2, [r3, #28]
 8008340:	68bb      	ldr	r3, [r7, #8]
 8008342:	4013      	ands	r3, r2
 8008344:	68ba      	ldr	r2, [r7, #8]
 8008346:	429a      	cmp	r2, r3
 8008348:	bf0c      	ite	eq
 800834a:	2301      	moveq	r3, #1
 800834c:	2300      	movne	r3, #0
 800834e:	b2db      	uxtb	r3, r3
 8008350:	461a      	mov	r2, r3
 8008352:	79fb      	ldrb	r3, [r7, #7]
 8008354:	429a      	cmp	r2, r3
 8008356:	d0a6      	beq.n	80082a6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008358:	2300      	movs	r3, #0
}
 800835a:	4618      	mov	r0, r3
 800835c:	3710      	adds	r7, #16
 800835e:	46bd      	mov	sp, r7
 8008360:	bd80      	pop	{r7, pc}
	...

08008364 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008364:	b480      	push	{r7}
 8008366:	b0a3      	sub	sp, #140	; 0x8c
 8008368:	af00      	add	r7, sp, #0
 800836a:	60f8      	str	r0, [r7, #12]
 800836c:	60b9      	str	r1, [r7, #8]
 800836e:	4613      	mov	r3, r2
 8008370:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8008372:	68fb      	ldr	r3, [r7, #12]
 8008374:	68ba      	ldr	r2, [r7, #8]
 8008376:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8008378:	68fb      	ldr	r3, [r7, #12]
 800837a:	88fa      	ldrh	r2, [r7, #6]
 800837c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 8008380:	68fb      	ldr	r3, [r7, #12]
 8008382:	88fa      	ldrh	r2, [r7, #6]
 8008384:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 8008388:	68fb      	ldr	r3, [r7, #12]
 800838a:	2200      	movs	r2, #0
 800838c:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800838e:	68fb      	ldr	r3, [r7, #12]
 8008390:	689b      	ldr	r3, [r3, #8]
 8008392:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008396:	d10e      	bne.n	80083b6 <UART_Start_Receive_IT+0x52>
 8008398:	68fb      	ldr	r3, [r7, #12]
 800839a:	691b      	ldr	r3, [r3, #16]
 800839c:	2b00      	cmp	r3, #0
 800839e:	d105      	bne.n	80083ac <UART_Start_Receive_IT+0x48>
 80083a0:	68fb      	ldr	r3, [r7, #12]
 80083a2:	f240 12ff 	movw	r2, #511	; 0x1ff
 80083a6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80083aa:	e02d      	b.n	8008408 <UART_Start_Receive_IT+0xa4>
 80083ac:	68fb      	ldr	r3, [r7, #12]
 80083ae:	22ff      	movs	r2, #255	; 0xff
 80083b0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80083b4:	e028      	b.n	8008408 <UART_Start_Receive_IT+0xa4>
 80083b6:	68fb      	ldr	r3, [r7, #12]
 80083b8:	689b      	ldr	r3, [r3, #8]
 80083ba:	2b00      	cmp	r3, #0
 80083bc:	d10d      	bne.n	80083da <UART_Start_Receive_IT+0x76>
 80083be:	68fb      	ldr	r3, [r7, #12]
 80083c0:	691b      	ldr	r3, [r3, #16]
 80083c2:	2b00      	cmp	r3, #0
 80083c4:	d104      	bne.n	80083d0 <UART_Start_Receive_IT+0x6c>
 80083c6:	68fb      	ldr	r3, [r7, #12]
 80083c8:	22ff      	movs	r2, #255	; 0xff
 80083ca:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80083ce:	e01b      	b.n	8008408 <UART_Start_Receive_IT+0xa4>
 80083d0:	68fb      	ldr	r3, [r7, #12]
 80083d2:	227f      	movs	r2, #127	; 0x7f
 80083d4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80083d8:	e016      	b.n	8008408 <UART_Start_Receive_IT+0xa4>
 80083da:	68fb      	ldr	r3, [r7, #12]
 80083dc:	689b      	ldr	r3, [r3, #8]
 80083de:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80083e2:	d10d      	bne.n	8008400 <UART_Start_Receive_IT+0x9c>
 80083e4:	68fb      	ldr	r3, [r7, #12]
 80083e6:	691b      	ldr	r3, [r3, #16]
 80083e8:	2b00      	cmp	r3, #0
 80083ea:	d104      	bne.n	80083f6 <UART_Start_Receive_IT+0x92>
 80083ec:	68fb      	ldr	r3, [r7, #12]
 80083ee:	227f      	movs	r2, #127	; 0x7f
 80083f0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80083f4:	e008      	b.n	8008408 <UART_Start_Receive_IT+0xa4>
 80083f6:	68fb      	ldr	r3, [r7, #12]
 80083f8:	223f      	movs	r2, #63	; 0x3f
 80083fa:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80083fe:	e003      	b.n	8008408 <UART_Start_Receive_IT+0xa4>
 8008400:	68fb      	ldr	r3, [r7, #12]
 8008402:	2200      	movs	r2, #0
 8008404:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008408:	68fb      	ldr	r3, [r7, #12]
 800840a:	2200      	movs	r2, #0
 800840c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008410:	68fb      	ldr	r3, [r7, #12]
 8008412:	2222      	movs	r2, #34	; 0x22
 8008414:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008418:	68fb      	ldr	r3, [r7, #12]
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	3308      	adds	r3, #8
 800841e:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008420:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008422:	e853 3f00 	ldrex	r3, [r3]
 8008426:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8008428:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800842a:	f043 0301 	orr.w	r3, r3, #1
 800842e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008432:	68fb      	ldr	r3, [r7, #12]
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	3308      	adds	r3, #8
 8008438:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800843c:	673a      	str	r2, [r7, #112]	; 0x70
 800843e:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008440:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8008442:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8008444:	e841 2300 	strex	r3, r2, [r1]
 8008448:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 800844a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800844c:	2b00      	cmp	r3, #0
 800844e:	d1e3      	bne.n	8008418 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8008450:	68fb      	ldr	r3, [r7, #12]
 8008452:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008454:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008458:	d14f      	bne.n	80084fa <UART_Start_Receive_IT+0x196>
 800845a:	68fb      	ldr	r3, [r7, #12]
 800845c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8008460:	88fa      	ldrh	r2, [r7, #6]
 8008462:	429a      	cmp	r2, r3
 8008464:	d349      	bcc.n	80084fa <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008466:	68fb      	ldr	r3, [r7, #12]
 8008468:	689b      	ldr	r3, [r3, #8]
 800846a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800846e:	d107      	bne.n	8008480 <UART_Start_Receive_IT+0x11c>
 8008470:	68fb      	ldr	r3, [r7, #12]
 8008472:	691b      	ldr	r3, [r3, #16]
 8008474:	2b00      	cmp	r3, #0
 8008476:	d103      	bne.n	8008480 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8008478:	68fb      	ldr	r3, [r7, #12]
 800847a:	4a47      	ldr	r2, [pc, #284]	; (8008598 <UART_Start_Receive_IT+0x234>)
 800847c:	675a      	str	r2, [r3, #116]	; 0x74
 800847e:	e002      	b.n	8008486 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8008480:	68fb      	ldr	r3, [r7, #12]
 8008482:	4a46      	ldr	r2, [pc, #280]	; (800859c <UART_Start_Receive_IT+0x238>)
 8008484:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8008486:	68fb      	ldr	r3, [r7, #12]
 8008488:	691b      	ldr	r3, [r3, #16]
 800848a:	2b00      	cmp	r3, #0
 800848c:	d01a      	beq.n	80084c4 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800848e:	68fb      	ldr	r3, [r7, #12]
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008494:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008496:	e853 3f00 	ldrex	r3, [r3]
 800849a:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800849c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800849e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80084a2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80084a6:	68fb      	ldr	r3, [r7, #12]
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	461a      	mov	r2, r3
 80084ac:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80084b0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80084b2:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084b4:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80084b6:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80084b8:	e841 2300 	strex	r3, r2, [r1]
 80084bc:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80084be:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80084c0:	2b00      	cmp	r3, #0
 80084c2:	d1e4      	bne.n	800848e <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80084c4:	68fb      	ldr	r3, [r7, #12]
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	3308      	adds	r3, #8
 80084ca:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80084ce:	e853 3f00 	ldrex	r3, [r3]
 80084d2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80084d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084d6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80084da:	67fb      	str	r3, [r7, #124]	; 0x7c
 80084dc:	68fb      	ldr	r3, [r7, #12]
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	3308      	adds	r3, #8
 80084e2:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80084e4:	64ba      	str	r2, [r7, #72]	; 0x48
 80084e6:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084e8:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80084ea:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80084ec:	e841 2300 	strex	r3, r2, [r1]
 80084f0:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80084f2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80084f4:	2b00      	cmp	r3, #0
 80084f6:	d1e5      	bne.n	80084c4 <UART_Start_Receive_IT+0x160>
 80084f8:	e046      	b.n	8008588 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80084fa:	68fb      	ldr	r3, [r7, #12]
 80084fc:	689b      	ldr	r3, [r3, #8]
 80084fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008502:	d107      	bne.n	8008514 <UART_Start_Receive_IT+0x1b0>
 8008504:	68fb      	ldr	r3, [r7, #12]
 8008506:	691b      	ldr	r3, [r3, #16]
 8008508:	2b00      	cmp	r3, #0
 800850a:	d103      	bne.n	8008514 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800850c:	68fb      	ldr	r3, [r7, #12]
 800850e:	4a24      	ldr	r2, [pc, #144]	; (80085a0 <UART_Start_Receive_IT+0x23c>)
 8008510:	675a      	str	r2, [r3, #116]	; 0x74
 8008512:	e002      	b.n	800851a <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8008514:	68fb      	ldr	r3, [r7, #12]
 8008516:	4a23      	ldr	r2, [pc, #140]	; (80085a4 <UART_Start_Receive_IT+0x240>)
 8008518:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800851a:	68fb      	ldr	r3, [r7, #12]
 800851c:	691b      	ldr	r3, [r3, #16]
 800851e:	2b00      	cmp	r3, #0
 8008520:	d019      	beq.n	8008556 <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8008522:	68fb      	ldr	r3, [r7, #12]
 8008524:	681b      	ldr	r3, [r3, #0]
 8008526:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008528:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800852a:	e853 3f00 	ldrex	r3, [r3]
 800852e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008530:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008532:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8008536:	677b      	str	r3, [r7, #116]	; 0x74
 8008538:	68fb      	ldr	r3, [r7, #12]
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	461a      	mov	r2, r3
 800853e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008540:	637b      	str	r3, [r7, #52]	; 0x34
 8008542:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008544:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008546:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008548:	e841 2300 	strex	r3, r2, [r1]
 800854c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800854e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008550:	2b00      	cmp	r3, #0
 8008552:	d1e6      	bne.n	8008522 <UART_Start_Receive_IT+0x1be>
 8008554:	e018      	b.n	8008588 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8008556:	68fb      	ldr	r3, [r7, #12]
 8008558:	681b      	ldr	r3, [r3, #0]
 800855a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800855c:	697b      	ldr	r3, [r7, #20]
 800855e:	e853 3f00 	ldrex	r3, [r3]
 8008562:	613b      	str	r3, [r7, #16]
   return(result);
 8008564:	693b      	ldr	r3, [r7, #16]
 8008566:	f043 0320 	orr.w	r3, r3, #32
 800856a:	67bb      	str	r3, [r7, #120]	; 0x78
 800856c:	68fb      	ldr	r3, [r7, #12]
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	461a      	mov	r2, r3
 8008572:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008574:	623b      	str	r3, [r7, #32]
 8008576:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008578:	69f9      	ldr	r1, [r7, #28]
 800857a:	6a3a      	ldr	r2, [r7, #32]
 800857c:	e841 2300 	strex	r3, r2, [r1]
 8008580:	61bb      	str	r3, [r7, #24]
   return(result);
 8008582:	69bb      	ldr	r3, [r7, #24]
 8008584:	2b00      	cmp	r3, #0
 8008586:	d1e6      	bne.n	8008556 <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 8008588:	2300      	movs	r3, #0
}
 800858a:	4618      	mov	r0, r3
 800858c:	378c      	adds	r7, #140	; 0x8c
 800858e:	46bd      	mov	sp, r7
 8008590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008594:	4770      	bx	lr
 8008596:	bf00      	nop
 8008598:	08008df1 	.word	0x08008df1
 800859c:	08008a81 	.word	0x08008a81
 80085a0:	080088bd 	.word	0x080088bd
 80085a4:	080086f9 	.word	0x080086f9

080085a8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80085a8:	b480      	push	{r7}
 80085aa:	b095      	sub	sp, #84	; 0x54
 80085ac:	af00      	add	r7, sp, #0
 80085ae:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80085b8:	e853 3f00 	ldrex	r3, [r3]
 80085bc:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80085be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085c0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80085c4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	681b      	ldr	r3, [r3, #0]
 80085ca:	461a      	mov	r2, r3
 80085cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80085ce:	643b      	str	r3, [r7, #64]	; 0x40
 80085d0:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085d2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80085d4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80085d6:	e841 2300 	strex	r3, r2, [r1]
 80085da:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80085dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085de:	2b00      	cmp	r3, #0
 80085e0:	d1e6      	bne.n	80085b0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	3308      	adds	r3, #8
 80085e8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085ea:	6a3b      	ldr	r3, [r7, #32]
 80085ec:	e853 3f00 	ldrex	r3, [r3]
 80085f0:	61fb      	str	r3, [r7, #28]
   return(result);
 80085f2:	69fb      	ldr	r3, [r7, #28]
 80085f4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80085f8:	f023 0301 	bic.w	r3, r3, #1
 80085fc:	64bb      	str	r3, [r7, #72]	; 0x48
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	681b      	ldr	r3, [r3, #0]
 8008602:	3308      	adds	r3, #8
 8008604:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008606:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008608:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800860a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800860c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800860e:	e841 2300 	strex	r3, r2, [r1]
 8008612:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008614:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008616:	2b00      	cmp	r3, #0
 8008618:	d1e3      	bne.n	80085e2 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800861e:	2b01      	cmp	r3, #1
 8008620:	d118      	bne.n	8008654 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008628:	68fb      	ldr	r3, [r7, #12]
 800862a:	e853 3f00 	ldrex	r3, [r3]
 800862e:	60bb      	str	r3, [r7, #8]
   return(result);
 8008630:	68bb      	ldr	r3, [r7, #8]
 8008632:	f023 0310 	bic.w	r3, r3, #16
 8008636:	647b      	str	r3, [r7, #68]	; 0x44
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	461a      	mov	r2, r3
 800863e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008640:	61bb      	str	r3, [r7, #24]
 8008642:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008644:	6979      	ldr	r1, [r7, #20]
 8008646:	69ba      	ldr	r2, [r7, #24]
 8008648:	e841 2300 	strex	r3, r2, [r1]
 800864c:	613b      	str	r3, [r7, #16]
   return(result);
 800864e:	693b      	ldr	r3, [r7, #16]
 8008650:	2b00      	cmp	r3, #0
 8008652:	d1e6      	bne.n	8008622 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	2220      	movs	r2, #32
 8008658:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	2200      	movs	r2, #0
 8008660:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	2200      	movs	r2, #0
 8008666:	675a      	str	r2, [r3, #116]	; 0x74
}
 8008668:	bf00      	nop
 800866a:	3754      	adds	r7, #84	; 0x54
 800866c:	46bd      	mov	sp, r7
 800866e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008672:	4770      	bx	lr

08008674 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008674:	b580      	push	{r7, lr}
 8008676:	b084      	sub	sp, #16
 8008678:	af00      	add	r7, sp, #0
 800867a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008680:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8008682:	68fb      	ldr	r3, [r7, #12]
 8008684:	2200      	movs	r2, #0
 8008686:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800868a:	68fb      	ldr	r3, [r7, #12]
 800868c:	2200      	movs	r2, #0
 800868e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008692:	68f8      	ldr	r0, [r7, #12]
 8008694:	f7ff fb04 	bl	8007ca0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008698:	bf00      	nop
 800869a:	3710      	adds	r7, #16
 800869c:	46bd      	mov	sp, r7
 800869e:	bd80      	pop	{r7, pc}

080086a0 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80086a0:	b580      	push	{r7, lr}
 80086a2:	b088      	sub	sp, #32
 80086a4:	af00      	add	r7, sp, #0
 80086a6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086ae:	68fb      	ldr	r3, [r7, #12]
 80086b0:	e853 3f00 	ldrex	r3, [r3]
 80086b4:	60bb      	str	r3, [r7, #8]
   return(result);
 80086b6:	68bb      	ldr	r3, [r7, #8]
 80086b8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80086bc:	61fb      	str	r3, [r7, #28]
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	461a      	mov	r2, r3
 80086c4:	69fb      	ldr	r3, [r7, #28]
 80086c6:	61bb      	str	r3, [r7, #24]
 80086c8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086ca:	6979      	ldr	r1, [r7, #20]
 80086cc:	69ba      	ldr	r2, [r7, #24]
 80086ce:	e841 2300 	strex	r3, r2, [r1]
 80086d2:	613b      	str	r3, [r7, #16]
   return(result);
 80086d4:	693b      	ldr	r3, [r7, #16]
 80086d6:	2b00      	cmp	r3, #0
 80086d8:	d1e6      	bne.n	80086a8 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	2220      	movs	r2, #32
 80086de:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	2200      	movs	r2, #0
 80086e6:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80086e8:	6878      	ldr	r0, [r7, #4]
 80086ea:	f7ff facf 	bl	8007c8c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80086ee:	bf00      	nop
 80086f0:	3720      	adds	r7, #32
 80086f2:	46bd      	mov	sp, r7
 80086f4:	bd80      	pop	{r7, pc}
	...

080086f8 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80086f8:	b580      	push	{r7, lr}
 80086fa:	b09c      	sub	sp, #112	; 0x70
 80086fc:	af00      	add	r7, sp, #0
 80086fe:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8008706:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008710:	2b22      	cmp	r3, #34	; 0x22
 8008712:	f040 80c3 	bne.w	800889c <UART_RxISR_8BIT+0x1a4>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	681b      	ldr	r3, [r3, #0]
 800871a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800871c:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8008720:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8008724:	b2d9      	uxtb	r1, r3
 8008726:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 800872a:	b2da      	uxtb	r2, r3
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008730:	400a      	ands	r2, r1
 8008732:	b2d2      	uxtb	r2, r2
 8008734:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800873a:	1c5a      	adds	r2, r3, #1
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008746:	b29b      	uxth	r3, r3
 8008748:	3b01      	subs	r3, #1
 800874a:	b29a      	uxth	r2, r3
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008758:	b29b      	uxth	r3, r3
 800875a:	2b00      	cmp	r3, #0
 800875c:	f040 80a6 	bne.w	80088ac <UART_RxISR_8BIT+0x1b4>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	681b      	ldr	r3, [r3, #0]
 8008764:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008766:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008768:	e853 3f00 	ldrex	r3, [r3]
 800876c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800876e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008770:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008774:	66bb      	str	r3, [r7, #104]	; 0x68
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	681b      	ldr	r3, [r3, #0]
 800877a:	461a      	mov	r2, r3
 800877c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800877e:	65bb      	str	r3, [r7, #88]	; 0x58
 8008780:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008782:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008784:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008786:	e841 2300 	strex	r3, r2, [r1]
 800878a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800878c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800878e:	2b00      	cmp	r3, #0
 8008790:	d1e6      	bne.n	8008760 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	681b      	ldr	r3, [r3, #0]
 8008796:	3308      	adds	r3, #8
 8008798:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800879a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800879c:	e853 3f00 	ldrex	r3, [r3]
 80087a0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80087a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80087a4:	f023 0301 	bic.w	r3, r3, #1
 80087a8:	667b      	str	r3, [r7, #100]	; 0x64
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	681b      	ldr	r3, [r3, #0]
 80087ae:	3308      	adds	r3, #8
 80087b0:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80087b2:	647a      	str	r2, [r7, #68]	; 0x44
 80087b4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087b6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80087b8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80087ba:	e841 2300 	strex	r3, r2, [r1]
 80087be:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80087c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80087c2:	2b00      	cmp	r3, #0
 80087c4:	d1e5      	bne.n	8008792 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	2220      	movs	r2, #32
 80087ca:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	2200      	movs	r2, #0
 80087d2:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	2200      	movs	r2, #0
 80087d8:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	681b      	ldr	r3, [r3, #0]
 80087de:	4a35      	ldr	r2, [pc, #212]	; (80088b4 <UART_RxISR_8BIT+0x1bc>)
 80087e0:	4293      	cmp	r3, r2
 80087e2:	d024      	beq.n	800882e <UART_RxISR_8BIT+0x136>
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	4a33      	ldr	r2, [pc, #204]	; (80088b8 <UART_RxISR_8BIT+0x1c0>)
 80087ea:	4293      	cmp	r3, r2
 80087ec:	d01f      	beq.n	800882e <UART_RxISR_8BIT+0x136>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	685b      	ldr	r3, [r3, #4]
 80087f4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80087f8:	2b00      	cmp	r3, #0
 80087fa:	d018      	beq.n	800882e <UART_RxISR_8BIT+0x136>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	681b      	ldr	r3, [r3, #0]
 8008800:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008802:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008804:	e853 3f00 	ldrex	r3, [r3]
 8008808:	623b      	str	r3, [r7, #32]
   return(result);
 800880a:	6a3b      	ldr	r3, [r7, #32]
 800880c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8008810:	663b      	str	r3, [r7, #96]	; 0x60
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	461a      	mov	r2, r3
 8008818:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800881a:	633b      	str	r3, [r7, #48]	; 0x30
 800881c:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800881e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008820:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008822:	e841 2300 	strex	r3, r2, [r1]
 8008826:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008828:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800882a:	2b00      	cmp	r3, #0
 800882c:	d1e6      	bne.n	80087fc <UART_RxISR_8BIT+0x104>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008832:	2b01      	cmp	r3, #1
 8008834:	d12e      	bne.n	8008894 <UART_RxISR_8BIT+0x19c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	2200      	movs	r2, #0
 800883a:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	681b      	ldr	r3, [r3, #0]
 8008840:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008842:	693b      	ldr	r3, [r7, #16]
 8008844:	e853 3f00 	ldrex	r3, [r3]
 8008848:	60fb      	str	r3, [r7, #12]
   return(result);
 800884a:	68fb      	ldr	r3, [r7, #12]
 800884c:	f023 0310 	bic.w	r3, r3, #16
 8008850:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	681b      	ldr	r3, [r3, #0]
 8008856:	461a      	mov	r2, r3
 8008858:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800885a:	61fb      	str	r3, [r7, #28]
 800885c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800885e:	69b9      	ldr	r1, [r7, #24]
 8008860:	69fa      	ldr	r2, [r7, #28]
 8008862:	e841 2300 	strex	r3, r2, [r1]
 8008866:	617b      	str	r3, [r7, #20]
   return(result);
 8008868:	697b      	ldr	r3, [r7, #20]
 800886a:	2b00      	cmp	r3, #0
 800886c:	d1e6      	bne.n	800883c <UART_RxISR_8BIT+0x144>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	681b      	ldr	r3, [r3, #0]
 8008872:	69db      	ldr	r3, [r3, #28]
 8008874:	f003 0310 	and.w	r3, r3, #16
 8008878:	2b10      	cmp	r3, #16
 800887a:	d103      	bne.n	8008884 <UART_RxISR_8BIT+0x18c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	681b      	ldr	r3, [r3, #0]
 8008880:	2210      	movs	r2, #16
 8008882:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800888a:	4619      	mov	r1, r3
 800888c:	6878      	ldr	r0, [r7, #4]
 800888e:	f7ff fa11 	bl	8007cb4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008892:	e00b      	b.n	80088ac <UART_RxISR_8BIT+0x1b4>
        HAL_UART_RxCpltCallback(huart);
 8008894:	6878      	ldr	r0, [r7, #4]
 8008896:	f7f7 fe99 	bl	80005cc <HAL_UART_RxCpltCallback>
}
 800889a:	e007      	b.n	80088ac <UART_RxISR_8BIT+0x1b4>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	699a      	ldr	r2, [r3, #24]
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	f042 0208 	orr.w	r2, r2, #8
 80088aa:	619a      	str	r2, [r3, #24]
}
 80088ac:	bf00      	nop
 80088ae:	3770      	adds	r7, #112	; 0x70
 80088b0:	46bd      	mov	sp, r7
 80088b2:	bd80      	pop	{r7, pc}
 80088b4:	46002400 	.word	0x46002400
 80088b8:	56002400 	.word	0x56002400

080088bc <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80088bc:	b580      	push	{r7, lr}
 80088be:	b09c      	sub	sp, #112	; 0x70
 80088c0:	af00      	add	r7, sp, #0
 80088c2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80088ca:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80088d4:	2b22      	cmp	r3, #34	; 0x22
 80088d6:	f040 80c3 	bne.w	8008a60 <UART_RxISR_16BIT+0x1a4>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	681b      	ldr	r3, [r3, #0]
 80088de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088e0:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80088e8:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 80088ea:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 80088ee:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 80088f2:	4013      	ands	r3, r2
 80088f4:	b29a      	uxth	r2, r3
 80088f6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80088f8:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80088fe:	1c9a      	adds	r2, r3, #2
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800890a:	b29b      	uxth	r3, r3
 800890c:	3b01      	subs	r3, #1
 800890e:	b29a      	uxth	r2, r3
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800891c:	b29b      	uxth	r3, r3
 800891e:	2b00      	cmp	r3, #0
 8008920:	f040 80a6 	bne.w	8008a70 <UART_RxISR_16BIT+0x1b4>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	681b      	ldr	r3, [r3, #0]
 8008928:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800892a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800892c:	e853 3f00 	ldrex	r3, [r3]
 8008930:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8008932:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008934:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008938:	667b      	str	r3, [r7, #100]	; 0x64
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	681b      	ldr	r3, [r3, #0]
 800893e:	461a      	mov	r2, r3
 8008940:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008942:	657b      	str	r3, [r7, #84]	; 0x54
 8008944:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008946:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8008948:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800894a:	e841 2300 	strex	r3, r2, [r1]
 800894e:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8008950:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008952:	2b00      	cmp	r3, #0
 8008954:	d1e6      	bne.n	8008924 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	681b      	ldr	r3, [r3, #0]
 800895a:	3308      	adds	r3, #8
 800895c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800895e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008960:	e853 3f00 	ldrex	r3, [r3]
 8008964:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008966:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008968:	f023 0301 	bic.w	r3, r3, #1
 800896c:	663b      	str	r3, [r7, #96]	; 0x60
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	681b      	ldr	r3, [r3, #0]
 8008972:	3308      	adds	r3, #8
 8008974:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8008976:	643a      	str	r2, [r7, #64]	; 0x40
 8008978:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800897a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800897c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800897e:	e841 2300 	strex	r3, r2, [r1]
 8008982:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008984:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008986:	2b00      	cmp	r3, #0
 8008988:	d1e5      	bne.n	8008956 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	2220      	movs	r2, #32
 800898e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	2200      	movs	r2, #0
 8008996:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	2200      	movs	r2, #0
 800899c:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	681b      	ldr	r3, [r3, #0]
 80089a2:	4a35      	ldr	r2, [pc, #212]	; (8008a78 <UART_RxISR_16BIT+0x1bc>)
 80089a4:	4293      	cmp	r3, r2
 80089a6:	d024      	beq.n	80089f2 <UART_RxISR_16BIT+0x136>
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	681b      	ldr	r3, [r3, #0]
 80089ac:	4a33      	ldr	r2, [pc, #204]	; (8008a7c <UART_RxISR_16BIT+0x1c0>)
 80089ae:	4293      	cmp	r3, r2
 80089b0:	d01f      	beq.n	80089f2 <UART_RxISR_16BIT+0x136>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	681b      	ldr	r3, [r3, #0]
 80089b6:	685b      	ldr	r3, [r3, #4]
 80089b8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80089bc:	2b00      	cmp	r3, #0
 80089be:	d018      	beq.n	80089f2 <UART_RxISR_16BIT+0x136>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	681b      	ldr	r3, [r3, #0]
 80089c4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089c6:	6a3b      	ldr	r3, [r7, #32]
 80089c8:	e853 3f00 	ldrex	r3, [r3]
 80089cc:	61fb      	str	r3, [r7, #28]
   return(result);
 80089ce:	69fb      	ldr	r3, [r7, #28]
 80089d0:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80089d4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	681b      	ldr	r3, [r3, #0]
 80089da:	461a      	mov	r2, r3
 80089dc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80089de:	62fb      	str	r3, [r7, #44]	; 0x2c
 80089e0:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089e2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80089e4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80089e6:	e841 2300 	strex	r3, r2, [r1]
 80089ea:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80089ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089ee:	2b00      	cmp	r3, #0
 80089f0:	d1e6      	bne.n	80089c0 <UART_RxISR_16BIT+0x104>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80089f6:	2b01      	cmp	r3, #1
 80089f8:	d12e      	bne.n	8008a58 <UART_RxISR_16BIT+0x19c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	2200      	movs	r2, #0
 80089fe:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a06:	68fb      	ldr	r3, [r7, #12]
 8008a08:	e853 3f00 	ldrex	r3, [r3]
 8008a0c:	60bb      	str	r3, [r7, #8]
   return(result);
 8008a0e:	68bb      	ldr	r3, [r7, #8]
 8008a10:	f023 0310 	bic.w	r3, r3, #16
 8008a14:	65bb      	str	r3, [r7, #88]	; 0x58
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	681b      	ldr	r3, [r3, #0]
 8008a1a:	461a      	mov	r2, r3
 8008a1c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008a1e:	61bb      	str	r3, [r7, #24]
 8008a20:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a22:	6979      	ldr	r1, [r7, #20]
 8008a24:	69ba      	ldr	r2, [r7, #24]
 8008a26:	e841 2300 	strex	r3, r2, [r1]
 8008a2a:	613b      	str	r3, [r7, #16]
   return(result);
 8008a2c:	693b      	ldr	r3, [r7, #16]
 8008a2e:	2b00      	cmp	r3, #0
 8008a30:	d1e6      	bne.n	8008a00 <UART_RxISR_16BIT+0x144>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	681b      	ldr	r3, [r3, #0]
 8008a36:	69db      	ldr	r3, [r3, #28]
 8008a38:	f003 0310 	and.w	r3, r3, #16
 8008a3c:	2b10      	cmp	r3, #16
 8008a3e:	d103      	bne.n	8008a48 <UART_RxISR_16BIT+0x18c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	681b      	ldr	r3, [r3, #0]
 8008a44:	2210      	movs	r2, #16
 8008a46:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008a4e:	4619      	mov	r1, r3
 8008a50:	6878      	ldr	r0, [r7, #4]
 8008a52:	f7ff f92f 	bl	8007cb4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008a56:	e00b      	b.n	8008a70 <UART_RxISR_16BIT+0x1b4>
        HAL_UART_RxCpltCallback(huart);
 8008a58:	6878      	ldr	r0, [r7, #4]
 8008a5a:	f7f7 fdb7 	bl	80005cc <HAL_UART_RxCpltCallback>
}
 8008a5e:	e007      	b.n	8008a70 <UART_RxISR_16BIT+0x1b4>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	681b      	ldr	r3, [r3, #0]
 8008a64:	699a      	ldr	r2, [r3, #24]
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	681b      	ldr	r3, [r3, #0]
 8008a6a:	f042 0208 	orr.w	r2, r2, #8
 8008a6e:	619a      	str	r2, [r3, #24]
}
 8008a70:	bf00      	nop
 8008a72:	3770      	adds	r7, #112	; 0x70
 8008a74:	46bd      	mov	sp, r7
 8008a76:	bd80      	pop	{r7, pc}
 8008a78:	46002400 	.word	0x46002400
 8008a7c:	56002400 	.word	0x56002400

08008a80 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8008a80:	b580      	push	{r7, lr}
 8008a82:	b0ac      	sub	sp, #176	; 0xb0
 8008a84:	af00      	add	r7, sp, #0
 8008a86:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8008a8e:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	681b      	ldr	r3, [r3, #0]
 8008a96:	69db      	ldr	r3, [r3, #28]
 8008a98:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	681b      	ldr	r3, [r3, #0]
 8008aa0:	681b      	ldr	r3, [r3, #0]
 8008aa2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	681b      	ldr	r3, [r3, #0]
 8008aaa:	689b      	ldr	r3, [r3, #8]
 8008aac:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008ab6:	2b22      	cmp	r3, #34	; 0x22
 8008ab8:	f040 8187 	bne.w	8008dca <UART_RxISR_8BIT_FIFOEN+0x34a>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8008ac2:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8008ac6:	e12a      	b.n	8008d1e <UART_RxISR_8BIT_FIFOEN+0x29e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	681b      	ldr	r3, [r3, #0]
 8008acc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ace:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8008ad2:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 8008ad6:	b2d9      	uxtb	r1, r3
 8008ad8:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8008adc:	b2da      	uxtb	r2, r3
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008ae2:	400a      	ands	r2, r1
 8008ae4:	b2d2      	uxtb	r2, r2
 8008ae6:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008aec:	1c5a      	adds	r2, r3, #1
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008af8:	b29b      	uxth	r3, r3
 8008afa:	3b01      	subs	r3, #1
 8008afc:	b29a      	uxth	r2, r3
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	69db      	ldr	r3, [r3, #28]
 8008b0a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8008b0e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008b12:	f003 0307 	and.w	r3, r3, #7
 8008b16:	2b00      	cmp	r3, #0
 8008b18:	d053      	beq.n	8008bc2 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008b1a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008b1e:	f003 0301 	and.w	r3, r3, #1
 8008b22:	2b00      	cmp	r3, #0
 8008b24:	d011      	beq.n	8008b4a <UART_RxISR_8BIT_FIFOEN+0xca>
 8008b26:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8008b2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008b2e:	2b00      	cmp	r3, #0
 8008b30:	d00b      	beq.n	8008b4a <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	681b      	ldr	r3, [r3, #0]
 8008b36:	2201      	movs	r2, #1
 8008b38:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008b40:	f043 0201 	orr.w	r2, r3, #1
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008b4a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008b4e:	f003 0302 	and.w	r3, r3, #2
 8008b52:	2b00      	cmp	r3, #0
 8008b54:	d011      	beq.n	8008b7a <UART_RxISR_8BIT_FIFOEN+0xfa>
 8008b56:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008b5a:	f003 0301 	and.w	r3, r3, #1
 8008b5e:	2b00      	cmp	r3, #0
 8008b60:	d00b      	beq.n	8008b7a <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	681b      	ldr	r3, [r3, #0]
 8008b66:	2202      	movs	r2, #2
 8008b68:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008b70:	f043 0204 	orr.w	r2, r3, #4
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008b7a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008b7e:	f003 0304 	and.w	r3, r3, #4
 8008b82:	2b00      	cmp	r3, #0
 8008b84:	d011      	beq.n	8008baa <UART_RxISR_8BIT_FIFOEN+0x12a>
 8008b86:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008b8a:	f003 0301 	and.w	r3, r3, #1
 8008b8e:	2b00      	cmp	r3, #0
 8008b90:	d00b      	beq.n	8008baa <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	681b      	ldr	r3, [r3, #0]
 8008b96:	2204      	movs	r2, #4
 8008b98:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008ba0:	f043 0202 	orr.w	r2, r3, #2
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008bb0:	2b00      	cmp	r3, #0
 8008bb2:	d006      	beq.n	8008bc2 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008bb4:	6878      	ldr	r0, [r7, #4]
 8008bb6:	f7ff f873 	bl	8007ca0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	2200      	movs	r2, #0
 8008bbe:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008bc8:	b29b      	uxth	r3, r3
 8008bca:	2b00      	cmp	r3, #0
 8008bcc:	f040 80a7 	bne.w	8008d1e <UART_RxISR_8BIT_FIFOEN+0x29e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	681b      	ldr	r3, [r3, #0]
 8008bd4:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008bd6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008bd8:	e853 3f00 	ldrex	r3, [r3]
 8008bdc:	66fb      	str	r3, [r7, #108]	; 0x6c
   return(result);
 8008bde:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008be0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008be4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	681b      	ldr	r3, [r3, #0]
 8008bec:	461a      	mov	r2, r3
 8008bee:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008bf2:	67fb      	str	r3, [r7, #124]	; 0x7c
 8008bf4:	67ba      	str	r2, [r7, #120]	; 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008bf6:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8008bf8:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8008bfa:	e841 2300 	strex	r3, r2, [r1]
 8008bfe:	677b      	str	r3, [r7, #116]	; 0x74
   return(result);
 8008c00:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008c02:	2b00      	cmp	r3, #0
 8008c04:	d1e4      	bne.n	8008bd0 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	681b      	ldr	r3, [r3, #0]
 8008c0a:	3308      	adds	r3, #8
 8008c0c:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c0e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008c10:	e853 3f00 	ldrex	r3, [r3]
 8008c14:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 8008c16:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008c18:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008c1c:	f023 0301 	bic.w	r3, r3, #1
 8008c20:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	681b      	ldr	r3, [r3, #0]
 8008c28:	3308      	adds	r3, #8
 8008c2a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8008c2e:	66ba      	str	r2, [r7, #104]	; 0x68
 8008c30:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c32:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8008c34:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008c36:	e841 2300 	strex	r3, r2, [r1]
 8008c3a:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8008c3c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008c3e:	2b00      	cmp	r3, #0
 8008c40:	d1e1      	bne.n	8008c06 <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	2220      	movs	r2, #32
 8008c46:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	2200      	movs	r2, #0
 8008c4e:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	2200      	movs	r2, #0
 8008c54:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	681b      	ldr	r3, [r3, #0]
 8008c5a:	4a62      	ldr	r2, [pc, #392]	; (8008de4 <UART_RxISR_8BIT_FIFOEN+0x364>)
 8008c5c:	4293      	cmp	r3, r2
 8008c5e:	d026      	beq.n	8008cae <UART_RxISR_8BIT_FIFOEN+0x22e>
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	681b      	ldr	r3, [r3, #0]
 8008c64:	4a60      	ldr	r2, [pc, #384]	; (8008de8 <UART_RxISR_8BIT_FIFOEN+0x368>)
 8008c66:	4293      	cmp	r3, r2
 8008c68:	d021      	beq.n	8008cae <UART_RxISR_8BIT_FIFOEN+0x22e>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	681b      	ldr	r3, [r3, #0]
 8008c6e:	685b      	ldr	r3, [r3, #4]
 8008c70:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008c74:	2b00      	cmp	r3, #0
 8008c76:	d01a      	beq.n	8008cae <UART_RxISR_8BIT_FIFOEN+0x22e>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	681b      	ldr	r3, [r3, #0]
 8008c7c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c7e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008c80:	e853 3f00 	ldrex	r3, [r3]
 8008c84:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8008c86:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008c88:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8008c8c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	681b      	ldr	r3, [r3, #0]
 8008c94:	461a      	mov	r2, r3
 8008c96:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008c9a:	657b      	str	r3, [r7, #84]	; 0x54
 8008c9c:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c9e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8008ca0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008ca2:	e841 2300 	strex	r3, r2, [r1]
 8008ca6:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8008ca8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008caa:	2b00      	cmp	r3, #0
 8008cac:	d1e4      	bne.n	8008c78 <UART_RxISR_8BIT_FIFOEN+0x1f8>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008cb2:	2b01      	cmp	r3, #1
 8008cb4:	d130      	bne.n	8008d18 <UART_RxISR_8BIT_FIFOEN+0x298>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	2200      	movs	r2, #0
 8008cba:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	681b      	ldr	r3, [r3, #0]
 8008cc0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008cc2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008cc4:	e853 3f00 	ldrex	r3, [r3]
 8008cc8:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008cca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ccc:	f023 0310 	bic.w	r3, r3, #16
 8008cd0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	681b      	ldr	r3, [r3, #0]
 8008cd8:	461a      	mov	r2, r3
 8008cda:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008cde:	643b      	str	r3, [r7, #64]	; 0x40
 8008ce0:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ce2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008ce4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008ce6:	e841 2300 	strex	r3, r2, [r1]
 8008cea:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008cec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008cee:	2b00      	cmp	r3, #0
 8008cf0:	d1e4      	bne.n	8008cbc <UART_RxISR_8BIT_FIFOEN+0x23c>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	681b      	ldr	r3, [r3, #0]
 8008cf6:	69db      	ldr	r3, [r3, #28]
 8008cf8:	f003 0310 	and.w	r3, r3, #16
 8008cfc:	2b10      	cmp	r3, #16
 8008cfe:	d103      	bne.n	8008d08 <UART_RxISR_8BIT_FIFOEN+0x288>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	681b      	ldr	r3, [r3, #0]
 8008d04:	2210      	movs	r2, #16
 8008d06:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008d0e:	4619      	mov	r1, r3
 8008d10:	6878      	ldr	r0, [r7, #4]
 8008d12:	f7fe ffcf 	bl	8007cb4 <HAL_UARTEx_RxEventCallback>
 8008d16:	e002      	b.n	8008d1e <UART_RxISR_8BIT_FIFOEN+0x29e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8008d18:	6878      	ldr	r0, [r7, #4]
 8008d1a:	f7f7 fc57 	bl	80005cc <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8008d1e:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 8008d22:	2b00      	cmp	r3, #0
 8008d24:	d006      	beq.n	8008d34 <UART_RxISR_8BIT_FIFOEN+0x2b4>
 8008d26:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008d2a:	f003 0320 	and.w	r3, r3, #32
 8008d2e:	2b00      	cmp	r3, #0
 8008d30:	f47f aeca 	bne.w	8008ac8 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008d3a:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8008d3e:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8008d42:	2b00      	cmp	r3, #0
 8008d44:	d049      	beq.n	8008dda <UART_RxISR_8BIT_FIFOEN+0x35a>
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8008d4c:	f8b7 208a 	ldrh.w	r2, [r7, #138]	; 0x8a
 8008d50:	429a      	cmp	r2, r3
 8008d52:	d242      	bcs.n	8008dda <UART_RxISR_8BIT_FIFOEN+0x35a>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	681b      	ldr	r3, [r3, #0]
 8008d58:	3308      	adds	r3, #8
 8008d5a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d5c:	6a3b      	ldr	r3, [r7, #32]
 8008d5e:	e853 3f00 	ldrex	r3, [r3]
 8008d62:	61fb      	str	r3, [r7, #28]
   return(result);
 8008d64:	69fb      	ldr	r3, [r7, #28]
 8008d66:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008d6a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	681b      	ldr	r3, [r3, #0]
 8008d72:	3308      	adds	r3, #8
 8008d74:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8008d78:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008d7a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d7c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008d7e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008d80:	e841 2300 	strex	r3, r2, [r1]
 8008d84:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008d86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d88:	2b00      	cmp	r3, #0
 8008d8a:	d1e3      	bne.n	8008d54 <UART_RxISR_8BIT_FIFOEN+0x2d4>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	4a17      	ldr	r2, [pc, #92]	; (8008dec <UART_RxISR_8BIT_FIFOEN+0x36c>)
 8008d90:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	681b      	ldr	r3, [r3, #0]
 8008d96:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d98:	68fb      	ldr	r3, [r7, #12]
 8008d9a:	e853 3f00 	ldrex	r3, [r3]
 8008d9e:	60bb      	str	r3, [r7, #8]
   return(result);
 8008da0:	68bb      	ldr	r3, [r7, #8]
 8008da2:	f043 0320 	orr.w	r3, r3, #32
 8008da6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	681b      	ldr	r3, [r3, #0]
 8008dae:	461a      	mov	r2, r3
 8008db0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8008db4:	61bb      	str	r3, [r7, #24]
 8008db6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008db8:	6979      	ldr	r1, [r7, #20]
 8008dba:	69ba      	ldr	r2, [r7, #24]
 8008dbc:	e841 2300 	strex	r3, r2, [r1]
 8008dc0:	613b      	str	r3, [r7, #16]
   return(result);
 8008dc2:	693b      	ldr	r3, [r7, #16]
 8008dc4:	2b00      	cmp	r3, #0
 8008dc6:	d1e4      	bne.n	8008d92 <UART_RxISR_8BIT_FIFOEN+0x312>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008dc8:	e007      	b.n	8008dda <UART_RxISR_8BIT_FIFOEN+0x35a>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	681b      	ldr	r3, [r3, #0]
 8008dce:	699a      	ldr	r2, [r3, #24]
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	681b      	ldr	r3, [r3, #0]
 8008dd4:	f042 0208 	orr.w	r2, r2, #8
 8008dd8:	619a      	str	r2, [r3, #24]
}
 8008dda:	bf00      	nop
 8008ddc:	37b0      	adds	r7, #176	; 0xb0
 8008dde:	46bd      	mov	sp, r7
 8008de0:	bd80      	pop	{r7, pc}
 8008de2:	bf00      	nop
 8008de4:	46002400 	.word	0x46002400
 8008de8:	56002400 	.word	0x56002400
 8008dec:	080086f9 	.word	0x080086f9

08008df0 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8008df0:	b580      	push	{r7, lr}
 8008df2:	b0ae      	sub	sp, #184	; 0xb8
 8008df4:	af00      	add	r7, sp, #0
 8008df6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8008dfe:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	681b      	ldr	r3, [r3, #0]
 8008e06:	69db      	ldr	r3, [r3, #28]
 8008e08:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	681b      	ldr	r3, [r3, #0]
 8008e10:	681b      	ldr	r3, [r3, #0]
 8008e12:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	681b      	ldr	r3, [r3, #0]
 8008e1a:	689b      	ldr	r3, [r3, #8]
 8008e1c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008e26:	2b22      	cmp	r3, #34	; 0x22
 8008e28:	f040 818b 	bne.w	8009142 <UART_RxISR_16BIT_FIFOEN+0x352>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8008e32:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8008e36:	e12e      	b.n	8009096 <UART_RxISR_16BIT_FIFOEN+0x2a6>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	681b      	ldr	r3, [r3, #0]
 8008e3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e3e:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008e46:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 8008e4a:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 8008e4e:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 8008e52:	4013      	ands	r3, r2
 8008e54:	b29a      	uxth	r2, r3
 8008e56:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008e5a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008e60:	1c9a      	adds	r2, r3, #2
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008e6c:	b29b      	uxth	r3, r3
 8008e6e:	3b01      	subs	r3, #1
 8008e70:	b29a      	uxth	r2, r3
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	681b      	ldr	r3, [r3, #0]
 8008e7c:	69db      	ldr	r3, [r3, #28]
 8008e7e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8008e82:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8008e86:	f003 0307 	and.w	r3, r3, #7
 8008e8a:	2b00      	cmp	r3, #0
 8008e8c:	d053      	beq.n	8008f36 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008e8e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8008e92:	f003 0301 	and.w	r3, r3, #1
 8008e96:	2b00      	cmp	r3, #0
 8008e98:	d011      	beq.n	8008ebe <UART_RxISR_16BIT_FIFOEN+0xce>
 8008e9a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008e9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008ea2:	2b00      	cmp	r3, #0
 8008ea4:	d00b      	beq.n	8008ebe <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	681b      	ldr	r3, [r3, #0]
 8008eaa:	2201      	movs	r2, #1
 8008eac:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008eb4:	f043 0201 	orr.w	r2, r3, #1
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008ebe:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8008ec2:	f003 0302 	and.w	r3, r3, #2
 8008ec6:	2b00      	cmp	r3, #0
 8008ec8:	d011      	beq.n	8008eee <UART_RxISR_16BIT_FIFOEN+0xfe>
 8008eca:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8008ece:	f003 0301 	and.w	r3, r3, #1
 8008ed2:	2b00      	cmp	r3, #0
 8008ed4:	d00b      	beq.n	8008eee <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	681b      	ldr	r3, [r3, #0]
 8008eda:	2202      	movs	r2, #2
 8008edc:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008ee4:	f043 0204 	orr.w	r2, r3, #4
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008eee:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8008ef2:	f003 0304 	and.w	r3, r3, #4
 8008ef6:	2b00      	cmp	r3, #0
 8008ef8:	d011      	beq.n	8008f1e <UART_RxISR_16BIT_FIFOEN+0x12e>
 8008efa:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8008efe:	f003 0301 	and.w	r3, r3, #1
 8008f02:	2b00      	cmp	r3, #0
 8008f04:	d00b      	beq.n	8008f1e <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	681b      	ldr	r3, [r3, #0]
 8008f0a:	2204      	movs	r2, #4
 8008f0c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008f14:	f043 0202 	orr.w	r2, r3, #2
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008f24:	2b00      	cmp	r3, #0
 8008f26:	d006      	beq.n	8008f36 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008f28:	6878      	ldr	r0, [r7, #4]
 8008f2a:	f7fe feb9 	bl	8007ca0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	2200      	movs	r2, #0
 8008f32:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008f3c:	b29b      	uxth	r3, r3
 8008f3e:	2b00      	cmp	r3, #0
 8008f40:	f040 80a9 	bne.w	8009096 <UART_RxISR_16BIT_FIFOEN+0x2a6>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	681b      	ldr	r3, [r3, #0]
 8008f48:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f4a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008f4c:	e853 3f00 	ldrex	r3, [r3]
 8008f50:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8008f52:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008f54:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008f58:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	681b      	ldr	r3, [r3, #0]
 8008f60:	461a      	mov	r2, r3
 8008f62:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008f66:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008f6a:	67fa      	str	r2, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f6c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8008f6e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8008f72:	e841 2300 	strex	r3, r2, [r1]
 8008f76:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8008f78:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008f7a:	2b00      	cmp	r3, #0
 8008f7c:	d1e2      	bne.n	8008f44 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	681b      	ldr	r3, [r3, #0]
 8008f82:	3308      	adds	r3, #8
 8008f84:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f86:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008f88:	e853 3f00 	ldrex	r3, [r3]
 8008f8c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8008f8e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008f90:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008f94:	f023 0301 	bic.w	r3, r3, #1
 8008f98:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	681b      	ldr	r3, [r3, #0]
 8008fa0:	3308      	adds	r3, #8
 8008fa2:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8008fa6:	66fa      	str	r2, [r7, #108]	; 0x6c
 8008fa8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008faa:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8008fac:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8008fae:	e841 2300 	strex	r3, r2, [r1]
 8008fb2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8008fb4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008fb6:	2b00      	cmp	r3, #0
 8008fb8:	d1e1      	bne.n	8008f7e <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	2220      	movs	r2, #32
 8008fbe:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	2200      	movs	r2, #0
 8008fc6:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	2200      	movs	r2, #0
 8008fcc:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	681b      	ldr	r3, [r3, #0]
 8008fd2:	4a62      	ldr	r2, [pc, #392]	; (800915c <UART_RxISR_16BIT_FIFOEN+0x36c>)
 8008fd4:	4293      	cmp	r3, r2
 8008fd6:	d026      	beq.n	8009026 <UART_RxISR_16BIT_FIFOEN+0x236>
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	681b      	ldr	r3, [r3, #0]
 8008fdc:	4a60      	ldr	r2, [pc, #384]	; (8009160 <UART_RxISR_16BIT_FIFOEN+0x370>)
 8008fde:	4293      	cmp	r3, r2
 8008fe0:	d021      	beq.n	8009026 <UART_RxISR_16BIT_FIFOEN+0x236>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	681b      	ldr	r3, [r3, #0]
 8008fe6:	685b      	ldr	r3, [r3, #4]
 8008fe8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008fec:	2b00      	cmp	r3, #0
 8008fee:	d01a      	beq.n	8009026 <UART_RxISR_16BIT_FIFOEN+0x236>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	681b      	ldr	r3, [r3, #0]
 8008ff4:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ff6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008ff8:	e853 3f00 	ldrex	r3, [r3]
 8008ffc:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8008ffe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009000:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8009004:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	681b      	ldr	r3, [r3, #0]
 800900c:	461a      	mov	r2, r3
 800900e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8009012:	65bb      	str	r3, [r7, #88]	; 0x58
 8009014:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009016:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8009018:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800901a:	e841 2300 	strex	r3, r2, [r1]
 800901e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8009020:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009022:	2b00      	cmp	r3, #0
 8009024:	d1e4      	bne.n	8008ff0 <UART_RxISR_16BIT_FIFOEN+0x200>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800902a:	2b01      	cmp	r3, #1
 800902c:	d130      	bne.n	8009090 <UART_RxISR_16BIT_FIFOEN+0x2a0>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	2200      	movs	r2, #0
 8009032:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	681b      	ldr	r3, [r3, #0]
 8009038:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800903a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800903c:	e853 3f00 	ldrex	r3, [r3]
 8009040:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009042:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009044:	f023 0310 	bic.w	r3, r3, #16
 8009048:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	681b      	ldr	r3, [r3, #0]
 8009050:	461a      	mov	r2, r3
 8009052:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009056:	647b      	str	r3, [r7, #68]	; 0x44
 8009058:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800905a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800905c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800905e:	e841 2300 	strex	r3, r2, [r1]
 8009062:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009064:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009066:	2b00      	cmp	r3, #0
 8009068:	d1e4      	bne.n	8009034 <UART_RxISR_16BIT_FIFOEN+0x244>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	681b      	ldr	r3, [r3, #0]
 800906e:	69db      	ldr	r3, [r3, #28]
 8009070:	f003 0310 	and.w	r3, r3, #16
 8009074:	2b10      	cmp	r3, #16
 8009076:	d103      	bne.n	8009080 <UART_RxISR_16BIT_FIFOEN+0x290>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	681b      	ldr	r3, [r3, #0]
 800907c:	2210      	movs	r2, #16
 800907e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8009086:	4619      	mov	r1, r3
 8009088:	6878      	ldr	r0, [r7, #4]
 800908a:	f7fe fe13 	bl	8007cb4 <HAL_UARTEx_RxEventCallback>
 800908e:	e002      	b.n	8009096 <UART_RxISR_16BIT_FIFOEN+0x2a6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8009090:	6878      	ldr	r0, [r7, #4]
 8009092:	f7f7 fa9b 	bl	80005cc <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8009096:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 800909a:	2b00      	cmp	r3, #0
 800909c:	d006      	beq.n	80090ac <UART_RxISR_16BIT_FIFOEN+0x2bc>
 800909e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80090a2:	f003 0320 	and.w	r3, r3, #32
 80090a6:	2b00      	cmp	r3, #0
 80090a8:	f47f aec6 	bne.w	8008e38 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80090b2:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80090b6:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 80090ba:	2b00      	cmp	r3, #0
 80090bc:	d049      	beq.n	8009152 <UART_RxISR_16BIT_FIFOEN+0x362>
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80090c4:	f8b7 208e 	ldrh.w	r2, [r7, #142]	; 0x8e
 80090c8:	429a      	cmp	r2, r3
 80090ca:	d242      	bcs.n	8009152 <UART_RxISR_16BIT_FIFOEN+0x362>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	681b      	ldr	r3, [r3, #0]
 80090d0:	3308      	adds	r3, #8
 80090d2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090d6:	e853 3f00 	ldrex	r3, [r3]
 80090da:	623b      	str	r3, [r7, #32]
   return(result);
 80090dc:	6a3b      	ldr	r3, [r7, #32]
 80090de:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80090e2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	681b      	ldr	r3, [r3, #0]
 80090ea:	3308      	adds	r3, #8
 80090ec:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 80090f0:	633a      	str	r2, [r7, #48]	; 0x30
 80090f2:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090f4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80090f6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80090f8:	e841 2300 	strex	r3, r2, [r1]
 80090fc:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80090fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009100:	2b00      	cmp	r3, #0
 8009102:	d1e3      	bne.n	80090cc <UART_RxISR_16BIT_FIFOEN+0x2dc>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	4a17      	ldr	r2, [pc, #92]	; (8009164 <UART_RxISR_16BIT_FIFOEN+0x374>)
 8009108:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	681b      	ldr	r3, [r3, #0]
 800910e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009110:	693b      	ldr	r3, [r7, #16]
 8009112:	e853 3f00 	ldrex	r3, [r3]
 8009116:	60fb      	str	r3, [r7, #12]
   return(result);
 8009118:	68fb      	ldr	r3, [r7, #12]
 800911a:	f043 0320 	orr.w	r3, r3, #32
 800911e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	681b      	ldr	r3, [r3, #0]
 8009126:	461a      	mov	r2, r3
 8009128:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800912c:	61fb      	str	r3, [r7, #28]
 800912e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009130:	69b9      	ldr	r1, [r7, #24]
 8009132:	69fa      	ldr	r2, [r7, #28]
 8009134:	e841 2300 	strex	r3, r2, [r1]
 8009138:	617b      	str	r3, [r7, #20]
   return(result);
 800913a:	697b      	ldr	r3, [r7, #20]
 800913c:	2b00      	cmp	r3, #0
 800913e:	d1e4      	bne.n	800910a <UART_RxISR_16BIT_FIFOEN+0x31a>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009140:	e007      	b.n	8009152 <UART_RxISR_16BIT_FIFOEN+0x362>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	681b      	ldr	r3, [r3, #0]
 8009146:	699a      	ldr	r2, [r3, #24]
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	681b      	ldr	r3, [r3, #0]
 800914c:	f042 0208 	orr.w	r2, r2, #8
 8009150:	619a      	str	r2, [r3, #24]
}
 8009152:	bf00      	nop
 8009154:	37b8      	adds	r7, #184	; 0xb8
 8009156:	46bd      	mov	sp, r7
 8009158:	bd80      	pop	{r7, pc}
 800915a:	bf00      	nop
 800915c:	46002400 	.word	0x46002400
 8009160:	56002400 	.word	0x56002400
 8009164:	080088bd 	.word	0x080088bd

08009168 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8009168:	b480      	push	{r7}
 800916a:	b083      	sub	sp, #12
 800916c:	af00      	add	r7, sp, #0
 800916e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8009170:	bf00      	nop
 8009172:	370c      	adds	r7, #12
 8009174:	46bd      	mov	sp, r7
 8009176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800917a:	4770      	bx	lr

0800917c <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800917c:	b480      	push	{r7}
 800917e:	b083      	sub	sp, #12
 8009180:	af00      	add	r7, sp, #0
 8009182:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8009184:	bf00      	nop
 8009186:	370c      	adds	r7, #12
 8009188:	46bd      	mov	sp, r7
 800918a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800918e:	4770      	bx	lr

08009190 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8009190:	b480      	push	{r7}
 8009192:	b085      	sub	sp, #20
 8009194:	af00      	add	r7, sp, #0
 8009196:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800919e:	2b01      	cmp	r3, #1
 80091a0:	d101      	bne.n	80091a6 <HAL_UARTEx_DisableFifoMode+0x16>
 80091a2:	2302      	movs	r3, #2
 80091a4:	e027      	b.n	80091f6 <HAL_UARTEx_DisableFifoMode+0x66>
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	2201      	movs	r2, #1
 80091aa:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	2224      	movs	r2, #36	; 0x24
 80091b2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	681b      	ldr	r3, [r3, #0]
 80091ba:	681b      	ldr	r3, [r3, #0]
 80091bc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	681b      	ldr	r3, [r3, #0]
 80091c2:	681a      	ldr	r2, [r3, #0]
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	681b      	ldr	r3, [r3, #0]
 80091c8:	f022 0201 	bic.w	r2, r2, #1
 80091cc:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80091ce:	68fb      	ldr	r3, [r7, #12]
 80091d0:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80091d4:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	2200      	movs	r2, #0
 80091da:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	681b      	ldr	r3, [r3, #0]
 80091e0:	68fa      	ldr	r2, [r7, #12]
 80091e2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	2220      	movs	r2, #32
 80091e8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	2200      	movs	r2, #0
 80091f0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80091f4:	2300      	movs	r3, #0
}
 80091f6:	4618      	mov	r0, r3
 80091f8:	3714      	adds	r7, #20
 80091fa:	46bd      	mov	sp, r7
 80091fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009200:	4770      	bx	lr

08009202 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009202:	b580      	push	{r7, lr}
 8009204:	b084      	sub	sp, #16
 8009206:	af00      	add	r7, sp, #0
 8009208:	6078      	str	r0, [r7, #4]
 800920a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8009212:	2b01      	cmp	r3, #1
 8009214:	d101      	bne.n	800921a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8009216:	2302      	movs	r3, #2
 8009218:	e02d      	b.n	8009276 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	2201      	movs	r2, #1
 800921e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	2224      	movs	r2, #36	; 0x24
 8009226:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	681b      	ldr	r3, [r3, #0]
 800922e:	681b      	ldr	r3, [r3, #0]
 8009230:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	681b      	ldr	r3, [r3, #0]
 8009236:	681a      	ldr	r2, [r3, #0]
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	681b      	ldr	r3, [r3, #0]
 800923c:	f022 0201 	bic.w	r2, r2, #1
 8009240:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	681b      	ldr	r3, [r3, #0]
 8009246:	689b      	ldr	r3, [r3, #8]
 8009248:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	681b      	ldr	r3, [r3, #0]
 8009250:	683a      	ldr	r2, [r7, #0]
 8009252:	430a      	orrs	r2, r1
 8009254:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009256:	6878      	ldr	r0, [r7, #4]
 8009258:	f000 f850 	bl	80092fc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	681b      	ldr	r3, [r3, #0]
 8009260:	68fa      	ldr	r2, [r7, #12]
 8009262:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	2220      	movs	r2, #32
 8009268:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	2200      	movs	r2, #0
 8009270:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8009274:	2300      	movs	r3, #0
}
 8009276:	4618      	mov	r0, r3
 8009278:	3710      	adds	r7, #16
 800927a:	46bd      	mov	sp, r7
 800927c:	bd80      	pop	{r7, pc}

0800927e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800927e:	b580      	push	{r7, lr}
 8009280:	b084      	sub	sp, #16
 8009282:	af00      	add	r7, sp, #0
 8009284:	6078      	str	r0, [r7, #4]
 8009286:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800928e:	2b01      	cmp	r3, #1
 8009290:	d101      	bne.n	8009296 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8009292:	2302      	movs	r3, #2
 8009294:	e02d      	b.n	80092f2 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	2201      	movs	r2, #1
 800929a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	2224      	movs	r2, #36	; 0x24
 80092a2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	681b      	ldr	r3, [r3, #0]
 80092aa:	681b      	ldr	r3, [r3, #0]
 80092ac:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	681b      	ldr	r3, [r3, #0]
 80092b2:	681a      	ldr	r2, [r3, #0]
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	681b      	ldr	r3, [r3, #0]
 80092b8:	f022 0201 	bic.w	r2, r2, #1
 80092bc:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	681b      	ldr	r3, [r3, #0]
 80092c2:	689b      	ldr	r3, [r3, #8]
 80092c4:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	681b      	ldr	r3, [r3, #0]
 80092cc:	683a      	ldr	r2, [r7, #0]
 80092ce:	430a      	orrs	r2, r1
 80092d0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80092d2:	6878      	ldr	r0, [r7, #4]
 80092d4:	f000 f812 	bl	80092fc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	681b      	ldr	r3, [r3, #0]
 80092dc:	68fa      	ldr	r2, [r7, #12]
 80092de:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	2220      	movs	r2, #32
 80092e4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	2200      	movs	r2, #0
 80092ec:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80092f0:	2300      	movs	r3, #0
}
 80092f2:	4618      	mov	r0, r3
 80092f4:	3710      	adds	r7, #16
 80092f6:	46bd      	mov	sp, r7
 80092f8:	bd80      	pop	{r7, pc}
	...

080092fc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80092fc:	b480      	push	{r7}
 80092fe:	b085      	sub	sp, #20
 8009300:	af00      	add	r7, sp, #0
 8009302:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009308:	2b00      	cmp	r3, #0
 800930a:	d108      	bne.n	800931e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	2201      	movs	r2, #1
 8009310:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	2201      	movs	r2, #1
 8009318:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800931c:	e031      	b.n	8009382 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800931e:	2308      	movs	r3, #8
 8009320:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8009322:	2308      	movs	r3, #8
 8009324:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	681b      	ldr	r3, [r3, #0]
 800932a:	689b      	ldr	r3, [r3, #8]
 800932c:	0e5b      	lsrs	r3, r3, #25
 800932e:	b2db      	uxtb	r3, r3
 8009330:	f003 0307 	and.w	r3, r3, #7
 8009334:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	681b      	ldr	r3, [r3, #0]
 800933a:	689b      	ldr	r3, [r3, #8]
 800933c:	0f5b      	lsrs	r3, r3, #29
 800933e:	b2db      	uxtb	r3, r3
 8009340:	f003 0307 	and.w	r3, r3, #7
 8009344:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009346:	7bbb      	ldrb	r3, [r7, #14]
 8009348:	7b3a      	ldrb	r2, [r7, #12]
 800934a:	4911      	ldr	r1, [pc, #68]	; (8009390 <UARTEx_SetNbDataToProcess+0x94>)
 800934c:	5c8a      	ldrb	r2, [r1, r2]
 800934e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8009352:	7b3a      	ldrb	r2, [r7, #12]
 8009354:	490f      	ldr	r1, [pc, #60]	; (8009394 <UARTEx_SetNbDataToProcess+0x98>)
 8009356:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009358:	fb93 f3f2 	sdiv	r3, r3, r2
 800935c:	b29a      	uxth	r2, r3
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009364:	7bfb      	ldrb	r3, [r7, #15]
 8009366:	7b7a      	ldrb	r2, [r7, #13]
 8009368:	4909      	ldr	r1, [pc, #36]	; (8009390 <UARTEx_SetNbDataToProcess+0x94>)
 800936a:	5c8a      	ldrb	r2, [r1, r2]
 800936c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8009370:	7b7a      	ldrb	r2, [r7, #13]
 8009372:	4908      	ldr	r1, [pc, #32]	; (8009394 <UARTEx_SetNbDataToProcess+0x98>)
 8009374:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009376:	fb93 f3f2 	sdiv	r3, r3, r2
 800937a:	b29a      	uxth	r2, r3
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8009382:	bf00      	nop
 8009384:	3714      	adds	r7, #20
 8009386:	46bd      	mov	sp, r7
 8009388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800938c:	4770      	bx	lr
 800938e:	bf00      	nop
 8009390:	0800a078 	.word	0x0800a078
 8009394:	0800a080 	.word	0x0800a080

08009398 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_DRD_TypeDef *USBx)
{
 8009398:	b480      	push	{r7}
 800939a:	b083      	sub	sp, #12
 800939c:	af00      	add	r7, sp, #0
 800939e:	6078      	str	r0, [r7, #4]
  /* Disable Host Mode */
  USBx->CNTR &= ~USB_CNTR_HOST;
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80093a4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	641a      	str	r2, [r3, #64]	; 0x40

  /* Force Reset IP */
  USBx->CNTR |= USB_CNTR_USBRST;
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80093b0:	f043 0201 	orr.w	r2, r3, #1
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	641a      	str	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80093b8:	2300      	movs	r3, #0
}
 80093ba:	4618      	mov	r0, r3
 80093bc:	370c      	adds	r7, #12
 80093be:	46bd      	mov	sp, r7
 80093c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093c4:	4770      	bx	lr

080093c6 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_DRD_TypeDef *USBx, USB_DRD_CfgTypeDef cfg)
{
 80093c6:	b084      	sub	sp, #16
 80093c8:	b580      	push	{r7, lr}
 80093ca:	b084      	sub	sp, #16
 80093cc:	af00      	add	r7, sp, #0
 80093ce:	6078      	str	r0, [r7, #4]
 80093d0:	f107 001c 	add.w	r0, r7, #28
 80093d4:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  UNUSED(cfg);

  if (USBx == NULL)
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	2b00      	cmp	r3, #0
 80093dc:	d101      	bne.n	80093e2 <USB_CoreInit+0x1c>
  {
    return HAL_ERROR;
 80093de:	2301      	movs	r3, #1
 80093e0:	e008      	b.n	80093f4 <USB_CoreInit+0x2e>
  }

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 80093e2:	6878      	ldr	r0, [r7, #4]
 80093e4:	f7ff ffd8 	bl	8009398 <USB_CoreReset>
 80093e8:	4603      	mov	r3, r0
 80093ea:	73fb      	strb	r3, [r7, #15]

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	2200      	movs	r2, #0
 80093f0:	645a      	str	r2, [r3, #68]	; 0x44

  return ret;
 80093f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80093f4:	4618      	mov	r0, r3
 80093f6:	3710      	adds	r7, #16
 80093f8:	46bd      	mov	sp, r7
 80093fa:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80093fe:	b004      	add	sp, #16
 8009400:	4770      	bx	lr

08009402 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_DRD_TypeDef *USBx)
{
 8009402:	b480      	push	{r7}
 8009404:	b085      	sub	sp, #20
 8009406:	af00      	add	r7, sp, #0
 8009408:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800940a:	f64b 7380 	movw	r3, #49024	; 0xbf80
 800940e:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= ~winterruptmask;
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009414:	68fb      	ldr	r3, [r7, #12]
 8009416:	43db      	mvns	r3, r3
 8009418:	401a      	ands	r2, r3
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	641a      	str	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800941e:	2300      	movs	r3, #0
}
 8009420:	4618      	mov	r0, r3
 8009422:	3714      	adds	r7, #20
 8009424:	46bd      	mov	sp, r7
 8009426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800942a:	4770      	bx	lr

0800942c <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_DRD_TypeDef *USBx, USB_DRD_ModeTypeDef mode)
{
 800942c:	b480      	push	{r7}
 800942e:	b083      	sub	sp, #12
 8009430:	af00      	add	r7, sp, #0
 8009432:	6078      	str	r0, [r7, #4]
 8009434:	460b      	mov	r3, r1
 8009436:	70fb      	strb	r3, [r7, #3]
  if (mode == USB_DEVICE_MODE)
 8009438:	78fb      	ldrb	r3, [r7, #3]
 800943a:	2b00      	cmp	r3, #0
 800943c:	d106      	bne.n	800944c <USB_SetCurrentMode+0x20>
  {
    USBx->CNTR &= ~USB_CNTR_HOST;
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009442:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	641a      	str	r2, [r3, #64]	; 0x40
 800944a:	e00b      	b.n	8009464 <USB_SetCurrentMode+0x38>
  }
  else if (mode == USB_HOST_MODE)
 800944c:	78fb      	ldrb	r3, [r7, #3]
 800944e:	2b01      	cmp	r3, #1
 8009450:	d106      	bne.n	8009460 <USB_SetCurrentMode+0x34>
  {
    USBx->CNTR |= USB_CNTR_HOST;
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009456:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	641a      	str	r2, [r3, #64]	; 0x40
 800945e:	e001      	b.n	8009464 <USB_SetCurrentMode+0x38>
  }
  else
  {
    return HAL_ERROR;
 8009460:	2301      	movs	r3, #1
 8009462:	e000      	b.n	8009466 <USB_SetCurrentMode+0x3a>
  }

  return HAL_OK;
 8009464:	2300      	movs	r3, #0
}
 8009466:	4618      	mov	r0, r3
 8009468:	370c      	adds	r7, #12
 800946a:	46bd      	mov	sp, r7
 800946c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009470:	4770      	bx	lr

08009472 <USB_HostInit>:
  * @param  cfg  pointer to a USB_DRD_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_DRD_TypeDef *USBx, USB_DRD_CfgTypeDef cfg)
{
 8009472:	b084      	sub	sp, #16
 8009474:	b480      	push	{r7}
 8009476:	b083      	sub	sp, #12
 8009478:	af00      	add	r7, sp, #0
 800947a:	6078      	str	r0, [r7, #4]
 800947c:	f107 0014 	add.w	r0, r7, #20
 8009480:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  UNUSED(cfg);

  /* Clear All Pending Interrupt */
  USBx->ISTR = 0U;
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	2200      	movs	r2, #0
 8009488:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable all interrupts */
  USBx->CNTR &= ~(USB_CNTR_CTRM | USB_CNTR_PMAOVRM | USB_CNTR_ERRM |
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800948e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009492:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009496:	687a      	ldr	r2, [r7, #4]
 8009498:	6413      	str	r3, [r2, #64]	; 0x40
                  USB_CNTR_WKUPM | USB_CNTR_SUSPM | USB_CNTR_DCON |
                  USB_CNTR_SOFM | USB_CNTR_ESOFM | USB_CNTR_L1REQM);

  /* Clear All Pending Interrupt */
  USBx->ISTR = 0U;
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	2200      	movs	r2, #0
 800949e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable Global interrupt */
  USBx->CNTR |= (USB_CNTR_CTRM | USB_CNTR_PMAOVRM | USB_CNTR_ERRM |
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80094a4:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
 80094a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80094ac:	687a      	ldr	r2, [r7, #4]
 80094ae:	6413      	str	r3, [r2, #64]	; 0x40
                 USB_CNTR_WKUPM | USB_CNTR_SUSPM | USB_CNTR_DCON |
                 USB_CNTR_SOFM | USB_CNTR_ESOFM | USB_CNTR_L1REQM);

  /* Remove Reset */
  USBx->CNTR &= ~USB_CNTR_USBRST;
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80094b4:	f023 0201 	bic.w	r2, r3, #1
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	641a      	str	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80094bc:	2300      	movs	r3, #0
}
 80094be:	4618      	mov	r0, r3
 80094c0:	370c      	adds	r7, #12
 80094c2:	46bd      	mov	sp, r7
 80094c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094c8:	b004      	add	sp, #16
 80094ca:	4770      	bx	lr

080094cc <std>:
 80094cc:	2300      	movs	r3, #0
 80094ce:	b510      	push	{r4, lr}
 80094d0:	4604      	mov	r4, r0
 80094d2:	6083      	str	r3, [r0, #8]
 80094d4:	8181      	strh	r1, [r0, #12]
 80094d6:	4619      	mov	r1, r3
 80094d8:	6643      	str	r3, [r0, #100]	; 0x64
 80094da:	81c2      	strh	r2, [r0, #14]
 80094dc:	2208      	movs	r2, #8
 80094de:	6183      	str	r3, [r0, #24]
 80094e0:	e9c0 3300 	strd	r3, r3, [r0]
 80094e4:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80094e8:	305c      	adds	r0, #92	; 0x5c
 80094ea:	f000 f9e5 	bl	80098b8 <memset>
 80094ee:	4b0d      	ldr	r3, [pc, #52]	; (8009524 <std+0x58>)
 80094f0:	6224      	str	r4, [r4, #32]
 80094f2:	6263      	str	r3, [r4, #36]	; 0x24
 80094f4:	4b0c      	ldr	r3, [pc, #48]	; (8009528 <std+0x5c>)
 80094f6:	62a3      	str	r3, [r4, #40]	; 0x28
 80094f8:	4b0c      	ldr	r3, [pc, #48]	; (800952c <std+0x60>)
 80094fa:	62e3      	str	r3, [r4, #44]	; 0x2c
 80094fc:	4b0c      	ldr	r3, [pc, #48]	; (8009530 <std+0x64>)
 80094fe:	6323      	str	r3, [r4, #48]	; 0x30
 8009500:	4b0c      	ldr	r3, [pc, #48]	; (8009534 <std+0x68>)
 8009502:	429c      	cmp	r4, r3
 8009504:	d006      	beq.n	8009514 <std+0x48>
 8009506:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800950a:	4294      	cmp	r4, r2
 800950c:	d002      	beq.n	8009514 <std+0x48>
 800950e:	33d0      	adds	r3, #208	; 0xd0
 8009510:	429c      	cmp	r4, r3
 8009512:	d105      	bne.n	8009520 <std+0x54>
 8009514:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8009518:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800951c:	f000 ba5a 	b.w	80099d4 <__retarget_lock_init_recursive>
 8009520:	bd10      	pop	{r4, pc}
 8009522:	bf00      	nop
 8009524:	08009709 	.word	0x08009709
 8009528:	0800972b 	.word	0x0800972b
 800952c:	08009763 	.word	0x08009763
 8009530:	08009787 	.word	0x08009787
 8009534:	200006d4 	.word	0x200006d4

08009538 <stdio_exit_handler>:
 8009538:	4a02      	ldr	r2, [pc, #8]	; (8009544 <stdio_exit_handler+0xc>)
 800953a:	4903      	ldr	r1, [pc, #12]	; (8009548 <stdio_exit_handler+0x10>)
 800953c:	4803      	ldr	r0, [pc, #12]	; (800954c <stdio_exit_handler+0x14>)
 800953e:	f000 b869 	b.w	8009614 <_fwalk_sglue>
 8009542:	bf00      	nop
 8009544:	2000000c 	.word	0x2000000c
 8009548:	08009cd5 	.word	0x08009cd5
 800954c:	20000018 	.word	0x20000018

08009550 <cleanup_stdio>:
 8009550:	6841      	ldr	r1, [r0, #4]
 8009552:	4b0c      	ldr	r3, [pc, #48]	; (8009584 <cleanup_stdio+0x34>)
 8009554:	4299      	cmp	r1, r3
 8009556:	b510      	push	{r4, lr}
 8009558:	4604      	mov	r4, r0
 800955a:	d001      	beq.n	8009560 <cleanup_stdio+0x10>
 800955c:	f000 fbba 	bl	8009cd4 <_fflush_r>
 8009560:	68a1      	ldr	r1, [r4, #8]
 8009562:	4b09      	ldr	r3, [pc, #36]	; (8009588 <cleanup_stdio+0x38>)
 8009564:	4299      	cmp	r1, r3
 8009566:	d002      	beq.n	800956e <cleanup_stdio+0x1e>
 8009568:	4620      	mov	r0, r4
 800956a:	f000 fbb3 	bl	8009cd4 <_fflush_r>
 800956e:	68e1      	ldr	r1, [r4, #12]
 8009570:	4b06      	ldr	r3, [pc, #24]	; (800958c <cleanup_stdio+0x3c>)
 8009572:	4299      	cmp	r1, r3
 8009574:	d004      	beq.n	8009580 <cleanup_stdio+0x30>
 8009576:	4620      	mov	r0, r4
 8009578:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800957c:	f000 bbaa 	b.w	8009cd4 <_fflush_r>
 8009580:	bd10      	pop	{r4, pc}
 8009582:	bf00      	nop
 8009584:	200006d4 	.word	0x200006d4
 8009588:	2000073c 	.word	0x2000073c
 800958c:	200007a4 	.word	0x200007a4

08009590 <global_stdio_init.part.0>:
 8009590:	b510      	push	{r4, lr}
 8009592:	4b0b      	ldr	r3, [pc, #44]	; (80095c0 <global_stdio_init.part.0+0x30>)
 8009594:	2104      	movs	r1, #4
 8009596:	4c0b      	ldr	r4, [pc, #44]	; (80095c4 <global_stdio_init.part.0+0x34>)
 8009598:	4a0b      	ldr	r2, [pc, #44]	; (80095c8 <global_stdio_init.part.0+0x38>)
 800959a:	4620      	mov	r0, r4
 800959c:	601a      	str	r2, [r3, #0]
 800959e:	2200      	movs	r2, #0
 80095a0:	f7ff ff94 	bl	80094cc <std>
 80095a4:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80095a8:	2201      	movs	r2, #1
 80095aa:	2109      	movs	r1, #9
 80095ac:	f7ff ff8e 	bl	80094cc <std>
 80095b0:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80095b4:	2202      	movs	r2, #2
 80095b6:	2112      	movs	r1, #18
 80095b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80095bc:	f7ff bf86 	b.w	80094cc <std>
 80095c0:	2000080c 	.word	0x2000080c
 80095c4:	200006d4 	.word	0x200006d4
 80095c8:	08009539 	.word	0x08009539

080095cc <__sfp_lock_acquire>:
 80095cc:	4801      	ldr	r0, [pc, #4]	; (80095d4 <__sfp_lock_acquire+0x8>)
 80095ce:	f000 ba02 	b.w	80099d6 <__retarget_lock_acquire_recursive>
 80095d2:	bf00      	nop
 80095d4:	20000815 	.word	0x20000815

080095d8 <__sfp_lock_release>:
 80095d8:	4801      	ldr	r0, [pc, #4]	; (80095e0 <__sfp_lock_release+0x8>)
 80095da:	f000 b9fd 	b.w	80099d8 <__retarget_lock_release_recursive>
 80095de:	bf00      	nop
 80095e0:	20000815 	.word	0x20000815

080095e4 <__sinit>:
 80095e4:	b510      	push	{r4, lr}
 80095e6:	4604      	mov	r4, r0
 80095e8:	f7ff fff0 	bl	80095cc <__sfp_lock_acquire>
 80095ec:	6a23      	ldr	r3, [r4, #32]
 80095ee:	b11b      	cbz	r3, 80095f8 <__sinit+0x14>
 80095f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80095f4:	f7ff bff0 	b.w	80095d8 <__sfp_lock_release>
 80095f8:	4b04      	ldr	r3, [pc, #16]	; (800960c <__sinit+0x28>)
 80095fa:	6223      	str	r3, [r4, #32]
 80095fc:	4b04      	ldr	r3, [pc, #16]	; (8009610 <__sinit+0x2c>)
 80095fe:	681b      	ldr	r3, [r3, #0]
 8009600:	2b00      	cmp	r3, #0
 8009602:	d1f5      	bne.n	80095f0 <__sinit+0xc>
 8009604:	f7ff ffc4 	bl	8009590 <global_stdio_init.part.0>
 8009608:	e7f2      	b.n	80095f0 <__sinit+0xc>
 800960a:	bf00      	nop
 800960c:	08009551 	.word	0x08009551
 8009610:	2000080c 	.word	0x2000080c

08009614 <_fwalk_sglue>:
 8009614:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009618:	4607      	mov	r7, r0
 800961a:	4688      	mov	r8, r1
 800961c:	4614      	mov	r4, r2
 800961e:	2600      	movs	r6, #0
 8009620:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009624:	f1b9 0901 	subs.w	r9, r9, #1
 8009628:	d505      	bpl.n	8009636 <_fwalk_sglue+0x22>
 800962a:	6824      	ldr	r4, [r4, #0]
 800962c:	2c00      	cmp	r4, #0
 800962e:	d1f7      	bne.n	8009620 <_fwalk_sglue+0xc>
 8009630:	4630      	mov	r0, r6
 8009632:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009636:	89ab      	ldrh	r3, [r5, #12]
 8009638:	2b01      	cmp	r3, #1
 800963a:	d907      	bls.n	800964c <_fwalk_sglue+0x38>
 800963c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009640:	3301      	adds	r3, #1
 8009642:	d003      	beq.n	800964c <_fwalk_sglue+0x38>
 8009644:	4629      	mov	r1, r5
 8009646:	4638      	mov	r0, r7
 8009648:	47c0      	blx	r8
 800964a:	4306      	orrs	r6, r0
 800964c:	3568      	adds	r5, #104	; 0x68
 800964e:	e7e9      	b.n	8009624 <_fwalk_sglue+0x10>

08009650 <_puts_r>:
 8009650:	6a03      	ldr	r3, [r0, #32]
 8009652:	b570      	push	{r4, r5, r6, lr}
 8009654:	4605      	mov	r5, r0
 8009656:	460e      	mov	r6, r1
 8009658:	6884      	ldr	r4, [r0, #8]
 800965a:	b90b      	cbnz	r3, 8009660 <_puts_r+0x10>
 800965c:	f7ff ffc2 	bl	80095e4 <__sinit>
 8009660:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009662:	07db      	lsls	r3, r3, #31
 8009664:	d405      	bmi.n	8009672 <_puts_r+0x22>
 8009666:	89a3      	ldrh	r3, [r4, #12]
 8009668:	0598      	lsls	r0, r3, #22
 800966a:	d402      	bmi.n	8009672 <_puts_r+0x22>
 800966c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800966e:	f000 f9b2 	bl	80099d6 <__retarget_lock_acquire_recursive>
 8009672:	89a3      	ldrh	r3, [r4, #12]
 8009674:	0719      	lsls	r1, r3, #28
 8009676:	d513      	bpl.n	80096a0 <_puts_r+0x50>
 8009678:	6923      	ldr	r3, [r4, #16]
 800967a:	b18b      	cbz	r3, 80096a0 <_puts_r+0x50>
 800967c:	3e01      	subs	r6, #1
 800967e:	68a3      	ldr	r3, [r4, #8]
 8009680:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8009684:	3b01      	subs	r3, #1
 8009686:	60a3      	str	r3, [r4, #8]
 8009688:	b9e9      	cbnz	r1, 80096c6 <_puts_r+0x76>
 800968a:	2b00      	cmp	r3, #0
 800968c:	da2e      	bge.n	80096ec <_puts_r+0x9c>
 800968e:	4622      	mov	r2, r4
 8009690:	210a      	movs	r1, #10
 8009692:	4628      	mov	r0, r5
 8009694:	f000 f87b 	bl	800978e <__swbuf_r>
 8009698:	3001      	adds	r0, #1
 800969a:	d007      	beq.n	80096ac <_puts_r+0x5c>
 800969c:	250a      	movs	r5, #10
 800969e:	e007      	b.n	80096b0 <_puts_r+0x60>
 80096a0:	4621      	mov	r1, r4
 80096a2:	4628      	mov	r0, r5
 80096a4:	f000 f8b0 	bl	8009808 <__swsetup_r>
 80096a8:	2800      	cmp	r0, #0
 80096aa:	d0e7      	beq.n	800967c <_puts_r+0x2c>
 80096ac:	f04f 35ff 	mov.w	r5, #4294967295
 80096b0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80096b2:	07da      	lsls	r2, r3, #31
 80096b4:	d405      	bmi.n	80096c2 <_puts_r+0x72>
 80096b6:	89a3      	ldrh	r3, [r4, #12]
 80096b8:	059b      	lsls	r3, r3, #22
 80096ba:	d402      	bmi.n	80096c2 <_puts_r+0x72>
 80096bc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80096be:	f000 f98b 	bl	80099d8 <__retarget_lock_release_recursive>
 80096c2:	4628      	mov	r0, r5
 80096c4:	bd70      	pop	{r4, r5, r6, pc}
 80096c6:	2b00      	cmp	r3, #0
 80096c8:	da04      	bge.n	80096d4 <_puts_r+0x84>
 80096ca:	69a2      	ldr	r2, [r4, #24]
 80096cc:	429a      	cmp	r2, r3
 80096ce:	dc06      	bgt.n	80096de <_puts_r+0x8e>
 80096d0:	290a      	cmp	r1, #10
 80096d2:	d004      	beq.n	80096de <_puts_r+0x8e>
 80096d4:	6823      	ldr	r3, [r4, #0]
 80096d6:	1c5a      	adds	r2, r3, #1
 80096d8:	6022      	str	r2, [r4, #0]
 80096da:	7019      	strb	r1, [r3, #0]
 80096dc:	e7cf      	b.n	800967e <_puts_r+0x2e>
 80096de:	4622      	mov	r2, r4
 80096e0:	4628      	mov	r0, r5
 80096e2:	f000 f854 	bl	800978e <__swbuf_r>
 80096e6:	3001      	adds	r0, #1
 80096e8:	d1c9      	bne.n	800967e <_puts_r+0x2e>
 80096ea:	e7df      	b.n	80096ac <_puts_r+0x5c>
 80096ec:	6823      	ldr	r3, [r4, #0]
 80096ee:	250a      	movs	r5, #10
 80096f0:	1c5a      	adds	r2, r3, #1
 80096f2:	6022      	str	r2, [r4, #0]
 80096f4:	701d      	strb	r5, [r3, #0]
 80096f6:	e7db      	b.n	80096b0 <_puts_r+0x60>

080096f8 <puts>:
 80096f8:	4b02      	ldr	r3, [pc, #8]	; (8009704 <puts+0xc>)
 80096fa:	4601      	mov	r1, r0
 80096fc:	6818      	ldr	r0, [r3, #0]
 80096fe:	f7ff bfa7 	b.w	8009650 <_puts_r>
 8009702:	bf00      	nop
 8009704:	20000064 	.word	0x20000064

08009708 <__sread>:
 8009708:	b510      	push	{r4, lr}
 800970a:	460c      	mov	r4, r1
 800970c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009710:	f000 f912 	bl	8009938 <_read_r>
 8009714:	2800      	cmp	r0, #0
 8009716:	bfab      	itete	ge
 8009718:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800971a:	89a3      	ldrhlt	r3, [r4, #12]
 800971c:	181b      	addge	r3, r3, r0
 800971e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009722:	bfac      	ite	ge
 8009724:	6563      	strge	r3, [r4, #84]	; 0x54
 8009726:	81a3      	strhlt	r3, [r4, #12]
 8009728:	bd10      	pop	{r4, pc}

0800972a <__swrite>:
 800972a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800972e:	461f      	mov	r7, r3
 8009730:	898b      	ldrh	r3, [r1, #12]
 8009732:	4605      	mov	r5, r0
 8009734:	460c      	mov	r4, r1
 8009736:	05db      	lsls	r3, r3, #23
 8009738:	4616      	mov	r6, r2
 800973a:	d505      	bpl.n	8009748 <__swrite+0x1e>
 800973c:	2302      	movs	r3, #2
 800973e:	2200      	movs	r2, #0
 8009740:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009744:	f000 f8e6 	bl	8009914 <_lseek_r>
 8009748:	89a3      	ldrh	r3, [r4, #12]
 800974a:	4632      	mov	r2, r6
 800974c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009750:	4628      	mov	r0, r5
 8009752:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009756:	81a3      	strh	r3, [r4, #12]
 8009758:	463b      	mov	r3, r7
 800975a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800975e:	f000 b8fd 	b.w	800995c <_write_r>

08009762 <__sseek>:
 8009762:	b510      	push	{r4, lr}
 8009764:	460c      	mov	r4, r1
 8009766:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800976a:	f000 f8d3 	bl	8009914 <_lseek_r>
 800976e:	1c43      	adds	r3, r0, #1
 8009770:	89a3      	ldrh	r3, [r4, #12]
 8009772:	bf15      	itete	ne
 8009774:	6560      	strne	r0, [r4, #84]	; 0x54
 8009776:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800977a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800977e:	81a3      	strheq	r3, [r4, #12]
 8009780:	bf18      	it	ne
 8009782:	81a3      	strhne	r3, [r4, #12]
 8009784:	bd10      	pop	{r4, pc}

08009786 <__sclose>:
 8009786:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800978a:	f000 b8b3 	b.w	80098f4 <_close_r>

0800978e <__swbuf_r>:
 800978e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009790:	460e      	mov	r6, r1
 8009792:	4614      	mov	r4, r2
 8009794:	4605      	mov	r5, r0
 8009796:	b118      	cbz	r0, 80097a0 <__swbuf_r+0x12>
 8009798:	6a03      	ldr	r3, [r0, #32]
 800979a:	b90b      	cbnz	r3, 80097a0 <__swbuf_r+0x12>
 800979c:	f7ff ff22 	bl	80095e4 <__sinit>
 80097a0:	69a3      	ldr	r3, [r4, #24]
 80097a2:	60a3      	str	r3, [r4, #8]
 80097a4:	89a3      	ldrh	r3, [r4, #12]
 80097a6:	071a      	lsls	r2, r3, #28
 80097a8:	d525      	bpl.n	80097f6 <__swbuf_r+0x68>
 80097aa:	6923      	ldr	r3, [r4, #16]
 80097ac:	b31b      	cbz	r3, 80097f6 <__swbuf_r+0x68>
 80097ae:	6823      	ldr	r3, [r4, #0]
 80097b0:	b2f6      	uxtb	r6, r6
 80097b2:	6922      	ldr	r2, [r4, #16]
 80097b4:	4637      	mov	r7, r6
 80097b6:	1a98      	subs	r0, r3, r2
 80097b8:	6963      	ldr	r3, [r4, #20]
 80097ba:	4283      	cmp	r3, r0
 80097bc:	dc04      	bgt.n	80097c8 <__swbuf_r+0x3a>
 80097be:	4621      	mov	r1, r4
 80097c0:	4628      	mov	r0, r5
 80097c2:	f000 fa87 	bl	8009cd4 <_fflush_r>
 80097c6:	b9e0      	cbnz	r0, 8009802 <__swbuf_r+0x74>
 80097c8:	68a3      	ldr	r3, [r4, #8]
 80097ca:	3b01      	subs	r3, #1
 80097cc:	60a3      	str	r3, [r4, #8]
 80097ce:	6823      	ldr	r3, [r4, #0]
 80097d0:	1c5a      	adds	r2, r3, #1
 80097d2:	6022      	str	r2, [r4, #0]
 80097d4:	701e      	strb	r6, [r3, #0]
 80097d6:	1c43      	adds	r3, r0, #1
 80097d8:	6962      	ldr	r2, [r4, #20]
 80097da:	429a      	cmp	r2, r3
 80097dc:	d004      	beq.n	80097e8 <__swbuf_r+0x5a>
 80097de:	89a3      	ldrh	r3, [r4, #12]
 80097e0:	07db      	lsls	r3, r3, #31
 80097e2:	d506      	bpl.n	80097f2 <__swbuf_r+0x64>
 80097e4:	2e0a      	cmp	r6, #10
 80097e6:	d104      	bne.n	80097f2 <__swbuf_r+0x64>
 80097e8:	4621      	mov	r1, r4
 80097ea:	4628      	mov	r0, r5
 80097ec:	f000 fa72 	bl	8009cd4 <_fflush_r>
 80097f0:	b938      	cbnz	r0, 8009802 <__swbuf_r+0x74>
 80097f2:	4638      	mov	r0, r7
 80097f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80097f6:	4621      	mov	r1, r4
 80097f8:	4628      	mov	r0, r5
 80097fa:	f000 f805 	bl	8009808 <__swsetup_r>
 80097fe:	2800      	cmp	r0, #0
 8009800:	d0d5      	beq.n	80097ae <__swbuf_r+0x20>
 8009802:	f04f 37ff 	mov.w	r7, #4294967295
 8009806:	e7f4      	b.n	80097f2 <__swbuf_r+0x64>

08009808 <__swsetup_r>:
 8009808:	b538      	push	{r3, r4, r5, lr}
 800980a:	4b2a      	ldr	r3, [pc, #168]	; (80098b4 <__swsetup_r+0xac>)
 800980c:	4605      	mov	r5, r0
 800980e:	460c      	mov	r4, r1
 8009810:	6818      	ldr	r0, [r3, #0]
 8009812:	b118      	cbz	r0, 800981c <__swsetup_r+0x14>
 8009814:	6a03      	ldr	r3, [r0, #32]
 8009816:	b90b      	cbnz	r3, 800981c <__swsetup_r+0x14>
 8009818:	f7ff fee4 	bl	80095e4 <__sinit>
 800981c:	89a3      	ldrh	r3, [r4, #12]
 800981e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009822:	0718      	lsls	r0, r3, #28
 8009824:	d422      	bmi.n	800986c <__swsetup_r+0x64>
 8009826:	06d9      	lsls	r1, r3, #27
 8009828:	d407      	bmi.n	800983a <__swsetup_r+0x32>
 800982a:	2309      	movs	r3, #9
 800982c:	602b      	str	r3, [r5, #0]
 800982e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009832:	f04f 30ff 	mov.w	r0, #4294967295
 8009836:	81a3      	strh	r3, [r4, #12]
 8009838:	e034      	b.n	80098a4 <__swsetup_r+0x9c>
 800983a:	0758      	lsls	r0, r3, #29
 800983c:	d512      	bpl.n	8009864 <__swsetup_r+0x5c>
 800983e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009840:	b141      	cbz	r1, 8009854 <__swsetup_r+0x4c>
 8009842:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009846:	4299      	cmp	r1, r3
 8009848:	d002      	beq.n	8009850 <__swsetup_r+0x48>
 800984a:	4628      	mov	r0, r5
 800984c:	f000 f8c6 	bl	80099dc <_free_r>
 8009850:	2300      	movs	r3, #0
 8009852:	6363      	str	r3, [r4, #52]	; 0x34
 8009854:	89a3      	ldrh	r3, [r4, #12]
 8009856:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800985a:	81a3      	strh	r3, [r4, #12]
 800985c:	2300      	movs	r3, #0
 800985e:	6063      	str	r3, [r4, #4]
 8009860:	6923      	ldr	r3, [r4, #16]
 8009862:	6023      	str	r3, [r4, #0]
 8009864:	89a3      	ldrh	r3, [r4, #12]
 8009866:	f043 0308 	orr.w	r3, r3, #8
 800986a:	81a3      	strh	r3, [r4, #12]
 800986c:	6923      	ldr	r3, [r4, #16]
 800986e:	b94b      	cbnz	r3, 8009884 <__swsetup_r+0x7c>
 8009870:	89a3      	ldrh	r3, [r4, #12]
 8009872:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009876:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800987a:	d003      	beq.n	8009884 <__swsetup_r+0x7c>
 800987c:	4621      	mov	r1, r4
 800987e:	4628      	mov	r0, r5
 8009880:	f000 fa75 	bl	8009d6e <__smakebuf_r>
 8009884:	89a0      	ldrh	r0, [r4, #12]
 8009886:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800988a:	f010 0301 	ands.w	r3, r0, #1
 800988e:	d00a      	beq.n	80098a6 <__swsetup_r+0x9e>
 8009890:	2300      	movs	r3, #0
 8009892:	60a3      	str	r3, [r4, #8]
 8009894:	6963      	ldr	r3, [r4, #20]
 8009896:	425b      	negs	r3, r3
 8009898:	61a3      	str	r3, [r4, #24]
 800989a:	6923      	ldr	r3, [r4, #16]
 800989c:	b943      	cbnz	r3, 80098b0 <__swsetup_r+0xa8>
 800989e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80098a2:	d1c4      	bne.n	800982e <__swsetup_r+0x26>
 80098a4:	bd38      	pop	{r3, r4, r5, pc}
 80098a6:	0781      	lsls	r1, r0, #30
 80098a8:	bf58      	it	pl
 80098aa:	6963      	ldrpl	r3, [r4, #20]
 80098ac:	60a3      	str	r3, [r4, #8]
 80098ae:	e7f4      	b.n	800989a <__swsetup_r+0x92>
 80098b0:	2000      	movs	r0, #0
 80098b2:	e7f7      	b.n	80098a4 <__swsetup_r+0x9c>
 80098b4:	20000064 	.word	0x20000064

080098b8 <memset>:
 80098b8:	4402      	add	r2, r0
 80098ba:	4603      	mov	r3, r0
 80098bc:	4293      	cmp	r3, r2
 80098be:	d100      	bne.n	80098c2 <memset+0xa>
 80098c0:	4770      	bx	lr
 80098c2:	f803 1b01 	strb.w	r1, [r3], #1
 80098c6:	e7f9      	b.n	80098bc <memset+0x4>

080098c8 <strstr>:
 80098c8:	780a      	ldrb	r2, [r1, #0]
 80098ca:	b570      	push	{r4, r5, r6, lr}
 80098cc:	b96a      	cbnz	r2, 80098ea <strstr+0x22>
 80098ce:	bd70      	pop	{r4, r5, r6, pc}
 80098d0:	429a      	cmp	r2, r3
 80098d2:	d109      	bne.n	80098e8 <strstr+0x20>
 80098d4:	460c      	mov	r4, r1
 80098d6:	4605      	mov	r5, r0
 80098d8:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 80098dc:	2b00      	cmp	r3, #0
 80098de:	d0f6      	beq.n	80098ce <strstr+0x6>
 80098e0:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 80098e4:	429e      	cmp	r6, r3
 80098e6:	d0f7      	beq.n	80098d8 <strstr+0x10>
 80098e8:	3001      	adds	r0, #1
 80098ea:	7803      	ldrb	r3, [r0, #0]
 80098ec:	2b00      	cmp	r3, #0
 80098ee:	d1ef      	bne.n	80098d0 <strstr+0x8>
 80098f0:	4618      	mov	r0, r3
 80098f2:	e7ec      	b.n	80098ce <strstr+0x6>

080098f4 <_close_r>:
 80098f4:	b538      	push	{r3, r4, r5, lr}
 80098f6:	2300      	movs	r3, #0
 80098f8:	4d05      	ldr	r5, [pc, #20]	; (8009910 <_close_r+0x1c>)
 80098fa:	4604      	mov	r4, r0
 80098fc:	4608      	mov	r0, r1
 80098fe:	602b      	str	r3, [r5, #0]
 8009900:	f7f7 fbf9 	bl	80010f6 <_close>
 8009904:	1c43      	adds	r3, r0, #1
 8009906:	d102      	bne.n	800990e <_close_r+0x1a>
 8009908:	682b      	ldr	r3, [r5, #0]
 800990a:	b103      	cbz	r3, 800990e <_close_r+0x1a>
 800990c:	6023      	str	r3, [r4, #0]
 800990e:	bd38      	pop	{r3, r4, r5, pc}
 8009910:	20000810 	.word	0x20000810

08009914 <_lseek_r>:
 8009914:	b538      	push	{r3, r4, r5, lr}
 8009916:	4604      	mov	r4, r0
 8009918:	4d06      	ldr	r5, [pc, #24]	; (8009934 <_lseek_r+0x20>)
 800991a:	4608      	mov	r0, r1
 800991c:	4611      	mov	r1, r2
 800991e:	2200      	movs	r2, #0
 8009920:	602a      	str	r2, [r5, #0]
 8009922:	461a      	mov	r2, r3
 8009924:	f7f7 fc0e 	bl	8001144 <_lseek>
 8009928:	1c43      	adds	r3, r0, #1
 800992a:	d102      	bne.n	8009932 <_lseek_r+0x1e>
 800992c:	682b      	ldr	r3, [r5, #0]
 800992e:	b103      	cbz	r3, 8009932 <_lseek_r+0x1e>
 8009930:	6023      	str	r3, [r4, #0]
 8009932:	bd38      	pop	{r3, r4, r5, pc}
 8009934:	20000810 	.word	0x20000810

08009938 <_read_r>:
 8009938:	b538      	push	{r3, r4, r5, lr}
 800993a:	4604      	mov	r4, r0
 800993c:	4d06      	ldr	r5, [pc, #24]	; (8009958 <_read_r+0x20>)
 800993e:	4608      	mov	r0, r1
 8009940:	4611      	mov	r1, r2
 8009942:	2200      	movs	r2, #0
 8009944:	602a      	str	r2, [r5, #0]
 8009946:	461a      	mov	r2, r3
 8009948:	f7f7 fb9c 	bl	8001084 <_read>
 800994c:	1c43      	adds	r3, r0, #1
 800994e:	d102      	bne.n	8009956 <_read_r+0x1e>
 8009950:	682b      	ldr	r3, [r5, #0]
 8009952:	b103      	cbz	r3, 8009956 <_read_r+0x1e>
 8009954:	6023      	str	r3, [r4, #0]
 8009956:	bd38      	pop	{r3, r4, r5, pc}
 8009958:	20000810 	.word	0x20000810

0800995c <_write_r>:
 800995c:	b538      	push	{r3, r4, r5, lr}
 800995e:	4604      	mov	r4, r0
 8009960:	4d06      	ldr	r5, [pc, #24]	; (800997c <_write_r+0x20>)
 8009962:	4608      	mov	r0, r1
 8009964:	4611      	mov	r1, r2
 8009966:	2200      	movs	r2, #0
 8009968:	602a      	str	r2, [r5, #0]
 800996a:	461a      	mov	r2, r3
 800996c:	f7f7 fba7 	bl	80010be <_write>
 8009970:	1c43      	adds	r3, r0, #1
 8009972:	d102      	bne.n	800997a <_write_r+0x1e>
 8009974:	682b      	ldr	r3, [r5, #0]
 8009976:	b103      	cbz	r3, 800997a <_write_r+0x1e>
 8009978:	6023      	str	r3, [r4, #0]
 800997a:	bd38      	pop	{r3, r4, r5, pc}
 800997c:	20000810 	.word	0x20000810

08009980 <__errno>:
 8009980:	4b01      	ldr	r3, [pc, #4]	; (8009988 <__errno+0x8>)
 8009982:	6818      	ldr	r0, [r3, #0]
 8009984:	4770      	bx	lr
 8009986:	bf00      	nop
 8009988:	20000064 	.word	0x20000064

0800998c <__libc_init_array>:
 800998c:	b570      	push	{r4, r5, r6, lr}
 800998e:	4d0d      	ldr	r5, [pc, #52]	; (80099c4 <__libc_init_array+0x38>)
 8009990:	2600      	movs	r6, #0
 8009992:	4c0d      	ldr	r4, [pc, #52]	; (80099c8 <__libc_init_array+0x3c>)
 8009994:	1b64      	subs	r4, r4, r5
 8009996:	10a4      	asrs	r4, r4, #2
 8009998:	42a6      	cmp	r6, r4
 800999a:	d109      	bne.n	80099b0 <__libc_init_array+0x24>
 800999c:	4d0b      	ldr	r5, [pc, #44]	; (80099cc <__libc_init_array+0x40>)
 800999e:	2600      	movs	r6, #0
 80099a0:	4c0b      	ldr	r4, [pc, #44]	; (80099d0 <__libc_init_array+0x44>)
 80099a2:	f000 fa53 	bl	8009e4c <_init>
 80099a6:	1b64      	subs	r4, r4, r5
 80099a8:	10a4      	asrs	r4, r4, #2
 80099aa:	42a6      	cmp	r6, r4
 80099ac:	d105      	bne.n	80099ba <__libc_init_array+0x2e>
 80099ae:	bd70      	pop	{r4, r5, r6, pc}
 80099b0:	f855 3b04 	ldr.w	r3, [r5], #4
 80099b4:	3601      	adds	r6, #1
 80099b6:	4798      	blx	r3
 80099b8:	e7ee      	b.n	8009998 <__libc_init_array+0xc>
 80099ba:	f855 3b04 	ldr.w	r3, [r5], #4
 80099be:	3601      	adds	r6, #1
 80099c0:	4798      	blx	r3
 80099c2:	e7f2      	b.n	80099aa <__libc_init_array+0x1e>
 80099c4:	0800a090 	.word	0x0800a090
 80099c8:	0800a090 	.word	0x0800a090
 80099cc:	0800a090 	.word	0x0800a090
 80099d0:	0800a094 	.word	0x0800a094

080099d4 <__retarget_lock_init_recursive>:
 80099d4:	4770      	bx	lr

080099d6 <__retarget_lock_acquire_recursive>:
 80099d6:	4770      	bx	lr

080099d8 <__retarget_lock_release_recursive>:
 80099d8:	4770      	bx	lr
	...

080099dc <_free_r>:
 80099dc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80099de:	2900      	cmp	r1, #0
 80099e0:	d043      	beq.n	8009a6a <_free_r+0x8e>
 80099e2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80099e6:	1f0c      	subs	r4, r1, #4
 80099e8:	9001      	str	r0, [sp, #4]
 80099ea:	2b00      	cmp	r3, #0
 80099ec:	bfb8      	it	lt
 80099ee:	18e4      	addlt	r4, r4, r3
 80099f0:	f000 f8e0 	bl	8009bb4 <__malloc_lock>
 80099f4:	4a1e      	ldr	r2, [pc, #120]	; (8009a70 <_free_r+0x94>)
 80099f6:	9801      	ldr	r0, [sp, #4]
 80099f8:	6813      	ldr	r3, [r2, #0]
 80099fa:	b933      	cbnz	r3, 8009a0a <_free_r+0x2e>
 80099fc:	6063      	str	r3, [r4, #4]
 80099fe:	6014      	str	r4, [r2, #0]
 8009a00:	b003      	add	sp, #12
 8009a02:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009a06:	f000 b8db 	b.w	8009bc0 <__malloc_unlock>
 8009a0a:	42a3      	cmp	r3, r4
 8009a0c:	d908      	bls.n	8009a20 <_free_r+0x44>
 8009a0e:	6825      	ldr	r5, [r4, #0]
 8009a10:	1961      	adds	r1, r4, r5
 8009a12:	428b      	cmp	r3, r1
 8009a14:	bf01      	itttt	eq
 8009a16:	6819      	ldreq	r1, [r3, #0]
 8009a18:	685b      	ldreq	r3, [r3, #4]
 8009a1a:	1949      	addeq	r1, r1, r5
 8009a1c:	6021      	streq	r1, [r4, #0]
 8009a1e:	e7ed      	b.n	80099fc <_free_r+0x20>
 8009a20:	461a      	mov	r2, r3
 8009a22:	685b      	ldr	r3, [r3, #4]
 8009a24:	b10b      	cbz	r3, 8009a2a <_free_r+0x4e>
 8009a26:	42a3      	cmp	r3, r4
 8009a28:	d9fa      	bls.n	8009a20 <_free_r+0x44>
 8009a2a:	6811      	ldr	r1, [r2, #0]
 8009a2c:	1855      	adds	r5, r2, r1
 8009a2e:	42a5      	cmp	r5, r4
 8009a30:	d10b      	bne.n	8009a4a <_free_r+0x6e>
 8009a32:	6824      	ldr	r4, [r4, #0]
 8009a34:	4421      	add	r1, r4
 8009a36:	1854      	adds	r4, r2, r1
 8009a38:	6011      	str	r1, [r2, #0]
 8009a3a:	42a3      	cmp	r3, r4
 8009a3c:	d1e0      	bne.n	8009a00 <_free_r+0x24>
 8009a3e:	681c      	ldr	r4, [r3, #0]
 8009a40:	685b      	ldr	r3, [r3, #4]
 8009a42:	440c      	add	r4, r1
 8009a44:	6053      	str	r3, [r2, #4]
 8009a46:	6014      	str	r4, [r2, #0]
 8009a48:	e7da      	b.n	8009a00 <_free_r+0x24>
 8009a4a:	d902      	bls.n	8009a52 <_free_r+0x76>
 8009a4c:	230c      	movs	r3, #12
 8009a4e:	6003      	str	r3, [r0, #0]
 8009a50:	e7d6      	b.n	8009a00 <_free_r+0x24>
 8009a52:	6825      	ldr	r5, [r4, #0]
 8009a54:	1961      	adds	r1, r4, r5
 8009a56:	428b      	cmp	r3, r1
 8009a58:	bf02      	ittt	eq
 8009a5a:	6819      	ldreq	r1, [r3, #0]
 8009a5c:	685b      	ldreq	r3, [r3, #4]
 8009a5e:	1949      	addeq	r1, r1, r5
 8009a60:	6063      	str	r3, [r4, #4]
 8009a62:	bf08      	it	eq
 8009a64:	6021      	streq	r1, [r4, #0]
 8009a66:	6054      	str	r4, [r2, #4]
 8009a68:	e7ca      	b.n	8009a00 <_free_r+0x24>
 8009a6a:	b003      	add	sp, #12
 8009a6c:	bd30      	pop	{r4, r5, pc}
 8009a6e:	bf00      	nop
 8009a70:	20000818 	.word	0x20000818

08009a74 <sbrk_aligned>:
 8009a74:	b570      	push	{r4, r5, r6, lr}
 8009a76:	4e0e      	ldr	r6, [pc, #56]	; (8009ab0 <sbrk_aligned+0x3c>)
 8009a78:	460c      	mov	r4, r1
 8009a7a:	4605      	mov	r5, r0
 8009a7c:	6831      	ldr	r1, [r6, #0]
 8009a7e:	b911      	cbnz	r1, 8009a86 <sbrk_aligned+0x12>
 8009a80:	f000 f9d4 	bl	8009e2c <_sbrk_r>
 8009a84:	6030      	str	r0, [r6, #0]
 8009a86:	4621      	mov	r1, r4
 8009a88:	4628      	mov	r0, r5
 8009a8a:	f000 f9cf 	bl	8009e2c <_sbrk_r>
 8009a8e:	1c43      	adds	r3, r0, #1
 8009a90:	d00a      	beq.n	8009aa8 <sbrk_aligned+0x34>
 8009a92:	1cc4      	adds	r4, r0, #3
 8009a94:	f024 0403 	bic.w	r4, r4, #3
 8009a98:	42a0      	cmp	r0, r4
 8009a9a:	d007      	beq.n	8009aac <sbrk_aligned+0x38>
 8009a9c:	1a21      	subs	r1, r4, r0
 8009a9e:	4628      	mov	r0, r5
 8009aa0:	f000 f9c4 	bl	8009e2c <_sbrk_r>
 8009aa4:	3001      	adds	r0, #1
 8009aa6:	d101      	bne.n	8009aac <sbrk_aligned+0x38>
 8009aa8:	f04f 34ff 	mov.w	r4, #4294967295
 8009aac:	4620      	mov	r0, r4
 8009aae:	bd70      	pop	{r4, r5, r6, pc}
 8009ab0:	2000081c 	.word	0x2000081c

08009ab4 <_malloc_r>:
 8009ab4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009ab8:	1ccd      	adds	r5, r1, #3
 8009aba:	4607      	mov	r7, r0
 8009abc:	f025 0503 	bic.w	r5, r5, #3
 8009ac0:	3508      	adds	r5, #8
 8009ac2:	2d0c      	cmp	r5, #12
 8009ac4:	bf38      	it	cc
 8009ac6:	250c      	movcc	r5, #12
 8009ac8:	2d00      	cmp	r5, #0
 8009aca:	db01      	blt.n	8009ad0 <_malloc_r+0x1c>
 8009acc:	42a9      	cmp	r1, r5
 8009ace:	d905      	bls.n	8009adc <_malloc_r+0x28>
 8009ad0:	230c      	movs	r3, #12
 8009ad2:	2600      	movs	r6, #0
 8009ad4:	603b      	str	r3, [r7, #0]
 8009ad6:	4630      	mov	r0, r6
 8009ad8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009adc:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8009bb0 <_malloc_r+0xfc>
 8009ae0:	f000 f868 	bl	8009bb4 <__malloc_lock>
 8009ae4:	f8d8 3000 	ldr.w	r3, [r8]
 8009ae8:	461c      	mov	r4, r3
 8009aea:	bb5c      	cbnz	r4, 8009b44 <_malloc_r+0x90>
 8009aec:	4629      	mov	r1, r5
 8009aee:	4638      	mov	r0, r7
 8009af0:	f7ff ffc0 	bl	8009a74 <sbrk_aligned>
 8009af4:	1c43      	adds	r3, r0, #1
 8009af6:	4604      	mov	r4, r0
 8009af8:	d155      	bne.n	8009ba6 <_malloc_r+0xf2>
 8009afa:	f8d8 4000 	ldr.w	r4, [r8]
 8009afe:	4626      	mov	r6, r4
 8009b00:	2e00      	cmp	r6, #0
 8009b02:	d145      	bne.n	8009b90 <_malloc_r+0xdc>
 8009b04:	2c00      	cmp	r4, #0
 8009b06:	d048      	beq.n	8009b9a <_malloc_r+0xe6>
 8009b08:	6823      	ldr	r3, [r4, #0]
 8009b0a:	4631      	mov	r1, r6
 8009b0c:	4638      	mov	r0, r7
 8009b0e:	eb04 0903 	add.w	r9, r4, r3
 8009b12:	f000 f98b 	bl	8009e2c <_sbrk_r>
 8009b16:	4581      	cmp	r9, r0
 8009b18:	d13f      	bne.n	8009b9a <_malloc_r+0xe6>
 8009b1a:	6821      	ldr	r1, [r4, #0]
 8009b1c:	4638      	mov	r0, r7
 8009b1e:	1a6d      	subs	r5, r5, r1
 8009b20:	4629      	mov	r1, r5
 8009b22:	f7ff ffa7 	bl	8009a74 <sbrk_aligned>
 8009b26:	3001      	adds	r0, #1
 8009b28:	d037      	beq.n	8009b9a <_malloc_r+0xe6>
 8009b2a:	6823      	ldr	r3, [r4, #0]
 8009b2c:	442b      	add	r3, r5
 8009b2e:	6023      	str	r3, [r4, #0]
 8009b30:	f8d8 3000 	ldr.w	r3, [r8]
 8009b34:	2b00      	cmp	r3, #0
 8009b36:	d038      	beq.n	8009baa <_malloc_r+0xf6>
 8009b38:	685a      	ldr	r2, [r3, #4]
 8009b3a:	42a2      	cmp	r2, r4
 8009b3c:	d12b      	bne.n	8009b96 <_malloc_r+0xe2>
 8009b3e:	2200      	movs	r2, #0
 8009b40:	605a      	str	r2, [r3, #4]
 8009b42:	e00f      	b.n	8009b64 <_malloc_r+0xb0>
 8009b44:	6822      	ldr	r2, [r4, #0]
 8009b46:	1b52      	subs	r2, r2, r5
 8009b48:	d41f      	bmi.n	8009b8a <_malloc_r+0xd6>
 8009b4a:	2a0b      	cmp	r2, #11
 8009b4c:	d917      	bls.n	8009b7e <_malloc_r+0xca>
 8009b4e:	1961      	adds	r1, r4, r5
 8009b50:	42a3      	cmp	r3, r4
 8009b52:	6025      	str	r5, [r4, #0]
 8009b54:	bf18      	it	ne
 8009b56:	6059      	strne	r1, [r3, #4]
 8009b58:	6863      	ldr	r3, [r4, #4]
 8009b5a:	bf08      	it	eq
 8009b5c:	f8c8 1000 	streq.w	r1, [r8]
 8009b60:	5162      	str	r2, [r4, r5]
 8009b62:	604b      	str	r3, [r1, #4]
 8009b64:	f104 060b 	add.w	r6, r4, #11
 8009b68:	4638      	mov	r0, r7
 8009b6a:	f000 f829 	bl	8009bc0 <__malloc_unlock>
 8009b6e:	1d23      	adds	r3, r4, #4
 8009b70:	f026 0607 	bic.w	r6, r6, #7
 8009b74:	1af2      	subs	r2, r6, r3
 8009b76:	d0ae      	beq.n	8009ad6 <_malloc_r+0x22>
 8009b78:	1b9b      	subs	r3, r3, r6
 8009b7a:	50a3      	str	r3, [r4, r2]
 8009b7c:	e7ab      	b.n	8009ad6 <_malloc_r+0x22>
 8009b7e:	42a3      	cmp	r3, r4
 8009b80:	6862      	ldr	r2, [r4, #4]
 8009b82:	d1dd      	bne.n	8009b40 <_malloc_r+0x8c>
 8009b84:	f8c8 2000 	str.w	r2, [r8]
 8009b88:	e7ec      	b.n	8009b64 <_malloc_r+0xb0>
 8009b8a:	4623      	mov	r3, r4
 8009b8c:	6864      	ldr	r4, [r4, #4]
 8009b8e:	e7ac      	b.n	8009aea <_malloc_r+0x36>
 8009b90:	4634      	mov	r4, r6
 8009b92:	6876      	ldr	r6, [r6, #4]
 8009b94:	e7b4      	b.n	8009b00 <_malloc_r+0x4c>
 8009b96:	4613      	mov	r3, r2
 8009b98:	e7cc      	b.n	8009b34 <_malloc_r+0x80>
 8009b9a:	230c      	movs	r3, #12
 8009b9c:	4638      	mov	r0, r7
 8009b9e:	603b      	str	r3, [r7, #0]
 8009ba0:	f000 f80e 	bl	8009bc0 <__malloc_unlock>
 8009ba4:	e797      	b.n	8009ad6 <_malloc_r+0x22>
 8009ba6:	6025      	str	r5, [r4, #0]
 8009ba8:	e7dc      	b.n	8009b64 <_malloc_r+0xb0>
 8009baa:	605b      	str	r3, [r3, #4]
 8009bac:	deff      	udf	#255	; 0xff
 8009bae:	bf00      	nop
 8009bb0:	20000818 	.word	0x20000818

08009bb4 <__malloc_lock>:
 8009bb4:	4801      	ldr	r0, [pc, #4]	; (8009bbc <__malloc_lock+0x8>)
 8009bb6:	f7ff bf0e 	b.w	80099d6 <__retarget_lock_acquire_recursive>
 8009bba:	bf00      	nop
 8009bbc:	20000814 	.word	0x20000814

08009bc0 <__malloc_unlock>:
 8009bc0:	4801      	ldr	r0, [pc, #4]	; (8009bc8 <__malloc_unlock+0x8>)
 8009bc2:	f7ff bf09 	b.w	80099d8 <__retarget_lock_release_recursive>
 8009bc6:	bf00      	nop
 8009bc8:	20000814 	.word	0x20000814

08009bcc <__sflush_r>:
 8009bcc:	898a      	ldrh	r2, [r1, #12]
 8009bce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009bd2:	4605      	mov	r5, r0
 8009bd4:	0710      	lsls	r0, r2, #28
 8009bd6:	460c      	mov	r4, r1
 8009bd8:	d458      	bmi.n	8009c8c <__sflush_r+0xc0>
 8009bda:	684b      	ldr	r3, [r1, #4]
 8009bdc:	2b00      	cmp	r3, #0
 8009bde:	dc05      	bgt.n	8009bec <__sflush_r+0x20>
 8009be0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009be2:	2b00      	cmp	r3, #0
 8009be4:	dc02      	bgt.n	8009bec <__sflush_r+0x20>
 8009be6:	2000      	movs	r0, #0
 8009be8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009bec:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009bee:	2e00      	cmp	r6, #0
 8009bf0:	d0f9      	beq.n	8009be6 <__sflush_r+0x1a>
 8009bf2:	2300      	movs	r3, #0
 8009bf4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009bf8:	682f      	ldr	r7, [r5, #0]
 8009bfa:	6a21      	ldr	r1, [r4, #32]
 8009bfc:	602b      	str	r3, [r5, #0]
 8009bfe:	d032      	beq.n	8009c66 <__sflush_r+0x9a>
 8009c00:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009c02:	89a3      	ldrh	r3, [r4, #12]
 8009c04:	075a      	lsls	r2, r3, #29
 8009c06:	d505      	bpl.n	8009c14 <__sflush_r+0x48>
 8009c08:	6863      	ldr	r3, [r4, #4]
 8009c0a:	1ac0      	subs	r0, r0, r3
 8009c0c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009c0e:	b10b      	cbz	r3, 8009c14 <__sflush_r+0x48>
 8009c10:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009c12:	1ac0      	subs	r0, r0, r3
 8009c14:	2300      	movs	r3, #0
 8009c16:	4602      	mov	r2, r0
 8009c18:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009c1a:	4628      	mov	r0, r5
 8009c1c:	6a21      	ldr	r1, [r4, #32]
 8009c1e:	47b0      	blx	r6
 8009c20:	1c43      	adds	r3, r0, #1
 8009c22:	89a3      	ldrh	r3, [r4, #12]
 8009c24:	d106      	bne.n	8009c34 <__sflush_r+0x68>
 8009c26:	6829      	ldr	r1, [r5, #0]
 8009c28:	291d      	cmp	r1, #29
 8009c2a:	d82b      	bhi.n	8009c84 <__sflush_r+0xb8>
 8009c2c:	4a28      	ldr	r2, [pc, #160]	; (8009cd0 <__sflush_r+0x104>)
 8009c2e:	410a      	asrs	r2, r1
 8009c30:	07d6      	lsls	r6, r2, #31
 8009c32:	d427      	bmi.n	8009c84 <__sflush_r+0xb8>
 8009c34:	2200      	movs	r2, #0
 8009c36:	04d9      	lsls	r1, r3, #19
 8009c38:	6062      	str	r2, [r4, #4]
 8009c3a:	6922      	ldr	r2, [r4, #16]
 8009c3c:	6022      	str	r2, [r4, #0]
 8009c3e:	d504      	bpl.n	8009c4a <__sflush_r+0x7e>
 8009c40:	1c42      	adds	r2, r0, #1
 8009c42:	d101      	bne.n	8009c48 <__sflush_r+0x7c>
 8009c44:	682b      	ldr	r3, [r5, #0]
 8009c46:	b903      	cbnz	r3, 8009c4a <__sflush_r+0x7e>
 8009c48:	6560      	str	r0, [r4, #84]	; 0x54
 8009c4a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009c4c:	602f      	str	r7, [r5, #0]
 8009c4e:	2900      	cmp	r1, #0
 8009c50:	d0c9      	beq.n	8009be6 <__sflush_r+0x1a>
 8009c52:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009c56:	4299      	cmp	r1, r3
 8009c58:	d002      	beq.n	8009c60 <__sflush_r+0x94>
 8009c5a:	4628      	mov	r0, r5
 8009c5c:	f7ff febe 	bl	80099dc <_free_r>
 8009c60:	2000      	movs	r0, #0
 8009c62:	6360      	str	r0, [r4, #52]	; 0x34
 8009c64:	e7c0      	b.n	8009be8 <__sflush_r+0x1c>
 8009c66:	2301      	movs	r3, #1
 8009c68:	4628      	mov	r0, r5
 8009c6a:	47b0      	blx	r6
 8009c6c:	1c41      	adds	r1, r0, #1
 8009c6e:	d1c8      	bne.n	8009c02 <__sflush_r+0x36>
 8009c70:	682b      	ldr	r3, [r5, #0]
 8009c72:	2b00      	cmp	r3, #0
 8009c74:	d0c5      	beq.n	8009c02 <__sflush_r+0x36>
 8009c76:	2b1d      	cmp	r3, #29
 8009c78:	d001      	beq.n	8009c7e <__sflush_r+0xb2>
 8009c7a:	2b16      	cmp	r3, #22
 8009c7c:	d101      	bne.n	8009c82 <__sflush_r+0xb6>
 8009c7e:	602f      	str	r7, [r5, #0]
 8009c80:	e7b1      	b.n	8009be6 <__sflush_r+0x1a>
 8009c82:	89a3      	ldrh	r3, [r4, #12]
 8009c84:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009c88:	81a3      	strh	r3, [r4, #12]
 8009c8a:	e7ad      	b.n	8009be8 <__sflush_r+0x1c>
 8009c8c:	690f      	ldr	r7, [r1, #16]
 8009c8e:	2f00      	cmp	r7, #0
 8009c90:	d0a9      	beq.n	8009be6 <__sflush_r+0x1a>
 8009c92:	0793      	lsls	r3, r2, #30
 8009c94:	680e      	ldr	r6, [r1, #0]
 8009c96:	600f      	str	r7, [r1, #0]
 8009c98:	bf0c      	ite	eq
 8009c9a:	694b      	ldreq	r3, [r1, #20]
 8009c9c:	2300      	movne	r3, #0
 8009c9e:	eba6 0807 	sub.w	r8, r6, r7
 8009ca2:	608b      	str	r3, [r1, #8]
 8009ca4:	f1b8 0f00 	cmp.w	r8, #0
 8009ca8:	dd9d      	ble.n	8009be6 <__sflush_r+0x1a>
 8009caa:	4643      	mov	r3, r8
 8009cac:	463a      	mov	r2, r7
 8009cae:	6a21      	ldr	r1, [r4, #32]
 8009cb0:	4628      	mov	r0, r5
 8009cb2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009cb4:	47b0      	blx	r6
 8009cb6:	2800      	cmp	r0, #0
 8009cb8:	dc06      	bgt.n	8009cc8 <__sflush_r+0xfc>
 8009cba:	89a3      	ldrh	r3, [r4, #12]
 8009cbc:	f04f 30ff 	mov.w	r0, #4294967295
 8009cc0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009cc4:	81a3      	strh	r3, [r4, #12]
 8009cc6:	e78f      	b.n	8009be8 <__sflush_r+0x1c>
 8009cc8:	4407      	add	r7, r0
 8009cca:	eba8 0800 	sub.w	r8, r8, r0
 8009cce:	e7e9      	b.n	8009ca4 <__sflush_r+0xd8>
 8009cd0:	dfbffffe 	.word	0xdfbffffe

08009cd4 <_fflush_r>:
 8009cd4:	b538      	push	{r3, r4, r5, lr}
 8009cd6:	690b      	ldr	r3, [r1, #16]
 8009cd8:	4605      	mov	r5, r0
 8009cda:	460c      	mov	r4, r1
 8009cdc:	b913      	cbnz	r3, 8009ce4 <_fflush_r+0x10>
 8009cde:	2500      	movs	r5, #0
 8009ce0:	4628      	mov	r0, r5
 8009ce2:	bd38      	pop	{r3, r4, r5, pc}
 8009ce4:	b118      	cbz	r0, 8009cee <_fflush_r+0x1a>
 8009ce6:	6a03      	ldr	r3, [r0, #32]
 8009ce8:	b90b      	cbnz	r3, 8009cee <_fflush_r+0x1a>
 8009cea:	f7ff fc7b 	bl	80095e4 <__sinit>
 8009cee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009cf2:	2b00      	cmp	r3, #0
 8009cf4:	d0f3      	beq.n	8009cde <_fflush_r+0xa>
 8009cf6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009cf8:	07d0      	lsls	r0, r2, #31
 8009cfa:	d404      	bmi.n	8009d06 <_fflush_r+0x32>
 8009cfc:	0599      	lsls	r1, r3, #22
 8009cfe:	d402      	bmi.n	8009d06 <_fflush_r+0x32>
 8009d00:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009d02:	f7ff fe68 	bl	80099d6 <__retarget_lock_acquire_recursive>
 8009d06:	4628      	mov	r0, r5
 8009d08:	4621      	mov	r1, r4
 8009d0a:	f7ff ff5f 	bl	8009bcc <__sflush_r>
 8009d0e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009d10:	4605      	mov	r5, r0
 8009d12:	07da      	lsls	r2, r3, #31
 8009d14:	d4e4      	bmi.n	8009ce0 <_fflush_r+0xc>
 8009d16:	89a3      	ldrh	r3, [r4, #12]
 8009d18:	059b      	lsls	r3, r3, #22
 8009d1a:	d4e1      	bmi.n	8009ce0 <_fflush_r+0xc>
 8009d1c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009d1e:	f7ff fe5b 	bl	80099d8 <__retarget_lock_release_recursive>
 8009d22:	e7dd      	b.n	8009ce0 <_fflush_r+0xc>

08009d24 <__swhatbuf_r>:
 8009d24:	b570      	push	{r4, r5, r6, lr}
 8009d26:	460c      	mov	r4, r1
 8009d28:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009d2c:	b096      	sub	sp, #88	; 0x58
 8009d2e:	4615      	mov	r5, r2
 8009d30:	2900      	cmp	r1, #0
 8009d32:	461e      	mov	r6, r3
 8009d34:	da0c      	bge.n	8009d50 <__swhatbuf_r+0x2c>
 8009d36:	89a3      	ldrh	r3, [r4, #12]
 8009d38:	2100      	movs	r1, #0
 8009d3a:	f013 0f80 	tst.w	r3, #128	; 0x80
 8009d3e:	bf0c      	ite	eq
 8009d40:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8009d44:	2340      	movne	r3, #64	; 0x40
 8009d46:	2000      	movs	r0, #0
 8009d48:	6031      	str	r1, [r6, #0]
 8009d4a:	602b      	str	r3, [r5, #0]
 8009d4c:	b016      	add	sp, #88	; 0x58
 8009d4e:	bd70      	pop	{r4, r5, r6, pc}
 8009d50:	466a      	mov	r2, sp
 8009d52:	f000 f849 	bl	8009de8 <_fstat_r>
 8009d56:	2800      	cmp	r0, #0
 8009d58:	dbed      	blt.n	8009d36 <__swhatbuf_r+0x12>
 8009d5a:	9901      	ldr	r1, [sp, #4]
 8009d5c:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8009d60:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8009d64:	4259      	negs	r1, r3
 8009d66:	4159      	adcs	r1, r3
 8009d68:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009d6c:	e7eb      	b.n	8009d46 <__swhatbuf_r+0x22>

08009d6e <__smakebuf_r>:
 8009d6e:	898b      	ldrh	r3, [r1, #12]
 8009d70:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009d72:	079d      	lsls	r5, r3, #30
 8009d74:	4606      	mov	r6, r0
 8009d76:	460c      	mov	r4, r1
 8009d78:	d507      	bpl.n	8009d8a <__smakebuf_r+0x1c>
 8009d7a:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009d7e:	6023      	str	r3, [r4, #0]
 8009d80:	6123      	str	r3, [r4, #16]
 8009d82:	2301      	movs	r3, #1
 8009d84:	6163      	str	r3, [r4, #20]
 8009d86:	b002      	add	sp, #8
 8009d88:	bd70      	pop	{r4, r5, r6, pc}
 8009d8a:	ab01      	add	r3, sp, #4
 8009d8c:	466a      	mov	r2, sp
 8009d8e:	f7ff ffc9 	bl	8009d24 <__swhatbuf_r>
 8009d92:	9900      	ldr	r1, [sp, #0]
 8009d94:	4605      	mov	r5, r0
 8009d96:	4630      	mov	r0, r6
 8009d98:	f7ff fe8c 	bl	8009ab4 <_malloc_r>
 8009d9c:	b948      	cbnz	r0, 8009db2 <__smakebuf_r+0x44>
 8009d9e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009da2:	059a      	lsls	r2, r3, #22
 8009da4:	d4ef      	bmi.n	8009d86 <__smakebuf_r+0x18>
 8009da6:	f023 0303 	bic.w	r3, r3, #3
 8009daa:	f043 0302 	orr.w	r3, r3, #2
 8009dae:	81a3      	strh	r3, [r4, #12]
 8009db0:	e7e3      	b.n	8009d7a <__smakebuf_r+0xc>
 8009db2:	89a3      	ldrh	r3, [r4, #12]
 8009db4:	6020      	str	r0, [r4, #0]
 8009db6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009dba:	6120      	str	r0, [r4, #16]
 8009dbc:	81a3      	strh	r3, [r4, #12]
 8009dbe:	9b00      	ldr	r3, [sp, #0]
 8009dc0:	6163      	str	r3, [r4, #20]
 8009dc2:	9b01      	ldr	r3, [sp, #4]
 8009dc4:	b15b      	cbz	r3, 8009dde <__smakebuf_r+0x70>
 8009dc6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009dca:	4630      	mov	r0, r6
 8009dcc:	f000 f81e 	bl	8009e0c <_isatty_r>
 8009dd0:	b128      	cbz	r0, 8009dde <__smakebuf_r+0x70>
 8009dd2:	89a3      	ldrh	r3, [r4, #12]
 8009dd4:	f023 0303 	bic.w	r3, r3, #3
 8009dd8:	f043 0301 	orr.w	r3, r3, #1
 8009ddc:	81a3      	strh	r3, [r4, #12]
 8009dde:	89a3      	ldrh	r3, [r4, #12]
 8009de0:	431d      	orrs	r5, r3
 8009de2:	81a5      	strh	r5, [r4, #12]
 8009de4:	e7cf      	b.n	8009d86 <__smakebuf_r+0x18>
	...

08009de8 <_fstat_r>:
 8009de8:	b538      	push	{r3, r4, r5, lr}
 8009dea:	2300      	movs	r3, #0
 8009dec:	4d06      	ldr	r5, [pc, #24]	; (8009e08 <_fstat_r+0x20>)
 8009dee:	4604      	mov	r4, r0
 8009df0:	4608      	mov	r0, r1
 8009df2:	4611      	mov	r1, r2
 8009df4:	602b      	str	r3, [r5, #0]
 8009df6:	f7f7 f98a 	bl	800110e <_fstat>
 8009dfa:	1c43      	adds	r3, r0, #1
 8009dfc:	d102      	bne.n	8009e04 <_fstat_r+0x1c>
 8009dfe:	682b      	ldr	r3, [r5, #0]
 8009e00:	b103      	cbz	r3, 8009e04 <_fstat_r+0x1c>
 8009e02:	6023      	str	r3, [r4, #0]
 8009e04:	bd38      	pop	{r3, r4, r5, pc}
 8009e06:	bf00      	nop
 8009e08:	20000810 	.word	0x20000810

08009e0c <_isatty_r>:
 8009e0c:	b538      	push	{r3, r4, r5, lr}
 8009e0e:	2300      	movs	r3, #0
 8009e10:	4d05      	ldr	r5, [pc, #20]	; (8009e28 <_isatty_r+0x1c>)
 8009e12:	4604      	mov	r4, r0
 8009e14:	4608      	mov	r0, r1
 8009e16:	602b      	str	r3, [r5, #0]
 8009e18:	f7f7 f989 	bl	800112e <_isatty>
 8009e1c:	1c43      	adds	r3, r0, #1
 8009e1e:	d102      	bne.n	8009e26 <_isatty_r+0x1a>
 8009e20:	682b      	ldr	r3, [r5, #0]
 8009e22:	b103      	cbz	r3, 8009e26 <_isatty_r+0x1a>
 8009e24:	6023      	str	r3, [r4, #0]
 8009e26:	bd38      	pop	{r3, r4, r5, pc}
 8009e28:	20000810 	.word	0x20000810

08009e2c <_sbrk_r>:
 8009e2c:	b538      	push	{r3, r4, r5, lr}
 8009e2e:	2300      	movs	r3, #0
 8009e30:	4d05      	ldr	r5, [pc, #20]	; (8009e48 <_sbrk_r+0x1c>)
 8009e32:	4604      	mov	r4, r0
 8009e34:	4608      	mov	r0, r1
 8009e36:	602b      	str	r3, [r5, #0]
 8009e38:	f7f7 f992 	bl	8001160 <_sbrk>
 8009e3c:	1c43      	adds	r3, r0, #1
 8009e3e:	d102      	bne.n	8009e46 <_sbrk_r+0x1a>
 8009e40:	682b      	ldr	r3, [r5, #0]
 8009e42:	b103      	cbz	r3, 8009e46 <_sbrk_r+0x1a>
 8009e44:	6023      	str	r3, [r4, #0]
 8009e46:	bd38      	pop	{r3, r4, r5, pc}
 8009e48:	20000810 	.word	0x20000810

08009e4c <_init>:
 8009e4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e4e:	bf00      	nop
 8009e50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009e52:	bc08      	pop	{r3}
 8009e54:	469e      	mov	lr, r3
 8009e56:	4770      	bx	lr

08009e58 <_fini>:
 8009e58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e5a:	bf00      	nop
 8009e5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009e5e:	bc08      	pop	{r3}
 8009e60:	469e      	mov	lr, r3
 8009e62:	4770      	bx	lr
